
DriversRepo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00007154  000071e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000302  008001a8  008001a8  00007330  2**0
                  ALLOC
  3 .stab         000093b4  00000000  00000000  00007330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004978  00000000  00000000  000106e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0001505c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000151fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000153ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000177f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00018b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00019d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00019f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001a20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001ab7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__vector_6>
      1c:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f1 e7       	ldi	r31, 0x71	; 113
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c4 32 	call	0x6588	; 0x6588 <main>
      8a:	0c 94 a8 38 	jmp	0x7150	; 0x7150 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 38 	jmp	0x70a4	; 0x70a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e6       	ldi	r26, 0x65	; 101
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 38 	jmp	0x70dc	; 0x70dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 38 	jmp	0x70a4	; 0x70a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e6       	ldi	r24, 0x65	; 101
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 38 	jmp	0x70dc	; 0x70dc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e6       	ldi	r22, 0x65	; 101
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7a 38 	jmp	0x70f4	; 0x70f4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7e 38 	jmp	0x70fc	; 0x70fc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 76 38 	jmp	0x70ec	; 0x70ec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 59       	subi	r30, 0x93	; 147
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <WDT_VoidEnable>:

#include "../Header/WDT_Interface.h"


void WDT_VoidEnable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(WDT_WDTCR , WDT_WDE);
     e36:	a1 e4       	ldi	r26, 0x41	; 65
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e1 e4       	ldi	r30, 0x41	; 65
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	88 60       	ori	r24, 0x08	; 8
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <WDT_VoidDisable>:
void WDT_VoidDisable(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/*Bit Masking */
	WDT_WDTCR = (1<<WDT_WDE)|(1<<WDT_WDTOE);
     e52:	e1 e4       	ldi	r30, 0x41	; 65
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	88 e1       	ldi	r24, 0x18	; 24
     e58:	80 83       	st	Z, r24
	WDT_WDTCR = 0x00 ;
     e5a:	e1 e4       	ldi	r30, 0x41	; 65
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <WDT_u8Wait>:

void WDT_u8Wait(u8 Local_SleepTime)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
	if (Local_SleepTime < 8 )
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	78 f4       	brcc	.+30     	; 0xe96 <WDT_u8Wait+0x30>
	{
		WDT_WDTCR &= 0b11111000;
     e78:	a1 e4       	ldi	r26, 0x41	; 65
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e1 e4       	ldi	r30, 0x41	; 65
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	88 7f       	andi	r24, 0xF8	; 248
     e84:	8c 93       	st	X, r24
		WDT_WDTCR |= Local_SleepTime ;
     e86:	a1 e4       	ldi	r26, 0x41	; 65
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e1 e4       	ldi	r30, 0x41	; 65
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	90 81       	ld	r25, Z
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	89 2b       	or	r24, r25
     e94:	8c 93       	st	X, r24
	}
}
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <UART_VoidInit>:
#include "../Header/UART_Register.h"
#include "../Header/UART_Interface.h"


void UART_VoidInit(u16 Baudrate)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <UART_VoidInit+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <UART_VoidInit+0x8>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
	/*Select the PD1 as OUPUT*/
	u16 UBRR  ;
	/*Calc the Baud rate */
#if UART_OperationMode == UART_NormalMode
	/*baud rate & U2X Must Be Zero*/
	UBRR = (((FOC)/(16UL*Baudrate))-1) ;
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	cc 01       	movw	r24, r24
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	aa 1f       	adc	r26, r26
     ebe:	bb 1f       	adc	r27, r27
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	aa 1f       	adc	r26, r26
     ec6:	bb 1f       	adc	r27, r27
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	aa 1f       	adc	r26, r26
     ece:	bb 1f       	adc	r27, r27
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	aa 1f       	adc	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	9c 01       	movw	r18, r24
     eda:	ad 01       	movw	r20, r26
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	92 e1       	ldi	r25, 0x12	; 18
     ee0:	aa e7       	ldi	r26, 0x7A	; 122
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	bc 01       	movw	r22, r24
     ee6:	cd 01       	movw	r24, r26
     ee8:	0e 94 1c 38 	call	0x7038	; 0x7038 <__udivmodsi4>
     eec:	da 01       	movw	r26, r20
     eee:	c9 01       	movw	r24, r18
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(UART_UCSRA,UART_U2X);
     ef6:	ab e2       	ldi	r26, 0x2B	; 43
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	eb e2       	ldi	r30, 0x2B	; 43
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	8c 93       	st	X, r24
#elif UART_OperationMode == UART_DoubleSpeedMode
	/*baud rate divi 8 & U2X Must Be One*/
	UBRR = (((FOC)/(8*Baudrate))-1) ;
	Set_Bit(UART_UCSRA,UART_U2X);
#endif
	UART_UBRRL = (u8)UBRR ;
     f04:	e9 e2       	ldi	r30, 0x29	; 41
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	80 83       	st	Z, r24
	UART_UBRRH = (u8)(UBRR>>8);
     f0c:	e0 e4       	ldi	r30, 0x40	; 64
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	89 2f       	mov	r24, r25
     f16:	99 27       	eor	r25, r25
     f18:	80 83       	st	Z, r24

	UART_UCSRB = (1<<UART_RXEN)|(1<<UART_TXEN);
     f1a:	ea e2       	ldi	r30, 0x2A	; 42
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	88 e1       	ldi	r24, 0x18	; 24
     f20:	80 83       	st	Z, r24

	UART_UCSRC = (1<<UART_URSEL)|(1<<UART_USBS)| (1<<UART_UCSZ0) |(1<<UART_UCSZ1);
     f22:	e0 e4       	ldi	r30, 0x40	; 64
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	8e e8       	ldi	r24, 0x8E	; 142
     f28:	80 83       	st	Z, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <UART_VoidTx>:

void UART_VoidTx(u8 local_data)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	0f 92       	push	r0
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	89 83       	std	Y+1, r24	; 0x01
/*Polling*/
/*Wait Until the Tx Buffer Must be Empty*/
	while(Get_Bit(UART_UCSRA,UART_UDRE)==0);
     f44:	eb e2       	ldi	r30, 0x2B	; 43
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 95       	swap	r24
     f4c:	86 95       	lsr	r24
     f4e:	87 70       	andi	r24, 0x07	; 7
     f50:	88 2f       	mov	r24, r24
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	81 70       	andi	r24, 0x01	; 1
     f56:	90 70       	andi	r25, 0x00	; 0
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	a1 f3       	breq	.-24     	; 0xf44 <UART_VoidTx+0xc>
	UART_UDR = local_data ;
     f5c:	ec e2       	ldi	r30, 0x2C	; 44
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 83       	st	Z, r24


}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <UART_voidRX>:

u8  UART_voidRX(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	/*Wait until the Rx flag == 1*/
	while(Get_Bit(UART_UCSRA ,UART_RXC)==0);
     f74:	eb e2       	ldi	r30, 0x2B	; 43
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	88 23       	and	r24, r24
     f7c:	dc f7       	brge	.-10     	; 0xf74 <UART_voidRX+0x8>
	return UART_UDR ;
     f7e:	ec e2       	ldi	r30, 0x2C	; 44
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z

}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <PWM1_VoidInitM14>:
//void PWM1_VoidSevInit()
/*non inverting
 * perodic time = Over Flow time = tick time * OverFlow value
 * on time  = Compare time => compare Value *tick time  */
void PWM1_VoidInitM14(u16 Local_MaxValue,u16 Local_CompareValue, u8 Local_Prescaller)
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62
     f92:	27 97       	sbiw	r28, 0x07	; 7
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	9a 83       	std	Y+2, r25	; 0x02
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	7c 83       	std	Y+4, r23	; 0x04
     fa4:	6b 83       	std	Y+3, r22	; 0x03
     fa6:	4d 83       	std	Y+5, r20	; 0x05

	//	 *Select the Mode -> mode 14:
	//	 *  			    	WGM10 -> LOW ->TCCR1A
	Clear_Bit(TI1_TCCR1A,TI1_WGM10);
     fa8:	af e4       	ldi	r26, 0x4F	; 79
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	ef e4       	ldi	r30, 0x4F	; 79
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8e 7f       	andi	r24, 0xFE	; 254
     fb4:	8c 93       	st	X, r24
	//	 * 						WGM11 -> High->TCCR1A
	Set_Bit(TI1_TCCR1A,TI1_WGM11);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	8c 93       	st	X, r24
	//	 * 						WGM12 -> High->TCCR1B
	Set_Bit(TI1_TCCR1B,TI1_WGM12);
     fc4:	ae e4       	ldi	r26, 0x4E	; 78
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ee e4       	ldi	r30, 0x4E	; 78
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 60       	ori	r24, 0x08	; 8
     fd0:	8c 93       	st	X, r24
	//	 * 						WGM13 -> High->TCCR1B
	Set_Bit(TI1_TCCR1B,TI1_WGM13);
     fd2:	ae e4       	ldi	r26, 0x4E	; 78
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ee e4       	ldi	r30, 0x4E	; 78
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 61       	ori	r24, 0x10	; 16
     fde:	8c 93       	st	X, r24
	//	 *Select The Action pwm mode-> Nin inverting & unit A (COM1A0->low)/(COM1A1->Set)
	Clear_Bit(TI1_TCCR1A,TI1_COM1A0);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	8c 93       	st	X, r24
	Set_Bit(TI1_TCCR1A,TI1_COM1A1);
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	8c 93       	st	X, r24
	//	 * Assign the Max value in Register (ICR1 = Local_MaxValue)
	TI1_ICR1 = Local_MaxValue ;
     ffc:	e6 e4       	ldi	r30, 0x46	; 70
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
	//	 * PWM1_VoidSetCompareValue(Local_CompareValue);
	TI1_OCR1A= Local_CompareValue ;
    1008:	ea e4       	ldi	r30, 0x4A	; 74
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	9c 81       	ldd	r25, Y+4	; 0x04
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
	//	 * select the Prescaller

	switch (Local_Prescaller)
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	3f 83       	std	Y+7, r19	; 0x07
    101c:	2e 83       	std	Y+6, r18	; 0x06
    101e:	8e 81       	ldd	r24, Y+6	; 0x06
    1020:	9f 81       	ldd	r25, Y+7	; 0x07
    1022:	85 30       	cpi	r24, 0x05	; 5
    1024:	91 05       	cpc	r25, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <PWM1_VoidInitM14+0xa0>
    1028:	58 c0       	rjmp	.+176    	; 0x10da <PWM1_VoidInitM14+0x150>
    102a:	2e 81       	ldd	r18, Y+6	; 0x06
    102c:	3f 81       	ldd	r19, Y+7	; 0x07
    102e:	26 30       	cpi	r18, 0x06	; 6
    1030:	31 05       	cpc	r19, r1
    1032:	5c f4       	brge	.+22     	; 0x104a <PWM1_VoidInitM14+0xc0>
    1034:	8e 81       	ldd	r24, Y+6	; 0x06
    1036:	9f 81       	ldd	r25, Y+7	; 0x07
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	91 05       	cpc	r25, r1
    103c:	61 f0       	breq	.+24     	; 0x1056 <PWM1_VoidInitM14+0xcc>
    103e:	2e 81       	ldd	r18, Y+6	; 0x06
    1040:	3f 81       	ldd	r19, Y+7	; 0x07
    1042:	24 30       	cpi	r18, 0x04	; 4
    1044:	31 05       	cpc	r19, r1
    1046:	99 f1       	breq	.+102    	; 0x10ae <PWM1_VoidInitM14+0x124>
    1048:	1c c0       	rjmp	.+56     	; 0x1082 <PWM1_VoidInitM14+0xf8>
    104a:	8e 81       	ldd	r24, Y+6	; 0x06
    104c:	9f 81       	ldd	r25, Y+7	; 0x07
    104e:	89 30       	cpi	r24, 0x09	; 9
    1050:	91 05       	cpc	r25, r1
    1052:	bc f4       	brge	.+46     	; 0x1082 <PWM1_VoidInitM14+0xf8>
    1054:	57 c0       	rjmp	.+174    	; 0x1104 <PWM1_VoidInitM14+0x17a>
	{
	case TI1_NoPrescale:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
    1056:	ae e4       	ldi	r26, 0x4E	; 78
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ee e4       	ldi	r30, 0x4E	; 78
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    1064:	ae e4       	ldi	r26, 0x4E	; 78
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	ee e4       	ldi	r30, 0x4E	; 78
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8d 7f       	andi	r24, 0xFD	; 253
    1070:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    1072:	ae e4       	ldi	r26, 0x4E	; 78
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	ee e4       	ldi	r30, 0x4E	; 78
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8b 7f       	andi	r24, 0xFB	; 251
    107e:	8c 93       	st	X, r24
    1080:	41 c0       	rjmp	.+130    	; 0x1104 <PWM1_VoidInitM14+0x17a>
		break;
	default:
	case TI1_Prescaler8:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
    1082:	ae e4       	ldi	r26, 0x4E	; 78
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ee e4       	ldi	r30, 0x4E	; 78
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	8e 7f       	andi	r24, 0xFE	; 254
    108e:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
    1090:	ae e4       	ldi	r26, 0x4E	; 78
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	ee e4       	ldi	r30, 0x4E	; 78
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	82 60       	ori	r24, 0x02	; 2
    109c:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    109e:	ae e4       	ldi	r26, 0x4E	; 78
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	ee e4       	ldi	r30, 0x4E	; 78
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	8c 93       	st	X, r24
    10ac:	2b c0       	rjmp	.+86     	; 0x1104 <PWM1_VoidInitM14+0x17a>
		break;
	case TI1_Prescaler64:
		Set_Bit(TI1_TCCR1B,TI1_CS10);
    10ae:	ae e4       	ldi	r26, 0x4E	; 78
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ee e4       	ldi	r30, 0x4E	; 78
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS11);
    10bc:	ae e4       	ldi	r26, 0x4E	; 78
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ee e4       	ldi	r30, 0x4E	; 78
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	82 60       	ori	r24, 0x02	; 2
    10c8:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    10ca:	ae e4       	ldi	r26, 0x4E	; 78
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ee e4       	ldi	r30, 0x4E	; 78
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8b 7f       	andi	r24, 0xFB	; 251
    10d6:	8c 93       	st	X, r24
    10d8:	15 c0       	rjmp	.+42     	; 0x1104 <PWM1_VoidInitM14+0x17a>
		break;
	case TI1_Prescaler256:
		Clear_Bit(TI1_TCCR1B,TI1_CS10);
    10da:	ae e4       	ldi	r26, 0x4E	; 78
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ee e4       	ldi	r30, 0x4E	; 78
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8e 7f       	andi	r24, 0xFE	; 254
    10e6:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    10e8:	ae e4       	ldi	r26, 0x4E	; 78
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ee e4       	ldi	r30, 0x4E	; 78
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8d 7f       	andi	r24, 0xFD	; 253
    10f4:	8c 93       	st	X, r24
		Set_Bit(TI1_TCCR1B,TI1_CS12);
    10f6:	ae e4       	ldi	r26, 0x4E	; 78
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	ee e4       	ldi	r30, 0x4E	; 78
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	84 60       	ori	r24, 0x04	; 4
    1102:	8c 93       	st	X, r24
	case TI1_ExternalClkRising:
		break;
	}


}
    1104:	27 96       	adiw	r28, 0x07	; 7
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <PWM1_VoidSetCompareValue>:

void PWM1_VoidSetCompareValue(u16 Local_CompareValue)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <PWM1_VoidSetCompareValue+0x6>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	9a 83       	std	Y+2, r25	; 0x02
    1122:	89 83       	std	Y+1, r24	; 0x01
	TI1_OCR1A = Local_CompareValue ;
    1124:	ea e4       	ldi	r30, 0x4A	; 74
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	80 83       	st	Z, r24
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <ICU_VoidInit>:


void ICU_VoidInit()
{	//TCCR1A TCCR1A TCCR1B  TCCR1B
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	//WGM10  WGM11  WGM12   WGM13   Normal Mode
	// 0     0      0       0
	Clear_Bit(TI1_TCCR1A,TI1_WGM10);
    1142:	af e4       	ldi	r26, 0x4F	; 79
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ef e4       	ldi	r30, 0x4F	; 79
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8e 7f       	andi	r24, 0xFE	; 254
    114e:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1A,TI1_WGM11);
    1150:	af e4       	ldi	r26, 0x4F	; 79
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ef e4       	ldi	r30, 0x4F	; 79
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8d 7f       	andi	r24, 0xFD	; 253
    115c:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM12);
    115e:	ae e4       	ldi	r26, 0x4E	; 78
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ee e4       	ldi	r30, 0x4E	; 78
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	87 7f       	andi	r24, 0xF7	; 247
    116a:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_WGM13);
    116c:	ae e4       	ldi	r26, 0x4E	; 78
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	ee e4       	ldi	r30, 0x4E	; 78
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8f 7e       	andi	r24, 0xEF	; 239
    1178:	8c 93       	st	X, r24
	/*------------------------------------------------*/
	//Enable the Interrupt
	Set_Bit(TI1_TIMSK,TI1_TICIE1);
    117a:	a9 e5       	ldi	r26, 0x59	; 89
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e9 e5       	ldi	r30, 0x59	; 89
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 62       	ori	r24, 0x20	; 32
    1186:	8c 93       	st	X, r24
	//Select the Edge Rising
	ICU_VoidSelectEdge(Rising);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	0e 94 df 08 	call	0x11be	; 0x11be <ICU_VoidSelectEdge>
	//prescaller 8
	Clear_Bit(TI1_TCCR1B,TI1_CS10);
    118e:	ae e4       	ldi	r26, 0x4E	; 78
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ee e4       	ldi	r30, 0x4E	; 78
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	8c 93       	st	X, r24
	Set_Bit(TI1_TCCR1B,TI1_CS11);
    119c:	ae e4       	ldi	r26, 0x4E	; 78
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ee e4       	ldi	r30, 0x4E	; 78
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	82 60       	ori	r24, 0x02	; 2
    11a8:	8c 93       	st	X, r24
	Clear_Bit(TI1_TCCR1B,TI1_CS12);
    11aa:	ae e4       	ldi	r26, 0x4E	; 78
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ee e4       	ldi	r30, 0x4E	; 78
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8b 7f       	andi	r24, 0xFB	; 251
    11b6:	8c 93       	st	X, r24


}
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <ICU_VoidSelectEdge>:
void ICU_VoidSelectEdge(u8 Local_TypeOfEdge)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_TypeOfEdge)
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	41 f4       	brne	.+16     	; 0x11e4 <ICU_VoidSelectEdge+0x26>
	{
	case Falling : Clear_Bit(TI1_TCCR1B,TI1_ICES1); break ;
    11d4:	ae e4       	ldi	r26, 0x4E	; 78
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ee e4       	ldi	r30, 0x4E	; 78
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7b       	andi	r24, 0xBF	; 191
    11e0:	8c 93       	st	X, r24
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <ICU_VoidSelectEdge+0x34>
	default      :
	case Rising  : Set_Bit(TI1_TCCR1B,TI1_ICES1);   break ;
    11e4:	ae e4       	ldi	r26, 0x4E	; 78
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ee e4       	ldi	r30, 0x4E	; 78
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24

	}
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <__vector_6>:

void __vector_6(void)
{
    11fa:	1f 92       	push	r1
    11fc:	0f 92       	push	r0
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	0f 92       	push	r0
    1202:	11 24       	eor	r1, r1
    1204:	2f 93       	push	r18
    1206:	3f 93       	push	r19
    1208:	4f 93       	push	r20
    120a:	5f 93       	push	r21
    120c:	6f 93       	push	r22
    120e:	7f 93       	push	r23
    1210:	8f 93       	push	r24
    1212:	9f 93       	push	r25
    1214:	af 93       	push	r26
    1216:	bf 93       	push	r27
    1218:	ef 93       	push	r30
    121a:	ff 93       	push	r31
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62

	u8 static Local_Counter = 0 ;
	Local_Counter++;
    1224:	80 91 b2 01 	lds	r24, 0x01B2
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 b2 01 	sts	0x01B2, r24
	if(Local_Counter==1)
    122e:	80 91 b2 01 	lds	r24, 0x01B2
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	61 f4       	brne	.+24     	; 0x124e <__vector_6+0x54>
	{
		Time1 = TI1_ICR1 ;
    1236:	e6 e4       	ldi	r30, 0x46	; 70
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	90 93 a9 01 	sts	0x01A9, r25
    1242:	80 93 a8 01 	sts	0x01A8, r24
		ICU_VoidSelectEdge(Falling);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 df 08 	call	0x11be	; 0x11be <ICU_VoidSelectEdge>
    124c:	52 c0       	rjmp	.+164    	; 0x12f2 <__vector_6+0xf8>
	}
	else if (Local_Counter==2)
    124e:	80 91 b2 01 	lds	r24, 0x01B2
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	e1 f4       	brne	.+56     	; 0x128e <__vector_6+0x94>
	{
		Time2= TI1_ICR1  ;
    1256:	e6 e4       	ldi	r30, 0x46	; 70
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	90 93 ab 01 	sts	0x01AB, r25
    1262:	80 93 aa 01 	sts	0x01AA, r24
		ONtime=Time2 - Time1;
    1266:	20 91 aa 01 	lds	r18, 0x01AA
    126a:	30 91 ab 01 	lds	r19, 0x01AB
    126e:	80 91 a8 01 	lds	r24, 0x01A8
    1272:	90 91 a9 01 	lds	r25, 0x01A9
    1276:	a9 01       	movw	r20, r18
    1278:	48 1b       	sub	r20, r24
    127a:	59 0b       	sbc	r21, r25
    127c:	ca 01       	movw	r24, r20
    127e:	90 93 af 01 	sts	0x01AF, r25
    1282:	80 93 ae 01 	sts	0x01AE, r24
		ICU_VoidSelectEdge(Rising);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	0e 94 df 08 	call	0x11be	; 0x11be <ICU_VoidSelectEdge>
    128c:	32 c0       	rjmp	.+100    	; 0x12f2 <__vector_6+0xf8>
	}
	else if (Local_Counter==3)
    128e:	80 91 b2 01 	lds	r24, 0x01B2
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	c9 f4       	brne	.+50     	; 0x12c8 <__vector_6+0xce>
	{
		Time3 = TI1_ICR1 ;
    1296:	e6 e4       	ldi	r30, 0x46	; 70
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	90 93 ad 01 	sts	0x01AD, r25
    12a2:	80 93 ac 01 	sts	0x01AC, r24
		PerodicTime=Time3 - Time1 ;
    12a6:	20 91 ac 01 	lds	r18, 0x01AC
    12aa:	30 91 ad 01 	lds	r19, 0x01AD
    12ae:	80 91 a8 01 	lds	r24, 0x01A8
    12b2:	90 91 a9 01 	lds	r25, 0x01A9
    12b6:	a9 01       	movw	r20, r18
    12b8:	48 1b       	sub	r20, r24
    12ba:	59 0b       	sbc	r21, r25
    12bc:	ca 01       	movw	r24, r20
    12be:	90 93 b1 01 	sts	0x01B1, r25
    12c2:	80 93 b0 01 	sts	0x01B0, r24
    12c6:	15 c0       	rjmp	.+42     	; 0x12f2 <__vector_6+0xf8>
	else
	{
		/*Disable Interrupt */
		/*Disable Timer*/

		Clear_Bit(TI1_TCCR1B,TI1_CS10);
    12c8:	ae e4       	ldi	r26, 0x4E	; 78
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	ee e4       	ldi	r30, 0x4E	; 78
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8e 7f       	andi	r24, 0xFE	; 254
    12d4:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS11);
    12d6:	ae e4       	ldi	r26, 0x4E	; 78
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ee e4       	ldi	r30, 0x4E	; 78
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8d 7f       	andi	r24, 0xFD	; 253
    12e2:	8c 93       	st	X, r24
		Clear_Bit(TI1_TCCR1B,TI1_CS12);
    12e4:	ae e4       	ldi	r26, 0x4E	; 78
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ee e4       	ldi	r30, 0x4E	; 78
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	8b 7f       	andi	r24, 0xFB	; 251
    12f0:	8c 93       	st	X, r24
	}

}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	ff 91       	pop	r31
    12f8:	ef 91       	pop	r30
    12fa:	bf 91       	pop	r27
    12fc:	af 91       	pop	r26
    12fe:	9f 91       	pop	r25
    1300:	8f 91       	pop	r24
    1302:	7f 91       	pop	r23
    1304:	6f 91       	pop	r22
    1306:	5f 91       	pop	r21
    1308:	4f 91       	pop	r20
    130a:	3f 91       	pop	r19
    130c:	2f 91       	pop	r18
    130e:	0f 90       	pop	r0
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	0f 90       	pop	r0
    1314:	1f 90       	pop	r1
    1316:	18 95       	reti

00001318 <TI0_VoidInitNormal>:


#include "../Header/TI0_Interface.h"

void TI0_VoidInitNormal (u8 Local_Preload , u8 Local_Prescaller)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <TI0_VoidInitNormal+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <TI0_VoidInitNormal+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02

	//  select the type (GWM01 -> 0 /GWM00 -> 0 ) Normal mode
	Clear_Bit(TI0_TCCR0,TI0_WGM00);
    1328:	a3 e5       	ldi	r26, 0x53	; 83
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e3 e5       	ldi	r30, 0x53	; 83
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7b       	andi	r24, 0xBF	; 191
    1334:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_WGM01);
    1336:	a3 e5       	ldi	r26, 0x53	; 83
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e3 e5       	ldi	r30, 0x53	; 83
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	87 7f       	andi	r24, 0xF7	; 247
    1342:	8c 93       	st	X, r24

	//  Set The Preload Value In the Register :
	TI0_TCNT0= Local_Preload;
    1344:	e2 e5       	ldi	r30, 0x52	; 82
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	80 83       	st	Z, r24

	//  Set the preScaller
	switch(Local_Prescaller)
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	3c 83       	std	Y+4, r19	; 0x04
    1354:	2b 83       	std	Y+3, r18	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	85 30       	cpi	r24, 0x05	; 5
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <TI0_VoidInitNormal+0x4a>
    1360:	58 c0       	rjmp	.+176    	; 0x1412 <TI0_VoidInitNormal+0xfa>
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	26 30       	cpi	r18, 0x06	; 6
    1368:	31 05       	cpc	r19, r1
    136a:	5c f4       	brge	.+22     	; 0x1382 <TI0_VoidInitNormal+0x6a>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	61 f0       	breq	.+24     	; 0x138e <TI0_VoidInitNormal+0x76>
    1376:	2b 81       	ldd	r18, Y+3	; 0x03
    1378:	3c 81       	ldd	r19, Y+4	; 0x04
    137a:	24 30       	cpi	r18, 0x04	; 4
    137c:	31 05       	cpc	r19, r1
    137e:	99 f1       	breq	.+102    	; 0x13e6 <TI0_VoidInitNormal+0xce>
    1380:	1c c0       	rjmp	.+56     	; 0x13ba <TI0_VoidInitNormal+0xa2>
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	89 30       	cpi	r24, 0x09	; 9
    1388:	91 05       	cpc	r25, r1
    138a:	bc f4       	brge	.+46     	; 0x13ba <TI0_VoidInitNormal+0xa2>
    138c:	57 c0       	rjmp	.+174    	; 0x143c <TI0_VoidInitNormal+0x124>
	{
	case TI0_NoPrescale:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    138e:	a3 e5       	ldi	r26, 0x53	; 83
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e3 e5       	ldi	r30, 0x53	; 83
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    139c:	a3 e5       	ldi	r26, 0x53	; 83
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e3 e5       	ldi	r30, 0x53	; 83
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8d 7f       	andi	r24, 0xFD	; 253
    13a8:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    13aa:	a3 e5       	ldi	r26, 0x53	; 83
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e3 e5       	ldi	r30, 0x53	; 83
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8b 7f       	andi	r24, 0xFB	; 251
    13b6:	8c 93       	st	X, r24
    13b8:	41 c0       	rjmp	.+130    	; 0x143c <TI0_VoidInitNormal+0x124>
		break;
	default:
	case TI0_Prescaler8:
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    13ba:	a3 e5       	ldi	r26, 0x53	; 83
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 e5       	ldi	r30, 0x53	; 83
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8e 7f       	andi	r24, 0xFE	; 254
    13c6:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    13c8:	a3 e5       	ldi	r26, 0x53	; 83
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e3 e5       	ldi	r30, 0x53	; 83
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	82 60       	ori	r24, 0x02	; 2
    13d4:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    13d6:	a3 e5       	ldi	r26, 0x53	; 83
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e3 e5       	ldi	r30, 0x53	; 83
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8b 7f       	andi	r24, 0xFB	; 251
    13e2:	8c 93       	st	X, r24
    13e4:	2b c0       	rjmp	.+86     	; 0x143c <TI0_VoidInitNormal+0x124>
		break;
	case TI0_Prescaler64:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    13e6:	a3 e5       	ldi	r26, 0x53	; 83
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e3 e5       	ldi	r30, 0x53	; 83
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	81 60       	ori	r24, 0x01	; 1
    13f2:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    13f4:	a3 e5       	ldi	r26, 0x53	; 83
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e3 e5       	ldi	r30, 0x53	; 83
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	82 60       	ori	r24, 0x02	; 2
    1400:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1402:	a3 e5       	ldi	r26, 0x53	; 83
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e3 e5       	ldi	r30, 0x53	; 83
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8b 7f       	andi	r24, 0xFB	; 251
    140e:	8c 93       	st	X, r24
    1410:	15 c0       	rjmp	.+42     	; 0x143c <TI0_VoidInitNormal+0x124>
		break;
	case TI0_Prescaler256:
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    1412:	a3 e5       	ldi	r26, 0x53	; 83
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e3 e5       	ldi	r30, 0x53	; 83
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8d 7f       	andi	r24, 0xFD	; 253
    141e:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    1420:	a3 e5       	ldi	r26, 0x53	; 83
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e3 e5       	ldi	r30, 0x53	; 83
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8e 7f       	andi	r24, 0xFE	; 254
    142c:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS02);
    142e:	a3 e5       	ldi	r26, 0x53	; 83
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e3 e5       	ldi	r30, 0x53	; 83
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	84 60       	ori	r24, 0x04	; 4
    143a:	8c 93       	st	X, r24
	case TI0_ExternalClkRising:
		break;

	}
	// Enable the Interrupt
	Set_Bit(TI0_TIMSK,TI0_TOIE0);
    143c:	a9 e5       	ldi	r26, 0x59	; 89
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e9 e5       	ldi	r30, 0x59	; 89
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	8c 93       	st	X, r24
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <TI0_VoidInitCTC>:


void TI0_VoidInitCTC (u8 Local_CompareValue, u8 Local_ActionState , u8 Local_Prescaller )
{
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	27 97       	sbiw	r28, 0x07	; 7
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
    1470:	4b 83       	std	Y+3, r20	; 0x03
	//
	// * select the type (GWM01 -> 1 /GWM00 -> 0 ) CTC mode
	Set_Bit(TI0_TCCR0,TI0_WGM01);
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 60       	ori	r24, 0x08	; 8
    147e:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_WGM00);
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	8f 7b       	andi	r24, 0xBF	; 191
    148c:	8c 93       	st	X, r24

	// * Set The Compare value Value In the Register :
	TI0_OCR0= Local_CompareValue;
    148e:	ec e5       	ldi	r30, 0x5C	; 92
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	80 83       	st	Z, r24

	// * Select for the action on the OC pin :
	switch(Local_ActionState)
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	3f 83       	std	Y+7, r19	; 0x07
    149e:	2e 83       	std	Y+6, r18	; 0x06
    14a0:	8e 81       	ldd	r24, Y+6	; 0x06
    14a2:	9f 81       	ldd	r25, Y+7	; 0x07
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	41 f1       	breq	.+80     	; 0x14fa <TI0_VoidInitCTC+0xa2>
    14aa:	2e 81       	ldd	r18, Y+6	; 0x06
    14ac:	3f 81       	ldd	r19, Y+7	; 0x07
    14ae:	24 30       	cpi	r18, 0x04	; 4
    14b0:	31 05       	cpc	r19, r1
    14b2:	91 f1       	breq	.+100    	; 0x1518 <TI0_VoidInitCTC+0xc0>
    14b4:	8e 81       	ldd	r24, Y+6	; 0x06
    14b6:	9f 81       	ldd	r25, Y+7	; 0x07
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	79 f0       	breq	.+30     	; 0x14dc <TI0_VoidInitCTC+0x84>
	{
	default:
	case TI0_OCdisconnect:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    14be:	a3 e5       	ldi	r26, 0x53	; 83
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e3 e5       	ldi	r30, 0x53	; 83
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 7e       	andi	r24, 0xEF	; 239
    14ca:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    14cc:	a3 e5       	ldi	r26, 0x53	; 83
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e3 e5       	ldi	r30, 0x53	; 83
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8f 7d       	andi	r24, 0xDF	; 223
    14d8:	8c 93       	st	X, r24
    14da:	2c c0       	rjmp	.+88     	; 0x1534 <TI0_VoidInitCTC+0xdc>
		break;
	case TI0_OCToggle:
		Clear_Bit(TI0_TCCR0,TI0_COM01);
    14dc:	a3 e5       	ldi	r26, 0x53	; 83
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e3 e5       	ldi	r30, 0x53	; 83
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	8f 7d       	andi	r24, 0xDF	; 223
    14e8:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM00);
    14ea:	a3 e5       	ldi	r26, 0x53	; 83
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e3 e5       	ldi	r30, 0x53	; 83
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	8c 93       	st	X, r24
    14f8:	1d c0       	rjmp	.+58     	; 0x1534 <TI0_VoidInitCTC+0xdc>
		break;
	case TI0_OCclear:
		Clear_Bit(TI0_TCCR0,TI0_COM00);
    14fa:	a3 e5       	ldi	r26, 0x53	; 83
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e3 e5       	ldi	r30, 0x53	; 83
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8f 7e       	andi	r24, 0xEF	; 239
    1506:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    1508:	a3 e5       	ldi	r26, 0x53	; 83
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e3 e5       	ldi	r30, 0x53	; 83
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	80 62       	ori	r24, 0x20	; 32
    1514:	8c 93       	st	X, r24
    1516:	0e c0       	rjmp	.+28     	; 0x1534 <TI0_VoidInitCTC+0xdc>
		break;
	case TI0_OCset:
		Set_Bit(TI0_TCCR0,TI0_COM00);
    1518:	a3 e5       	ldi	r26, 0x53	; 83
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e3 e5       	ldi	r30, 0x53	; 83
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	80 61       	ori	r24, 0x10	; 16
    1524:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_COM01);
    1526:	a3 e5       	ldi	r26, 0x53	; 83
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e3 e5       	ldi	r30, 0x53	; 83
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 62       	ori	r24, 0x20	; 32
    1532:	8c 93       	st	X, r24
		break;
	}

	// * Set the preScaller
	switch (Local_Prescaller)
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3d 83       	std	Y+5, r19	; 0x05
    153c:	2c 83       	std	Y+4, r18	; 0x04
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	9d 81       	ldd	r25, Y+5	; 0x05
    1542:	85 30       	cpi	r24, 0x05	; 5
    1544:	91 05       	cpc	r25, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <TI0_VoidInitCTC+0xf2>
    1548:	58 c0       	rjmp	.+176    	; 0x15fa <TI0_VoidInitCTC+0x1a2>
    154a:	2c 81       	ldd	r18, Y+4	; 0x04
    154c:	3d 81       	ldd	r19, Y+5	; 0x05
    154e:	26 30       	cpi	r18, 0x06	; 6
    1550:	31 05       	cpc	r19, r1
    1552:	5c f4       	brge	.+22     	; 0x156a <TI0_VoidInitCTC+0x112>
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	91 05       	cpc	r25, r1
    155c:	61 f0       	breq	.+24     	; 0x1576 <TI0_VoidInitCTC+0x11e>
    155e:	2c 81       	ldd	r18, Y+4	; 0x04
    1560:	3d 81       	ldd	r19, Y+5	; 0x05
    1562:	24 30       	cpi	r18, 0x04	; 4
    1564:	31 05       	cpc	r19, r1
    1566:	99 f1       	breq	.+102    	; 0x15ce <TI0_VoidInitCTC+0x176>
    1568:	1c c0       	rjmp	.+56     	; 0x15a2 <TI0_VoidInitCTC+0x14a>
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	89 30       	cpi	r24, 0x09	; 9
    1570:	91 05       	cpc	r25, r1
    1572:	bc f4       	brge	.+46     	; 0x15a2 <TI0_VoidInitCTC+0x14a>
    1574:	57 c0       	rjmp	.+174    	; 0x1624 <TI0_VoidInitCTC+0x1cc>
	{
	case TI0_NoPrescale:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    1576:	a3 e5       	ldi	r26, 0x53	; 83
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e3 e5       	ldi	r30, 0x53	; 83
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    1584:	a3 e5       	ldi	r26, 0x53	; 83
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e3 e5       	ldi	r30, 0x53	; 83
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8d 7f       	andi	r24, 0xFD	; 253
    1590:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    1592:	a3 e5       	ldi	r26, 0x53	; 83
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e3 e5       	ldi	r30, 0x53	; 83
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8b 7f       	andi	r24, 0xFB	; 251
    159e:	8c 93       	st	X, r24
    15a0:	41 c0       	rjmp	.+130    	; 0x1624 <TI0_VoidInitCTC+0x1cc>
		break;
	default:
	case TI0_Prescaler8:
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    15a2:	a3 e5       	ldi	r26, 0x53	; 83
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e3 e5       	ldi	r30, 0x53	; 83
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8e 7f       	andi	r24, 0xFE	; 254
    15ae:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    15b0:	a3 e5       	ldi	r26, 0x53	; 83
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e3 e5       	ldi	r30, 0x53	; 83
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	82 60       	ori	r24, 0x02	; 2
    15bc:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    15be:	a3 e5       	ldi	r26, 0x53	; 83
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e3 e5       	ldi	r30, 0x53	; 83
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8b 7f       	andi	r24, 0xFB	; 251
    15ca:	8c 93       	st	X, r24
    15cc:	2b c0       	rjmp	.+86     	; 0x1624 <TI0_VoidInitCTC+0x1cc>
		break;
	case TI0_Prescaler64:
		Set_Bit(TI0_TCCR0,TI0_CS00);
    15ce:	a3 e5       	ldi	r26, 0x53	; 83
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e3 e5       	ldi	r30, 0x53	; 83
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS01);
    15dc:	a3 e5       	ldi	r26, 0x53	; 83
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e3 e5       	ldi	r30, 0x53	; 83
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	82 60       	ori	r24, 0x02	; 2
    15e8:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS02);
    15ea:	a3 e5       	ldi	r26, 0x53	; 83
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e3 e5       	ldi	r30, 0x53	; 83
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8b 7f       	andi	r24, 0xFB	; 251
    15f6:	8c 93       	st	X, r24
    15f8:	15 c0       	rjmp	.+42     	; 0x1624 <TI0_VoidInitCTC+0x1cc>
		break;
	case TI0_Prescaler256:
		Clear_Bit(TI0_TCCR0,TI0_CS01);
    15fa:	a3 e5       	ldi	r26, 0x53	; 83
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e3 e5       	ldi	r30, 0x53	; 83
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	8d 7f       	andi	r24, 0xFD	; 253
    1606:	8c 93       	st	X, r24
		Clear_Bit(TI0_TCCR0,TI0_CS00);
    1608:	a3 e5       	ldi	r26, 0x53	; 83
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e3 e5       	ldi	r30, 0x53	; 83
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8e 7f       	andi	r24, 0xFE	; 254
    1614:	8c 93       	st	X, r24
		Set_Bit(TI0_TCCR0,TI0_CS02);
    1616:	a3 e5       	ldi	r26, 0x53	; 83
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e3 e5       	ldi	r30, 0x53	; 83
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	84 60       	ori	r24, 0x04	; 4
    1622:	8c 93       	st	X, r24
	case TI0_ExternalClkRising:
		break;
	}

	// * Enable the Interrupt
	Set_Bit(TI0_TIMSK,TI0_OCIE0);
    1624:	a9 e5       	ldi	r26, 0x59	; 89
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e9 e5       	ldi	r30, 0x59	; 89
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	82 60       	ori	r24, 0x02	; 2
    1630:	8c 93       	st	X, r24
}
    1632:	27 96       	adiw	r28, 0x07	; 7
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <TI0_VoidSetPreload>:



void TI0_VoidSetPreload(u8 Local_Preload)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	0f 92       	push	r0
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	89 83       	std	Y+1, r24	; 0x01
	TI0_TCCR0 = Local_Preload;
    1650:	e3 e5       	ldi	r30, 0x53	; 83
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	80 83       	st	Z, r24
}
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <PWM_VoidInit>:



void PWM_VoidInit(u8 Dutycycle)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(TI0_TCCR0, TI0_WGM00);
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e3 e5       	ldi	r30, 0x53	; 83
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 64       	ori	r24, 0x40	; 64
    1678:	8c 93       	st	X, r24
	Set_Bit(TI0_TCCR0, TI0_WGM01);
    167a:	a3 e5       	ldi	r26, 0x53	; 83
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e3 e5       	ldi	r30, 0x53	; 83
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 60       	ori	r24, 0x08	; 8
    1686:	8c 93       	st	X, r24

	Clear_Bit(TI0_TCCR0, TI0_COM00);
    1688:	a3 e5       	ldi	r26, 0x53	; 83
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e3 e5       	ldi	r30, 0x53	; 83
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8f 7e       	andi	r24, 0xEF	; 239
    1694:	8c 93       	st	X, r24
	Set_Bit(TI0_TCCR0, TI0_COM01);
    1696:	a3 e5       	ldi	r26, 0x53	; 83
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e3 e5       	ldi	r30, 0x53	; 83
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	80 62       	ori	r24, 0x20	; 32
    16a2:	8c 93       	st	X, r24

	Clear_Bit(TI0_TCCR0,TI0_CS00);
    16a4:	a3 e5       	ldi	r26, 0x53	; 83
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e3 e5       	ldi	r30, 0x53	; 83
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8e 7f       	andi	r24, 0xFE	; 254
    16b0:	8c 93       	st	X, r24
	Set_Bit(TI0_TCCR0,TI0_CS01);
    16b2:	a3 e5       	ldi	r26, 0x53	; 83
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e3 e5       	ldi	r30, 0x53	; 83
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	82 60       	ori	r24, 0x02	; 2
    16be:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_CS02);
    16c0:	a3 e5       	ldi	r26, 0x53	; 83
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e3 e5       	ldi	r30, 0x53	; 83
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8b 7f       	andi	r24, 0xFB	; 251
    16cc:	8c 93       	st	X, r24

	DIO_u8SetPinDir(DIO_GroupB, DIO_PIN3, Output);
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>

	PWM_VoidDutycycle(Dutycycle);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <PWM_VoidDutycycle>

}
    16de:	0f 90       	pop	r0
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <PWM_VoidDutycycle>:

void PWM_VoidDutycycle(u8 Dutycycle)
{
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	0f 92       	push	r0
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01

	TI0_OCR0 = ((float) Dutycycle/100)*256;
    16f6:	0c e5       	ldi	r16, 0x5C	; 92
    16f8:	10 e0       	ldi	r17, 0x00	; 0
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	48 ec       	ldi	r20, 0xC8	; 200
    171a:	52 e4       	ldi	r21, 0x42	; 66
    171c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	53 e4       	ldi	r21, 0x43	; 67
    1730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	f8 01       	movw	r30, r16
    1746:	80 83       	st	Z, r24
}
    1748:	0f 90       	pop	r0
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	1f 91       	pop	r17
    1750:	0f 91       	pop	r16
    1752:	08 95       	ret

00001754 <PWM_VoidStop>:

void PWM_VoidStop()
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(TI0_TCCR0,TI0_CS00);
    175c:	a3 e5       	ldi	r26, 0x53	; 83
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e3 e5       	ldi	r30, 0x53	; 83
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8e 7f       	andi	r24, 0xFE	; 254
    1768:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_CS01);
    176a:	a3 e5       	ldi	r26, 0x53	; 83
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e3 e5       	ldi	r30, 0x53	; 83
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8d 7f       	andi	r24, 0xFD	; 253
    1776:	8c 93       	st	X, r24
	Clear_Bit(TI0_TCCR0,TI0_CS02);
    1778:	a3 e5       	ldi	r26, 0x53	; 83
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e3 e5       	ldi	r30, 0x53	; 83
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8b 7f       	andi	r24, 0xFB	; 251
    1784:	8c 93       	st	X, r24
}
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <SPI_VoidInitMaster>:
#include "../../../Common/STD_types.h"
#include "../Header/SPI_Interface.h"


void SPI_VoidInitMaster(u8 Local_Prescaller)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <SPI_VoidInitMaster+0x6>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
	Clear_Bit(SPI_SPCR, SPI_SPIE);
    179a:	ad e2       	ldi	r26, 0x2D	; 45
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ed e2       	ldi	r30, 0x2D	; 45
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	8f 77       	andi	r24, 0x7F	; 127
    17a6:	8c 93       	st	X, r24

#if SPI_DataOrder == SPI_MSP
	Clear_Bit(SPI_SPCR,SPI_DORD);
    17a8:	ad e2       	ldi	r26, 0x2D	; 45
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ed e2       	ldi	r30, 0x2D	; 45
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7d       	andi	r24, 0xDF	; 223
    17b4:	8c 93       	st	X, r24

#elif SPI_DataOrder == SPI_LSB
	Set_Bit(SPCR,SPCR_DORD);
#endif

	Set_Bit(SPI_SPCR, SPI_MSTR);
    17b6:	ad e2       	ldi	r26, 0x2D	; 45
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ed e2       	ldi	r30, 0x2D	; 45
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	80 61       	ori	r24, 0x10	; 16
    17c2:	8c 93       	st	X, r24

#if SPI_CLKPol == SPI_HighLevel
	Clear_Bit(SPI_SPCR,SPI_CPOL);
    17c4:	ad e2       	ldi	r26, 0x2D	; 45
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ed e2       	ldi	r30, 0x2D	; 45
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	87 7f       	andi	r24, 0xF7	; 247
    17d0:	8c 93       	st	X, r24
	Set_Bit(SPCR,SPCR_CPOL);

#endif

#if SPI_CLKPhase == SPI_RxFirst
	Clear_Bit(SPI_SPCR,SPI_CPHA);
    17d2:	ad e2       	ldi	r26, 0x2D	; 45
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	ed e2       	ldi	r30, 0x2D	; 45
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8b 7f       	andi	r24, 0xFB	; 251
    17de:	8c 93       	st	X, r24

#endif



	switch (Local_Prescaller)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3b 83       	std	Y+3, r19	; 0x03
    17e8:	2a 83       	std	Y+2, r18	; 0x02
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	85 30       	cpi	r24, 0x05	; 5
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <SPI_VoidInitMaster+0x6a>
    17f4:	81 c0       	rjmp	.+258    	; 0x18f8 <SPI_VoidInitMaster+0x16c>
    17f6:	2a 81       	ldd	r18, Y+2	; 0x02
    17f8:	3b 81       	ldd	r19, Y+3	; 0x03
    17fa:	26 30       	cpi	r18, 0x06	; 6
    17fc:	31 05       	cpc	r19, r1
    17fe:	8c f4       	brge	.+34     	; 0x1822 <SPI_VoidInitMaster+0x96>
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	82 30       	cpi	r24, 0x02	; 2
    1806:	91 05       	cpc	r25, r1
    1808:	a9 f1       	breq	.+106    	; 0x1874 <SPI_VoidInitMaster+0xe8>
    180a:	2a 81       	ldd	r18, Y+2	; 0x02
    180c:	3b 81       	ldd	r19, Y+3	; 0x03
    180e:	24 30       	cpi	r18, 0x04	; 4
    1810:	31 05       	cpc	r19, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <SPI_VoidInitMaster+0x8a>
    1814:	5b c0       	rjmp	.+182    	; 0x18cc <SPI_VoidInitMaster+0x140>
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	91 05       	cpc	r25, r1
    181e:	a1 f0       	breq	.+40     	; 0x1848 <SPI_VoidInitMaster+0xbc>
    1820:	3f c0       	rjmp	.+126    	; 0x18a0 <SPI_VoidInitMaster+0x114>
    1822:	2a 81       	ldd	r18, Y+2	; 0x02
    1824:	3b 81       	ldd	r19, Y+3	; 0x03
    1826:	27 30       	cpi	r18, 0x07	; 7
    1828:	31 05       	cpc	r19, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <SPI_VoidInitMaster+0xa2>
    182c:	a7 c0       	rjmp	.+334    	; 0x197c <SPI_VoidInitMaster+0x1f0>
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	87 30       	cpi	r24, 0x07	; 7
    1834:	91 05       	cpc	r25, r1
    1836:	0c f4       	brge	.+2      	; 0x183a <SPI_VoidInitMaster+0xae>
    1838:	75 c0       	rjmp	.+234    	; 0x1924 <SPI_VoidInitMaster+0x198>
    183a:	2a 81       	ldd	r18, Y+2	; 0x02
    183c:	3b 81       	ldd	r19, Y+3	; 0x03
    183e:	28 30       	cpi	r18, 0x08	; 8
    1840:	31 05       	cpc	r19, r1
    1842:	09 f4       	brne	.+2      	; 0x1846 <SPI_VoidInitMaster+0xba>
    1844:	85 c0       	rjmp	.+266    	; 0x1950 <SPI_VoidInitMaster+0x1c4>
    1846:	2c c0       	rjmp	.+88     	; 0x18a0 <SPI_VoidInitMaster+0x114>
	{
	case SPI_Prescaler2:
		Clear_Bit(SPI_SPCR,SPI_SPR0);
    1848:	ad e2       	ldi	r26, 0x2D	; 45
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ed e2       	ldi	r30, 0x2D	; 45
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8e 7f       	andi	r24, 0xFE	; 254
    1854:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPR1);
    1856:	ad e2       	ldi	r26, 0x2D	; 45
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ed e2       	ldi	r30, 0x2D	; 45
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8d 7f       	andi	r24, 0xFD	; 253
    1862:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPI2X);
    1864:	ad e2       	ldi	r26, 0x2D	; 45
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ed e2       	ldi	r30, 0x2D	; 45
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	8c 93       	st	X, r24
    1872:	99 c0       	rjmp	.+306    	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler4:
		Clear_Bit(SPI_SPCR,SPI_SPR0);
    1874:	ad e2       	ldi	r26, 0x2D	; 45
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ed e2       	ldi	r30, 0x2D	; 45
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	8e 7f       	andi	r24, 0xFE	; 254
    1880:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPR1);
    1882:	ad e2       	ldi	r26, 0x2D	; 45
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ed e2       	ldi	r30, 0x2D	; 45
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8d 7f       	andi	r24, 0xFD	; 253
    188e:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPI2X);
    1890:	ad e2       	ldi	r26, 0x2D	; 45
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ed e2       	ldi	r30, 0x2D	; 45
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8e 7f       	andi	r24, 0xFE	; 254
    189c:	8c 93       	st	X, r24
    189e:	83 c0       	rjmp	.+262    	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	default:
	case SPI_Prescaler8:
		Set_Bit(SPI_SPCR,SPI_SPR0);
    18a0:	ad e2       	ldi	r26, 0x2D	; 45
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	ed e2       	ldi	r30, 0x2D	; 45
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPR1);
    18ae:	ad e2       	ldi	r26, 0x2D	; 45
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ed e2       	ldi	r30, 0x2D	; 45
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8d 7f       	andi	r24, 0xFD	; 253
    18ba:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPI2X);
    18bc:	ad e2       	ldi	r26, 0x2D	; 45
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ed e2       	ldi	r30, 0x2D	; 45
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	8c 93       	st	X, r24
    18ca:	6d c0       	rjmp	.+218    	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler16:
		Set_Bit(SPI_SPCR,SPI_SPR0);
    18cc:	ad e2       	ldi	r26, 0x2D	; 45
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ed e2       	ldi	r30, 0x2D	; 45
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	81 60       	ori	r24, 0x01	; 1
    18d8:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPR1);
    18da:	ad e2       	ldi	r26, 0x2D	; 45
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ed e2       	ldi	r30, 0x2D	; 45
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8d 7f       	andi	r24, 0xFD	; 253
    18e6:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPI2X);
    18e8:	ad e2       	ldi	r26, 0x2D	; 45
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ed e2       	ldi	r30, 0x2D	; 45
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	8e 7f       	andi	r24, 0xFE	; 254
    18f4:	8c 93       	st	X, r24
    18f6:	57 c0       	rjmp	.+174    	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler32:
		Clear_Bit(SPI_SPCR,SPI_SPR0);
    18f8:	ad e2       	ldi	r26, 0x2D	; 45
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ed e2       	ldi	r30, 0x2D	; 45
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8e 7f       	andi	r24, 0xFE	; 254
    1904:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPR1);
    1906:	ad e2       	ldi	r26, 0x2D	; 45
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	ed e2       	ldi	r30, 0x2D	; 45
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	82 60       	ori	r24, 0x02	; 2
    1912:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPI2X);
    1914:	ad e2       	ldi	r26, 0x2D	; 45
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ed e2       	ldi	r30, 0x2D	; 45
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	81 60       	ori	r24, 0x01	; 1
    1920:	8c 93       	st	X, r24
    1922:	41 c0       	rjmp	.+130    	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler64:
		Clear_Bit(SPI_SPCR,SPI_SPR0);
    1924:	ad e2       	ldi	r26, 0x2D	; 45
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ed e2       	ldi	r30, 0x2D	; 45
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8e 7f       	andi	r24, 0xFE	; 254
    1930:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPR1);
    1932:	ad e2       	ldi	r26, 0x2D	; 45
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ed e2       	ldi	r30, 0x2D	; 45
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	82 60       	ori	r24, 0x02	; 2
    193e:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPI2X);
    1940:	ad e2       	ldi	r26, 0x2D	; 45
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ed e2       	ldi	r30, 0x2D	; 45
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8e 7f       	andi	r24, 0xFE	; 254
    194c:	8c 93       	st	X, r24
    194e:	2b c0       	rjmp	.+86     	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler128:
		Set_Bit(SPI_SPCR,SPI_SPR0);
    1950:	ad e2       	ldi	r26, 0x2D	; 45
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	ed e2       	ldi	r30, 0x2D	; 45
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPR1);
    195e:	ad e2       	ldi	r26, 0x2D	; 45
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	ed e2       	ldi	r30, 0x2D	; 45
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	82 60       	ori	r24, 0x02	; 2
    196a:	8c 93       	st	X, r24
		Clear_Bit(SPI_SPCR,SPI_SPI2X);
    196c:	ad e2       	ldi	r26, 0x2D	; 45
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ed e2       	ldi	r30, 0x2D	; 45
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8e 7f       	andi	r24, 0xFE	; 254
    1978:	8c 93       	st	X, r24
    197a:	15 c0       	rjmp	.+42     	; 0x19a6 <SPI_VoidInitMaster+0x21a>
		break;
	case SPI_Prescaler64DS:
		Set_Bit(SPI_SPCR,SPI_SPR0);
    197c:	ad e2       	ldi	r26, 0x2D	; 45
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ed e2       	ldi	r30, 0x2D	; 45
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPR1);
    198a:	ad e2       	ldi	r26, 0x2D	; 45
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ed e2       	ldi	r30, 0x2D	; 45
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	8c 93       	st	X, r24
		Set_Bit(SPI_SPCR,SPI_SPI2X);
    1998:	ad e2       	ldi	r26, 0x2D	; 45
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ed e2       	ldi	r30, 0x2D	; 45
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	81 60       	ori	r24, 0x01	; 1
    19a4:	8c 93       	st	X, r24
		break;
	}

	Set_Bit(SPI_SPCR, SPI_SPE);
    19a6:	ad e2       	ldi	r26, 0x2D	; 45
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	ed e2       	ldi	r30, 0x2D	; 45
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 64       	ori	r24, 0x40	; 64
    19b2:	8c 93       	st	X, r24
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	cf 91       	pop	r28
    19bc:	df 91       	pop	r29
    19be:	08 95       	ret

000019c0 <SPI_VoidInitSlave>:


void SPI_VoidInitSlave()
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SPI_SPCR,SPI_SPIE);
    19c8:	ad e2       	ldi	r26, 0x2D	; 45
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ed e2       	ldi	r30, 0x2D	; 45
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	8f 77       	andi	r24, 0x7F	; 127
    19d4:	8c 93       	st	X, r24
#elif SPI_DataOrder == SPI_MSB
	Clear_Bit(SPI_SPCR,SPI_DORD);

#endif

	Clear_Bit(SPI_SPCR,SPI_MSTR);
    19d6:	ad e2       	ldi	r26, 0x2D	; 45
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	ed e2       	ldi	r30, 0x2D	; 45
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8f 7e       	andi	r24, 0xEF	; 239
    19e2:	8c 93       	st	X, r24

#if SPI_CLKPol == SPI_HighLevel
	Clear_Bit(SPI_SPCR,SPI_CPOL);
    19e4:	ad e2       	ldi	r26, 0x2D	; 45
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	ed e2       	ldi	r30, 0x2D	; 45
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	87 7f       	andi	r24, 0xF7	; 247
    19f0:	8c 93       	st	X, r24
	Clear_Bit(SPI_SPCR,SPI_CPOL);

#endif

#if SPI_CLKPhase == SPI_RxFirst
	Clear_Bit(SPI_SPCR,SPI_CPHA);
    19f2:	ad e2       	ldi	r26, 0x2D	; 45
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	ed e2       	ldi	r30, 0x2D	; 45
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	8b 7f       	andi	r24, 0xFB	; 251
    19fe:	8c 93       	st	X, r24
#elif SPI_CLKPhase == SPI_TxFirst
	Clear_Bit(SPI_SPCR,SPI_CPHA);

#endif

	Set_Bit(SPI_SPCR,SPI_SPE);
    1a00:	ad e2       	ldi	r26, 0x2D	; 45
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	ed e2       	ldi	r30, 0x2D	; 45
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 64       	ori	r24, 0x40	; 64
    1a0c:	8c 93       	st	X, r24
}
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <SPI_u8MasterTransiver>:


u8 SPI_u8MasterTransiver(u8 Local_Data)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPI_SPDR = Local_Data;
    1a20:	ef e2       	ldi	r30, 0x2F	; 47
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	80 83       	st	Z, r24

	/* Wait for transmission to complete */
	while(!Get_Bit(SPI_SPSR,SPI_SPIF));
    1a28:	ee e2       	ldi	r30, 0x2E	; 46
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 23       	and	r24, r24
    1a30:	dc f7       	brge	.-10     	; 0x1a28 <SPI_u8MasterTransiver+0x14>

	return SPI_SPDR;
    1a32:	ef e2       	ldi	r30, 0x2F	; 47
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
}
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <SPI_VoidSlaveSend>:

void SPI_VoidSlaveSend(u8 Local_Data)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	0f 92       	push	r0
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	89 83       	std	Y+1, r24	; 0x01
	SPI_SPDR = Local_Data;
    1a4c:	ef e2       	ldi	r30, 0x2F	; 47
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	80 83       	st	Z, r24
}
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <SPI_u8SlaveReceive>:


u8 SPI_u8SlaveReceive()
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	/* Wait for transmission complete */

	while(!Get_Bit(SPI_SPSR,SPI_SPIF));
    1a64:	ee e2       	ldi	r30, 0x2E	; 46
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 23       	and	r24, r24
    1a6c:	dc f7       	brge	.-10     	; 0x1a64 <SPI_u8SlaveReceive+0x8>

	return SPI_SPDR;
    1a6e:	ef e2       	ldi	r30, 0x2F	; 47
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <GIE_VoidEn>:
#include "../../../common/Bit_Math.h"
#include "../../../common/Macro.h"
#include "../Header/GIE_All.h"

void GIE_VoidEn()
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GIE_SREG, GIE_I);
    1a82:	af e5       	ldi	r26, 0x5F	; 95
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	ef e5       	ldi	r30, 0x5F	; 95
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 68       	ori	r24, 0x80	; 128
    1a8e:	8c 93       	st	X, r24
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	08 95       	ret

00001a96 <GIE_VoidDis>:

void GIE_VoidDis()
{
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GIE_SREG, GIE_I);
    1a9e:	af e5       	ldi	r26, 0x5F	; 95
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	ef e5       	ldi	r30, 0x5F	; 95
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 77       	andi	r24, 0x7F	; 127
    1aaa:	8c 93       	st	X, r24
}
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <EXTI_VoidInit0>:
#include "../Header/EXTI_private.h"
#include "../../GIE/Header/GIE_All.h"


void EXTI_VoidInit0 (u8 Local_Sens)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <EXTI_VoidInit0+0x6>
    1ab8:	0f 92       	push	r0
    1aba:	cd b7       	in	r28, 0x3d	; 61
    1abc:	de b7       	in	r29, 0x3e	; 62
    1abe:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP1, EXTI_PinINT0, Input);
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	switch (Local_Sens)
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	3b 83       	std	Y+3, r19	; 0x03
    1ad2:	2a 83       	std	Y+2, r18	; 0x02
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad8:	82 30       	cpi	r24, 0x02	; 2
    1ada:	91 05       	cpc	r25, r1
    1adc:	29 f1       	breq	.+74     	; 0x1b28 <EXTI_VoidInit0+0x76>
    1ade:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae0:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae2:	23 30       	cpi	r18, 0x03	; 3
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	34 f4       	brge	.+12     	; 0x1af4 <EXTI_VoidInit0+0x42>
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	61 f0       	breq	.+24     	; 0x1b0a <EXTI_VoidInit0+0x58>
    1af2:	46 c0       	rjmp	.+140    	; 0x1b80 <EXTI_VoidInit0+0xce>
    1af4:	2a 81       	ldd	r18, Y+2	; 0x02
    1af6:	3b 81       	ldd	r19, Y+3	; 0x03
    1af8:	23 30       	cpi	r18, 0x03	; 3
    1afa:	31 05       	cpc	r19, r1
    1afc:	21 f1       	breq	.+72     	; 0x1b46 <EXTI_VoidInit0+0x94>
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	9b 81       	ldd	r25, Y+3	; 0x03
    1b02:	84 30       	cpi	r24, 0x04	; 4
    1b04:	91 05       	cpc	r25, r1
    1b06:	71 f1       	breq	.+92     	; 0x1b64 <EXTI_VoidInit0+0xb2>
    1b08:	3b c0       	rjmp	.+118    	; 0x1b80 <EXTI_VoidInit0+0xce>
	{
	case EXTI_LowLevel:
		Clear_Bit(EXTI_MCUCR, EXTI_ISC00);
    1b0a:	a5 e5       	ldi	r26, 0x55	; 85
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 e5       	ldi	r30, 0x55	; 85
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8e 7f       	andi	r24, 0xFE	; 254
    1b16:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR, EXTI_ISC01);
    1b18:	a5 e5       	ldi	r26, 0x55	; 85
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	e5 e5       	ldi	r30, 0x55	; 85
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	8d 7f       	andi	r24, 0xFD	; 253
    1b24:	8c 93       	st	X, r24
    1b26:	2c c0       	rjmp	.+88     	; 0x1b80 <EXTI_VoidInit0+0xce>
		break;
	case EXTI_AnyChange:
		Set_Bit(EXTI_MCUCR, EXTI_ISC00);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	8c 93       	st	X, r24
		clear_Bit(EXTI_MCUCR, EXTI_ISC01);
    1b36:	a5 e5       	ldi	r26, 0x55	; 85
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8d 7f       	andi	r24, 0xFD	; 253
    1b42:	8c 93       	st	X, r24
    1b44:	1d c0       	rjmp	.+58     	; 0x1b80 <EXTI_VoidInit0+0xce>
		break;

	case EXTI_Falling:
		clear_Bit(EXTI_MCUCR, EXTI_ISC00);
    1b46:	a5 e5       	ldi	r26, 0x55	; 85
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e5 e5       	ldi	r30, 0x55	; 85
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR, EXTI_ISC01);
    1b54:	a5 e5       	ldi	r26, 0x55	; 85
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e5 e5       	ldi	r30, 0x55	; 85
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	82 60       	ori	r24, 0x02	; 2
    1b60:	8c 93       	st	X, r24
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <EXTI_VoidInit0+0xce>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCR, EXTI_ISC00);
    1b64:	a5 e5       	ldi	r26, 0x55	; 85
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e5 e5       	ldi	r30, 0x55	; 85
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR, EXTI_ISC01);
    1b72:	a5 e5       	ldi	r26, 0x55	; 85
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e5 e5       	ldi	r30, 0x55	; 85
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	8c 93       	st	X, r24
		break;
	}

	GIE_VoidEn();
    1b80:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GIE_VoidEn>
	Set_Bit(EXTI_GICR, EXTI_INT0);
    1b84:	ab e5       	ldi	r26, 0x5B	; 91
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	eb e5       	ldi	r30, 0x5B	; 91
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 64       	ori	r24, 0x40	; 64
    1b90:	8c 93       	st	X, r24
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <EXTI_VoidInit1>:




void EXTI_VoidInit1 (u8 Local_Sens)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <EXTI_VoidInit1+0x6>
    1ba4:	0f 92       	push	r0
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP1, EXTI_PinINT1, Input);
    1bac:	84 e0       	ldi	r24, 0x04	; 4
    1bae:	63 e0       	ldi	r22, 0x03	; 3
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	switch (Local_Sens)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3b 83       	std	Y+3, r19	; 0x03
    1bbe:	2a 83       	std	Y+2, r18	; 0x02
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	29 f1       	breq	.+74     	; 0x1c14 <EXTI_VoidInit1+0x76>
    1bca:	2a 81       	ldd	r18, Y+2	; 0x02
    1bcc:	3b 81       	ldd	r19, Y+3	; 0x03
    1bce:	23 30       	cpi	r18, 0x03	; 3
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	34 f4       	brge	.+12     	; 0x1be0 <EXTI_VoidInit1+0x42>
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	91 05       	cpc	r25, r1
    1bdc:	61 f0       	breq	.+24     	; 0x1bf6 <EXTI_VoidInit1+0x58>
    1bde:	46 c0       	rjmp	.+140    	; 0x1c6c <EXTI_VoidInit1+0xce>
    1be0:	2a 81       	ldd	r18, Y+2	; 0x02
    1be2:	3b 81       	ldd	r19, Y+3	; 0x03
    1be4:	23 30       	cpi	r18, 0x03	; 3
    1be6:	31 05       	cpc	r19, r1
    1be8:	21 f1       	breq	.+72     	; 0x1c32 <EXTI_VoidInit1+0x94>
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	9b 81       	ldd	r25, Y+3	; 0x03
    1bee:	84 30       	cpi	r24, 0x04	; 4
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	71 f1       	breq	.+92     	; 0x1c50 <EXTI_VoidInit1+0xb2>
    1bf4:	3b c0       	rjmp	.+118    	; 0x1c6c <EXTI_VoidInit1+0xce>
	{
	case EXTI_LowLevel:
		Clear_Bit(EXTI_MCUCR, EXTI_ISC10);
    1bf6:	a5 e5       	ldi	r26, 0x55	; 85
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e5 e5       	ldi	r30, 0x55	; 85
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8b 7f       	andi	r24, 0xFB	; 251
    1c02:	8c 93       	st	X, r24
		Clear_Bit(EXTI_MCUCR, EXTI_ISC11);
    1c04:	a5 e5       	ldi	r26, 0x55	; 85
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e5       	ldi	r30, 0x55	; 85
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	87 7f       	andi	r24, 0xF7	; 247
    1c10:	8c 93       	st	X, r24
    1c12:	2c c0       	rjmp	.+88     	; 0x1c6c <EXTI_VoidInit1+0xce>
		break;

	case EXTI_AnyChange:
		Set_Bit(EXTI_MCUCR, EXTI_ISC10);
    1c14:	a5 e5       	ldi	r26, 0x55	; 85
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e5       	ldi	r30, 0x55	; 85
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	84 60       	ori	r24, 0x04	; 4
    1c20:	8c 93       	st	X, r24
		clear_Bit(EXTI_MCUCR, EXTI_ISC11);
    1c22:	a5 e5       	ldi	r26, 0x55	; 85
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e5       	ldi	r30, 0x55	; 85
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	87 7f       	andi	r24, 0xF7	; 247
    1c2e:	8c 93       	st	X, r24
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <EXTI_VoidInit1+0xce>
		break;

	case EXTI_Falling:
		clear_Bit(EXTI_MCUCR, EXTI_ISC10);
    1c32:	a5 e5       	ldi	r26, 0x55	; 85
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	e5 e5       	ldi	r30, 0x55	; 85
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	8b 7f       	andi	r24, 0xFB	; 251
    1c3e:	8c 93       	st	X, r24
		set_Bit(EXTI_MCUCR, EXTI_ISC11);
    1c40:	a5 e5       	ldi	r26, 0x55	; 85
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e5       	ldi	r30, 0x55	; 85
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	8c 93       	st	X, r24
    1c4e:	0e c0       	rjmp	.+28     	; 0x1c6c <EXTI_VoidInit1+0xce>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCR, EXTI_ISC10);
    1c50:	a5 e5       	ldi	r26, 0x55	; 85
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e5 e5       	ldi	r30, 0x55	; 85
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	84 60       	ori	r24, 0x04	; 4
    1c5c:	8c 93       	st	X, r24
		Set_Bit(EXTI_MCUCR, EXTI_ISC11);
    1c5e:	a5 e5       	ldi	r26, 0x55	; 85
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e5 e5       	ldi	r30, 0x55	; 85
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	88 60       	ori	r24, 0x08	; 8
    1c6a:	8c 93       	st	X, r24
		break;
	}

	GIE_VoidEn();
    1c6c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GIE_VoidEn>
	Set_Bit(EXTI_GICR, EXTI_INT1);
    1c70:	ab e5       	ldi	r26, 0x5B	; 91
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	eb e5       	ldi	r30, 0x5B	; 91
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 68       	ori	r24, 0x80	; 128
    1c7c:	8c 93       	st	X, r24
}
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <EXTI_VoidInit2>:




void EXTI_VoidInit2 (u8 Local_Sens)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <EXTI_VoidInit2+0x6>
    1c90:	0f 92       	push	r0
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinDir(EXTI_GROUP2, EXTI_PinINT2, Input);
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	switch (Local_Sens)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3b 83       	std	Y+3, r19	; 0x03
    1caa:	2a 83       	std	Y+2, r18	; 0x02
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb0:	83 30       	cpi	r24, 0x03	; 3
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <EXTI_VoidInit2+0x38>
    1cb6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cb8:	3b 81       	ldd	r19, Y+3	; 0x03
    1cba:	24 30       	cpi	r18, 0x04	; 4
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	49 f0       	breq	.+18     	; 0x1cd2 <EXTI_VoidInit2+0x48>
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <EXTI_VoidInit2+0x56>
	{
	case EXTI_Falling:
		clear_Bit(EXTI_MCUCSR, EXTI_ISC2);
    1cc2:	a4 e5       	ldi	r26, 0x54	; 84
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e4 e5       	ldi	r30, 0x54	; 84
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	8f 7b       	andi	r24, 0xBF	; 191
    1cce:	8c 93       	st	X, r24
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <EXTI_VoidInit2+0x56>
		break;
	case EXTI_Rising:
		Set_Bit(EXTI_MCUCSR, EXTI_ISC2);
    1cd2:	a4 e5       	ldi	r26, 0x54	; 84
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	e4 e5       	ldi	r30, 0x54	; 84
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 64       	ori	r24, 0x40	; 64
    1cde:	8c 93       	st	X, r24
		break;
	}

	GIE_VoidEn();
    1ce0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <GIE_VoidEn>
	Set_Bit(EXTI_GICR, EXTI_INT2);
    1ce4:	ab e5       	ldi	r26, 0x5B	; 91
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	eb e5       	ldi	r30, 0x5B	; 91
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	80 62       	ori	r24, 0x20	; 32
    1cf0:	8c 93       	st	X, r24
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <DIO_u8SetPinDir>:
#include "../Header/DIO_Config.h"
#include "../Header/DIO_Interface.h"


u8 DIO_u8SetPinDir(u8 Local_GroupName, u8 Local_PinNumber, u8 Local_PinState)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <DIO_u8SetPinDir+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <DIO_u8SetPinDir+0x8>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <DIO_u8SetPinDir+0xa>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
    1d10:	4c 83       	std	Y+4, r20	; 0x04
	RequestState Request;
	if ((Local_GroupName <= DIO_GroupD) && (Local_GroupName >= DIO_GroupA))
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	85 30       	cpi	r24, 0x05	; 5
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <DIO_u8SetPinDir+0x1c>
    1d18:	87 c0       	rjmp	.+270    	; 0x1e28 <DIO_u8SetPinDir+0x12a>
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <DIO_u8SetPinDir+0x24>
    1d20:	83 c0       	rjmp	.+262    	; 0x1e28 <DIO_u8SetPinDir+0x12a>
	{
		if((Local_PinNumber <= DIO_PIN7 ) && (Local_PinNumber >= DIO_PIN0))
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	88 30       	cpi	r24, 0x08	; 8
    1d26:	08 f0       	brcs	.+2      	; 0x1d2a <DIO_u8SetPinDir+0x2c>
    1d28:	7c c0       	rjmp	.+248    	; 0x1e22 <DIO_u8SetPinDir+0x124>
		{
			if ((Local_PinState == DIO_Output))
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <DIO_u8SetPinDir+0x34>
    1d30:	75 c0       	rjmp	.+234    	; 0x1e1c <DIO_u8SetPinDir+0x11e>
			{
				switch(Local_GroupName)
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3e 83       	std	Y+6, r19	; 0x06
    1d3a:	2d 83       	std	Y+5, r18	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	91 05       	cpc	r25, r1
    1d44:	61 f1       	breq	.+88     	; 0x1d9e <DIO_u8SetPinDir+0xa0>
    1d46:	2d 81       	ldd	r18, Y+5	; 0x05
    1d48:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4a:	23 30       	cpi	r18, 0x03	; 3
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	34 f4       	brge	.+12     	; 0x1d5c <DIO_u8SetPinDir+0x5e>
    1d50:	8d 81       	ldd	r24, Y+5	; 0x05
    1d52:	9e 81       	ldd	r25, Y+6	; 0x06
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 05       	cpc	r25, r1
    1d58:	69 f0       	breq	.+26     	; 0x1d74 <DIO_u8SetPinDir+0x76>
    1d5a:	68 c0       	rjmp	.+208    	; 0x1e2c <DIO_u8SetPinDir+0x12e>
    1d5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d60:	23 30       	cpi	r18, 0x03	; 3
    1d62:	31 05       	cpc	r19, r1
    1d64:	89 f1       	breq	.+98     	; 0x1dc8 <DIO_u8SetPinDir+0xca>
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <DIO_u8SetPinDir+0x74>
    1d70:	40 c0       	rjmp	.+128    	; 0x1df2 <DIO_u8SetPinDir+0xf4>
    1d72:	5c c0       	rjmp	.+184    	; 0x1e2c <DIO_u8SetPinDir+0x12e>
				{
				case DIO_GroupA : DIO_DDRA |=(1<<Local_PinNumber);
    1d74:	aa e3       	ldi	r26, 0x3A	; 58
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	ea e3       	ldi	r30, 0x3A	; 58
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	02 2e       	mov	r0, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8SetPinDir+0x94>
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	0a 94       	dec	r0
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8SetPinDir+0x90>
    1d96:	84 2b       	or	r24, r20
    1d98:	8c 93       	st	X, r24
				Request = RequestHandled;
    1d9a:	19 82       	std	Y+1, r1	; 0x01
    1d9c:	47 c0       	rjmp	.+142    	; 0x1e2c <DIO_u8SetPinDir+0x12e>
				break;

				case DIO_GroupB : DIO_DDRB |=(1<<Local_PinNumber);
    1d9e:	a7 e3       	ldi	r26, 0x37	; 55
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e7 e3       	ldi	r30, 0x37	; 55
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_u8SetPinDir+0xbe>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_u8SetPinDir+0xba>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	8c 93       	st	X, r24
				Request = RequestHandled;
    1dc4:	19 82       	std	Y+1, r1	; 0x01
    1dc6:	32 c0       	rjmp	.+100    	; 0x1e2c <DIO_u8SetPinDir+0x12e>
				break;

				case DIO_GroupC : DIO_DDRC |=(1<<Local_PinNumber);
    1dc8:	a4 e3       	ldi	r26, 0x34	; 52
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e4 e3       	ldi	r30, 0x34	; 52
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_u8SetPinDir+0xe8>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_u8SetPinDir+0xe4>
    1dea:	84 2b       	or	r24, r20
    1dec:	8c 93       	st	X, r24
				Request = RequestHandled;
    1dee:	19 82       	std	Y+1, r1	; 0x01
    1df0:	1d c0       	rjmp	.+58     	; 0x1e2c <DIO_u8SetPinDir+0x12e>
				break;

				case DIO_GroupD : DIO_DDRD |=(1<<Local_PinNumber);
    1df2:	a1 e3       	ldi	r26, 0x31	; 49
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e1 e3       	ldi	r30, 0x31	; 49
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_u8SetPinDir+0x112>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_u8SetPinDir+0x10e>
    1e14:	84 2b       	or	r24, r20
    1e16:	8c 93       	st	X, r24
				Request = RequestHandled;
    1e18:	19 82       	std	Y+1, r1	; 0x01
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <DIO_u8SetPinDir+0x12e>
				}

			}
			else
			{
				Request= RequestErrorNotValidState;
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <DIO_u8SetPinDir+0x12e>
			}
		}
		else
		{
			Request = RequestErrorPinOutOfRange;
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <DIO_u8SetPinDir+0x12e>
		}
	}
	else
	{
		Request = RequestErrorGroupOutOfRange;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e2e:	26 96       	adiw	r28, 0x06	; 6
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Local_GroupName, u8 Local_PinNumber, u8 Local_PinValue)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	28 97       	sbiw	r28, 0x08	; 8
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	6b 83       	std	Y+3, r22	; 0x03
    1e58:	4c 83       	std	Y+4, r20	; 0x04
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	85 30       	cpi	r24, 0x05	; 5
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <DIO_u8SetPinValue+0x22>
    1e60:	fd c0       	rjmp	.+506    	; 0x205c <DIO_u8SetPinValue+0x21c>
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	88 23       	and	r24, r24
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <DIO_u8SetPinValue+0x2a>
    1e68:	f9 c0       	rjmp	.+498    	; 0x205c <DIO_u8SetPinValue+0x21c>

		if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	88 30       	cpi	r24, 0x08	; 8
    1e6e:	08 f0       	brcs	.+2      	; 0x1e72 <DIO_u8SetPinValue+0x32>
    1e70:	f2 c0       	rjmp	.+484    	; 0x2056 <DIO_u8SetPinValue+0x216>

			if(Local_PinValue == High){
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <DIO_u8SetPinValue+0x3a>
    1e78:	71 c0       	rjmp	.+226    	; 0x1f5c <DIO_u8SetPinValue+0x11c>
				Request = RequestHandled;
    1e7a:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	28 2f       	mov	r18, r24
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	38 87       	std	Y+8, r19	; 0x08
    1e84:	2f 83       	std	Y+7, r18	; 0x07
    1e86:	8f 81       	ldd	r24, Y+7	; 0x07
    1e88:	98 85       	ldd	r25, Y+8	; 0x08
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	51 f1       	breq	.+84     	; 0x1ee4 <DIO_u8SetPinValue+0xa4>
    1e90:	2f 81       	ldd	r18, Y+7	; 0x07
    1e92:	38 85       	ldd	r19, Y+8	; 0x08
    1e94:	23 30       	cpi	r18, 0x03	; 3
    1e96:	31 05       	cpc	r19, r1
    1e98:	34 f4       	brge	.+12     	; 0x1ea6 <DIO_u8SetPinValue+0x66>
    1e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9c:	98 85       	ldd	r25, Y+8	; 0x08
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	61 f0       	breq	.+24     	; 0x1ebc <DIO_u8SetPinValue+0x7c>
    1ea4:	dd c0       	rjmp	.+442    	; 0x2060 <DIO_u8SetPinValue+0x220>
    1ea6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ea8:	38 85       	ldd	r19, Y+8	; 0x08
    1eaa:	23 30       	cpi	r18, 0x03	; 3
    1eac:	31 05       	cpc	r19, r1
    1eae:	71 f1       	breq	.+92     	; 0x1f0c <DIO_u8SetPinValue+0xcc>
    1eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1eb2:	98 85       	ldd	r25, Y+8	; 0x08
    1eb4:	84 30       	cpi	r24, 0x04	; 4
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	e9 f1       	breq	.+122    	; 0x1f34 <DIO_u8SetPinValue+0xf4>
    1eba:	d2 c0       	rjmp	.+420    	; 0x2060 <DIO_u8SetPinValue+0x220>
				case DIO_GroupA:
					Set_Bit(DIO_PORTA,Local_PinNumber);
    1ebc:	ab e3       	ldi	r26, 0x3B	; 59
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	eb e3       	ldi	r30, 0x3B	; 59
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <DIO_u8SetPinValue+0x9a>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <DIO_u8SetPinValue+0x96>
    1ede:	84 2b       	or	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	be c0       	rjmp	.+380    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupB:
					Set_Bit(DIO_PORTB,Local_PinNumber);
    1ee4:	a8 e3       	ldi	r26, 0x38	; 56
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e8 e3       	ldi	r30, 0x38	; 56
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <DIO_u8SetPinValue+0xc2>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <DIO_u8SetPinValue+0xbe>
    1f06:	84 2b       	or	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	aa c0       	rjmp	.+340    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupC:
					Set_Bit(DIO_PORTC,Local_PinNumber);
    1f0c:	a5 e3       	ldi	r26, 0x35	; 53
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e5 e3       	ldi	r30, 0x35	; 53
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_u8SetPinValue+0xea>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_u8SetPinValue+0xe6>
    1f2e:	84 2b       	or	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	96 c0       	rjmp	.+300    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupD:
					Set_Bit(DIO_PORTD,Local_PinNumber);
    1f34:	a2 e3       	ldi	r26, 0x32	; 50
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e2 e3       	ldi	r30, 0x32	; 50
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_u8SetPinValue+0x112>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_u8SetPinValue+0x10e>
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
    1f5a:	82 c0       	rjmp	.+260    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				}
			}
			else if(Local_PinValue == Low){
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	88 23       	and	r24, r24
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <DIO_u8SetPinValue+0x124>
    1f62:	76 c0       	rjmp	.+236    	; 0x2050 <DIO_u8SetPinValue+0x210>
				Request = RequestHandled;
    1f64:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3e 83       	std	Y+6, r19	; 0x06
    1f6e:	2d 83       	std	Y+5, r18	; 0x05
    1f70:	8d 81       	ldd	r24, Y+5	; 0x05
    1f72:	9e 81       	ldd	r25, Y+6	; 0x06
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	91 05       	cpc	r25, r1
    1f78:	61 f1       	breq	.+88     	; 0x1fd2 <DIO_u8SetPinValue+0x192>
    1f7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f7e:	23 30       	cpi	r18, 0x03	; 3
    1f80:	31 05       	cpc	r19, r1
    1f82:	34 f4       	brge	.+12     	; 0x1f90 <DIO_u8SetPinValue+0x150>
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	91 05       	cpc	r25, r1
    1f8c:	69 f0       	breq	.+26     	; 0x1fa8 <DIO_u8SetPinValue+0x168>
    1f8e:	68 c0       	rjmp	.+208    	; 0x2060 <DIO_u8SetPinValue+0x220>
    1f90:	2d 81       	ldd	r18, Y+5	; 0x05
    1f92:	3e 81       	ldd	r19, Y+6	; 0x06
    1f94:	23 30       	cpi	r18, 0x03	; 3
    1f96:	31 05       	cpc	r19, r1
    1f98:	89 f1       	breq	.+98     	; 0x1ffc <DIO_u8SetPinValue+0x1bc>
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	84 30       	cpi	r24, 0x04	; 4
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <DIO_u8SetPinValue+0x166>
    1fa4:	40 c0       	rjmp	.+128    	; 0x2026 <DIO_u8SetPinValue+0x1e6>
    1fa6:	5c c0       	rjmp	.+184    	; 0x2060 <DIO_u8SetPinValue+0x220>
				case DIO_GroupA:
					Clear_Bit(DIO_PORTA,Local_PinNumber);
    1fa8:	ab e3       	ldi	r26, 0x3B	; 59
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e3       	ldi	r30, 0x3B	; 59
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_u8SetPinValue+0x186>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_u8SetPinValue+0x182>
    1fca:	80 95       	com	r24
    1fcc:	84 23       	and	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	47 c0       	rjmp	.+142    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupB:
					Clear_Bit(DIO_PORTB,Local_PinNumber);
    1fd2:	a8 e3       	ldi	r26, 0x38	; 56
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e8 e3       	ldi	r30, 0x38	; 56
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8SetPinValue+0x1b0>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_u8SetPinValue+0x1ac>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	32 c0       	rjmp	.+100    	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupC:
					Clear_Bit(DIO_PORTC,Local_PinNumber);
    1ffc:	a5 e3       	ldi	r26, 0x35	; 53
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e5 e3       	ldi	r30, 0x35	; 53
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8SetPinValue+0x1da>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_u8SetPinValue+0x1d6>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	1d c0       	rjmp	.+58     	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				case DIO_GroupD:
					Clear_Bit(DIO_PORTD,Local_PinNumber);
    2026:	a2 e3       	ldi	r26, 0x32	; 50
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e2 e3       	ldi	r30, 0x32	; 50
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8SetPinValue+0x204>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8SetPinValue+0x200>
    2048:	80 95       	com	r24
    204a:	84 23       	and	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	08 c0       	rjmp	.+16     	; 0x2060 <DIO_u8SetPinValue+0x220>
					break;
				}

			}
			else{
				Request = RequestErrorNotValidValue;
    2050:	84 e0       	ldi	r24, 0x04	; 4
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	05 c0       	rjmp	.+10     	; 0x2060 <DIO_u8SetPinValue+0x220>
			}


		}
		else{
			Request = RequestErrorPinOutOfRange;
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <DIO_u8SetPinValue+0x220>
		}

	}
	else{
		Request = RequestErrorGroupOutOfRange;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2060:	89 81       	ldd	r24, Y+1	; 0x01
}
    2062:	28 96       	adiw	r28, 0x08	; 8
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	cf 91       	pop	r28
    2070:	df 91       	pop	r29
    2072:	08 95       	ret

00002074 <DIO_u8GetBitValue>:


u8 DIO_u8GetBitValue(u8 Local_GroupName, u8 Local_PinNumber, u8 *Reference_Value)
{
    2074:	df 93       	push	r29
    2076:	cf 93       	push	r28
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	27 97       	sbiw	r28, 0x07	; 7
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	8a 83       	std	Y+2, r24	; 0x02
    208a:	6b 83       	std	Y+3, r22	; 0x03
    208c:	5d 83       	std	Y+5, r21	; 0x05
    208e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Request;
		if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	85 30       	cpi	r24, 0x05	; 5
    2094:	08 f0       	brcs	.+2      	; 0x2098 <DIO_u8GetBitValue+0x24>
    2096:	7d c0       	rjmp	.+250    	; 0x2192 <DIO_u8GetBitValue+0x11e>
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	88 23       	and	r24, r24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <DIO_u8GetBitValue+0x2c>
    209e:	79 c0       	rjmp	.+242    	; 0x2192 <DIO_u8GetBitValue+0x11e>

			if(Local_PinNumber <= DIO_PIN7 && Local_PinNumber >= DIO_PIN0){
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	88 30       	cpi	r24, 0x08	; 8
    20a4:	08 f0       	brcs	.+2      	; 0x20a8 <DIO_u8GetBitValue+0x34>
    20a6:	72 c0       	rjmp	.+228    	; 0x218c <DIO_u8GetBitValue+0x118>
				Request = RequestHandled;
    20a8:	19 82       	std	Y+1, r1	; 0x01
				switch(Local_GroupName){
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3f 83       	std	Y+7, r19	; 0x07
    20b2:	2e 83       	std	Y+6, r18	; 0x06
    20b4:	4e 81       	ldd	r20, Y+6	; 0x06
    20b6:	5f 81       	ldd	r21, Y+7	; 0x07
    20b8:	42 30       	cpi	r20, 0x02	; 2
    20ba:	51 05       	cpc	r21, r1
    20bc:	59 f1       	breq	.+86     	; 0x2114 <DIO_u8GetBitValue+0xa0>
    20be:	8e 81       	ldd	r24, Y+6	; 0x06
    20c0:	9f 81       	ldd	r25, Y+7	; 0x07
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	34 f4       	brge	.+12     	; 0x20d4 <DIO_u8GetBitValue+0x60>
    20c8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ca:	3f 81       	ldd	r19, Y+7	; 0x07
    20cc:	21 30       	cpi	r18, 0x01	; 1
    20ce:	31 05       	cpc	r19, r1
    20d0:	69 f0       	breq	.+26     	; 0x20ec <DIO_u8GetBitValue+0x78>
    20d2:	61 c0       	rjmp	.+194    	; 0x2196 <DIO_u8GetBitValue+0x122>
    20d4:	4e 81       	ldd	r20, Y+6	; 0x06
    20d6:	5f 81       	ldd	r21, Y+7	; 0x07
    20d8:	43 30       	cpi	r20, 0x03	; 3
    20da:	51 05       	cpc	r21, r1
    20dc:	79 f1       	breq	.+94     	; 0x213c <DIO_u8GetBitValue+0xc8>
    20de:	8e 81       	ldd	r24, Y+6	; 0x06
    20e0:	9f 81       	ldd	r25, Y+7	; 0x07
    20e2:	84 30       	cpi	r24, 0x04	; 4
    20e4:	91 05       	cpc	r25, r1
    20e6:	09 f4       	brne	.+2      	; 0x20ea <DIO_u8GetBitValue+0x76>
    20e8:	3d c0       	rjmp	.+122    	; 0x2164 <DIO_u8GetBitValue+0xf0>
    20ea:	55 c0       	rjmp	.+170    	; 0x2196 <DIO_u8GetBitValue+0x122>
				case DIO_GroupA:
					*Reference_Value = Get_Bit(DIO_PINA,Local_PinNumber);
    20ec:	e9 e3       	ldi	r30, 0x39	; 57
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a9 01       	movw	r20, r18
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <DIO_u8GetBitValue+0x90>
    2100:	55 95       	asr	r21
    2102:	47 95       	ror	r20
    2104:	8a 95       	dec	r24
    2106:	e2 f7       	brpl	.-8      	; 0x2100 <DIO_u8GetBitValue+0x8c>
    2108:	ca 01       	movw	r24, r20
    210a:	81 70       	andi	r24, 0x01	; 1
    210c:	ec 81       	ldd	r30, Y+4	; 0x04
    210e:	fd 81       	ldd	r31, Y+5	; 0x05
    2110:	80 83       	st	Z, r24
    2112:	41 c0       	rjmp	.+130    	; 0x2196 <DIO_u8GetBitValue+0x122>
					break;
				case DIO_GroupB:
					*Reference_Value = Get_Bit(DIO_PINB,Local_PinNumber);
    2114:	e6 e3       	ldi	r30, 0x36	; 54
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a9 01       	movw	r20, r18
    2126:	02 c0       	rjmp	.+4      	; 0x212c <DIO_u8GetBitValue+0xb8>
    2128:	55 95       	asr	r21
    212a:	47 95       	ror	r20
    212c:	8a 95       	dec	r24
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <DIO_u8GetBitValue+0xb4>
    2130:	ca 01       	movw	r24, r20
    2132:	81 70       	andi	r24, 0x01	; 1
    2134:	ec 81       	ldd	r30, Y+4	; 0x04
    2136:	fd 81       	ldd	r31, Y+5	; 0x05
    2138:	80 83       	st	Z, r24
    213a:	2d c0       	rjmp	.+90     	; 0x2196 <DIO_u8GetBitValue+0x122>
					break;
				case DIO_GroupC:
					*Reference_Value = Get_Bit(DIO_PINC,Local_PinNumber);
    213c:	e3 e3       	ldi	r30, 0x33	; 51
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8GetBitValue+0xe0>
    2150:	55 95       	asr	r21
    2152:	47 95       	ror	r20
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8GetBitValue+0xdc>
    2158:	ca 01       	movw	r24, r20
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	ec 81       	ldd	r30, Y+4	; 0x04
    215e:	fd 81       	ldd	r31, Y+5	; 0x05
    2160:	80 83       	st	Z, r24
    2162:	19 c0       	rjmp	.+50     	; 0x2196 <DIO_u8GetBitValue+0x122>
					break;
				case DIO_GroupD:
					*Reference_Value = Get_Bit(DIO_PIND,Local_PinNumber);
    2164:	e0 e3       	ldi	r30, 0x30	; 48
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	88 2f       	mov	r24, r24
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	a9 01       	movw	r20, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <DIO_u8GetBitValue+0x108>
    2178:	55 95       	asr	r21
    217a:	47 95       	ror	r20
    217c:	8a 95       	dec	r24
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <DIO_u8GetBitValue+0x104>
    2180:	ca 01       	movw	r24, r20
    2182:	81 70       	andi	r24, 0x01	; 1
    2184:	ec 81       	ldd	r30, Y+4	; 0x04
    2186:	fd 81       	ldd	r31, Y+5	; 0x05
    2188:	80 83       	st	Z, r24
    218a:	05 c0       	rjmp	.+10     	; 0x2196 <DIO_u8GetBitValue+0x122>
					break;
				}
			}
			else{
				Request = RequestErrorPinOutOfRange;
    218c:	82 e0       	ldi	r24, 0x02	; 2
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_u8GetBitValue+0x122>
			}

		}
		else{
			Request = RequestErrorGroupOutOfRange;
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	89 83       	std	Y+1, r24	; 0x01
		}
		return Request;
    2196:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2198:	27 96       	adiw	r28, 0x07	; 7
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <DIO_u8SetPortDir>:


u8 DIO_u8SetPortDir(u8 Local_GroupName,u8 Local_PortState){
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <DIO_u8SetPortDir+0x6>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <DIO_u8SetPortDir+0x8>
    21b2:	0f 92       	push	r0
    21b4:	cd b7       	in	r28, 0x3d	; 61
    21b6:	de b7       	in	r29, 0x3e	; 62
    21b8:	8a 83       	std	Y+2, r24	; 0x02
    21ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Request;
	if(Local_GroupName <= DIO_GroupD && Local_GroupName >= DIO_GroupA){
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	85 30       	cpi	r24, 0x05	; 5
    21c0:	c0 f5       	brcc	.+112    	; 0x2232 <DIO_u8SetPortDir+0x88>
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 23       	and	r24, r24
    21c6:	a9 f1       	breq	.+106    	; 0x2232 <DIO_u8SetPortDir+0x88>
		if(Local_PortState <= DIO_GroupOut)
		{
			Request = RequestHandled;
    21c8:	19 82       	std	Y+1, r1	; 0x01
			switch(Local_GroupName)
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	3d 83       	std	Y+5, r19	; 0x05
    21d2:	2c 83       	std	Y+4, r18	; 0x04
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	82 30       	cpi	r24, 0x02	; 2
    21da:	91 05       	cpc	r25, r1
    21dc:	d9 f0       	breq	.+54     	; 0x2214 <DIO_u8SetPortDir+0x6a>
    21de:	2c 81       	ldd	r18, Y+4	; 0x04
    21e0:	3d 81       	ldd	r19, Y+5	; 0x05
    21e2:	23 30       	cpi	r18, 0x03	; 3
    21e4:	31 05       	cpc	r19, r1
    21e6:	34 f4       	brge	.+12     	; 0x21f4 <DIO_u8SetPortDir+0x4a>
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ea:	9d 81       	ldd	r25, Y+5	; 0x05
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	91 05       	cpc	r25, r1
    21f0:	61 f0       	breq	.+24     	; 0x220a <DIO_u8SetPortDir+0x60>
    21f2:	21 c0       	rjmp	.+66     	; 0x2236 <DIO_u8SetPortDir+0x8c>
    21f4:	2c 81       	ldd	r18, Y+4	; 0x04
    21f6:	3d 81       	ldd	r19, Y+5	; 0x05
    21f8:	23 30       	cpi	r18, 0x03	; 3
    21fa:	31 05       	cpc	r19, r1
    21fc:	81 f0       	breq	.+32     	; 0x221e <DIO_u8SetPortDir+0x74>
    21fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2200:	9d 81       	ldd	r25, Y+5	; 0x05
    2202:	84 30       	cpi	r24, 0x04	; 4
    2204:	91 05       	cpc	r25, r1
    2206:	81 f0       	breq	.+32     	; 0x2228 <DIO_u8SetPortDir+0x7e>
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <DIO_u8SetPortDir+0x8c>
			{
			case DIO_GroupA:
				 DIO_DDRA = Local_PortState;
    220a:	ea e3       	ldi	r30, 0x3A	; 58
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	80 83       	st	Z, r24
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupB:
				DIO_DDRB = Local_PortState;
    2214:	e7 e3       	ldi	r30, 0x37	; 55
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	80 83       	st	Z, r24
    221c:	0c c0       	rjmp	.+24     	; 0x2236 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupC:
				DIO_DDRC = Local_PortState;
    221e:	e4 e3       	ldi	r30, 0x34	; 52
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	80 83       	st	Z, r24
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <DIO_u8SetPortDir+0x8c>
				break;
			case DIO_GroupD:
				DIO_DDRD = Local_PortState;
    2228:	e1 e3       	ldi	r30, 0x31	; 49
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	80 83       	st	Z, r24
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <DIO_u8SetPortDir+0x8c>
		else{
			Request = RequestErrorNotValidState;
		}
	}
	else{
		Request = RequestErrorGroupOutOfRange;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Local_GroupName, u8 Local_PortValue)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	00 d0       	rcall	.+0      	; 0x224e <DIO_u8SetPortValue+0x6>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <DIO_u8SetPortValue+0x8>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8a 83       	std	Y+2, r24	; 0x02
    2258:	6b 83       	std	Y+3, r22	; 0x03
	RequestState Request;
	if ((Local_GroupName <= DIO_GroupD) && (Local_GroupName >= DIO_GroupA))
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	85 30       	cpi	r24, 0x05	; 5
    225e:	d8 f5       	brcc	.+118    	; 0x22d6 <DIO_u8SetPortValue+0x8e>
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	88 23       	and	r24, r24
    2264:	c1 f1       	breq	.+112    	; 0x22d6 <DIO_u8SetPortValue+0x8e>
	{
		if ((Local_PortValue <= DIO_GroupHigh))
		{
			switch(Local_GroupName)
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	3d 83       	std	Y+5, r19	; 0x05
    226e:	2c 83       	std	Y+4, r18	; 0x04
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	82 30       	cpi	r24, 0x02	; 2
    2276:	91 05       	cpc	r25, r1
    2278:	e1 f0       	breq	.+56     	; 0x22b2 <DIO_u8SetPortValue+0x6a>
    227a:	2c 81       	ldd	r18, Y+4	; 0x04
    227c:	3d 81       	ldd	r19, Y+5	; 0x05
    227e:	23 30       	cpi	r18, 0x03	; 3
    2280:	31 05       	cpc	r19, r1
    2282:	34 f4       	brge	.+12     	; 0x2290 <DIO_u8SetPortValue+0x48>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	61 f0       	breq	.+24     	; 0x22a6 <DIO_u8SetPortValue+0x5e>
    228e:	25 c0       	rjmp	.+74     	; 0x22da <DIO_u8SetPortValue+0x92>
    2290:	2c 81       	ldd	r18, Y+4	; 0x04
    2292:	3d 81       	ldd	r19, Y+5	; 0x05
    2294:	23 30       	cpi	r18, 0x03	; 3
    2296:	31 05       	cpc	r19, r1
    2298:	91 f0       	breq	.+36     	; 0x22be <DIO_u8SetPortValue+0x76>
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	9d 81       	ldd	r25, Y+5	; 0x05
    229e:	84 30       	cpi	r24, 0x04	; 4
    22a0:	91 05       	cpc	r25, r1
    22a2:	99 f0       	breq	.+38     	; 0x22ca <DIO_u8SetPortValue+0x82>
    22a4:	1a c0       	rjmp	.+52     	; 0x22da <DIO_u8SetPortValue+0x92>
			{
			case DIO_GroupA : DIO_PORTA = Local_PortValue;
    22a6:	eb e3       	ldi	r30, 0x3B	; 59
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	80 83       	st	Z, r24
			Request = RequestHandled;
    22ae:	19 82       	std	Y+1, r1	; 0x01
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <DIO_u8SetPortValue+0x92>
			break;

			case DIO_GroupB : DIO_PORTB = Local_PortValue;
    22b2:	e8 e3       	ldi	r30, 0x38	; 56
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	80 83       	st	Z, r24
			Request = RequestHandled;
    22ba:	19 82       	std	Y+1, r1	; 0x01
    22bc:	0e c0       	rjmp	.+28     	; 0x22da <DIO_u8SetPortValue+0x92>
			break;

			case DIO_GroupC : DIO_PORTC = Local_PortValue;
    22be:	e5 e3       	ldi	r30, 0x35	; 53
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	80 83       	st	Z, r24
			Request = RequestHandled;
    22c6:	19 82       	std	Y+1, r1	; 0x01
    22c8:	08 c0       	rjmp	.+16     	; 0x22da <DIO_u8SetPortValue+0x92>
			break;

			case DIO_GroupD : DIO_PORTD = Local_PortValue;
    22ca:	e2 e3       	ldi	r30, 0x32	; 50
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	8b 81       	ldd	r24, Y+3	; 0x03
    22d0:	80 83       	st	Z, r24
			Request = RequestHandled;
    22d2:	19 82       	std	Y+1, r1	; 0x01
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <DIO_u8SetPortValue+0x92>
		}

	}
	else
	{
		Request = RequestErrorGroupOutOfRange;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    22da:	89 81       	ldd	r24, Y+1	; 0x01
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <DIO_u8GetPortRead>:


u8 DIO_u8GetPortRead(u8 Local_GroupName, u8 *Reference_value)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <DIO_u8GetPortRead+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <DIO_u8GetPortRead+0x8>
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <DIO_u8GetPortRead+0xa>
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	8a 83       	std	Y+2, r24	; 0x02
    22fc:	7c 83       	std	Y+4, r23	; 0x04
    22fe:	6b 83       	std	Y+3, r22	; 0x03
	RequestState Request;
	if ((Local_GroupName <= DIO_GroupD) && (Local_GroupName >= DIO_GroupA))
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	85 30       	cpi	r24, 0x05	; 5
    2304:	08 f0       	brcs	.+2      	; 0x2308 <DIO_u8GetPortRead+0x1c>
    2306:	44 c0       	rjmp	.+136    	; 0x2390 <DIO_u8GetPortRead+0xa4>
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	88 23       	and	r24, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <DIO_u8GetPortRead+0x24>
    230e:	40 c0       	rjmp	.+128    	; 0x2390 <DIO_u8GetPortRead+0xa4>
	{
		switch(Local_GroupName)
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	28 2f       	mov	r18, r24
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	3e 83       	std	Y+6, r19	; 0x06
    2318:	2d 83       	std	Y+5, r18	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	91 05       	cpc	r25, r1
    2322:	f1 f0       	breq	.+60     	; 0x2360 <DIO_u8GetPortRead+0x74>
    2324:	2d 81       	ldd	r18, Y+5	; 0x05
    2326:	3e 81       	ldd	r19, Y+6	; 0x06
    2328:	23 30       	cpi	r18, 0x03	; 3
    232a:	31 05       	cpc	r19, r1
    232c:	34 f4       	brge	.+12     	; 0x233a <DIO_u8GetPortRead+0x4e>
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	81 30       	cpi	r24, 0x01	; 1
    2334:	91 05       	cpc	r25, r1
    2336:	61 f0       	breq	.+24     	; 0x2350 <DIO_u8GetPortRead+0x64>
    2338:	2d c0       	rjmp	.+90     	; 0x2394 <DIO_u8GetPortRead+0xa8>
    233a:	2d 81       	ldd	r18, Y+5	; 0x05
    233c:	3e 81       	ldd	r19, Y+6	; 0x06
    233e:	23 30       	cpi	r18, 0x03	; 3
    2340:	31 05       	cpc	r19, r1
    2342:	b1 f0       	breq	.+44     	; 0x2370 <DIO_u8GetPortRead+0x84>
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	84 30       	cpi	r24, 0x04	; 4
    234a:	91 05       	cpc	r25, r1
    234c:	c9 f0       	breq	.+50     	; 0x2380 <DIO_u8GetPortRead+0x94>
    234e:	22 c0       	rjmp	.+68     	; 0x2394 <DIO_u8GetPortRead+0xa8>
		{
		case DIO_GroupA : *Reference_value = DIO_PORTA;
    2350:	eb e3       	ldi	r30, 0x3B	; 59
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	eb 81       	ldd	r30, Y+3	; 0x03
    2358:	fc 81       	ldd	r31, Y+4	; 0x04
    235a:	80 83       	st	Z, r24
		Request = RequestHandled;
    235c:	19 82       	std	Y+1, r1	; 0x01
    235e:	1a c0       	rjmp	.+52     	; 0x2394 <DIO_u8GetPortRead+0xa8>
		break;

		case DIO_GroupB : *Reference_value = DIO_PORTB;
    2360:	e8 e3       	ldi	r30, 0x38	; 56
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	eb 81       	ldd	r30, Y+3	; 0x03
    2368:	fc 81       	ldd	r31, Y+4	; 0x04
    236a:	80 83       	st	Z, r24
		Request = RequestHandled;
    236c:	19 82       	std	Y+1, r1	; 0x01
    236e:	12 c0       	rjmp	.+36     	; 0x2394 <DIO_u8GetPortRead+0xa8>
		break;

		case DIO_GroupC : *Reference_value = DIO_PORTC;
    2370:	e5 e3       	ldi	r30, 0x35	; 53
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	eb 81       	ldd	r30, Y+3	; 0x03
    2378:	fc 81       	ldd	r31, Y+4	; 0x04
    237a:	80 83       	st	Z, r24
		Request = RequestHandled;
    237c:	19 82       	std	Y+1, r1	; 0x01
    237e:	0a c0       	rjmp	.+20     	; 0x2394 <DIO_u8GetPortRead+0xa8>
		break;

		case DIO_GroupD : *Reference_value = DIO_PORTD;
    2380:	e2 e3       	ldi	r30, 0x32	; 50
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	80 83       	st	Z, r24
		Request = RequestHandled;
    238c:	19 82       	std	Y+1, r1	; 0x01
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <DIO_u8GetPortRead+0xa8>
		}

	}
	else
	{
		Request = RequestErrorGroupOutOfRange;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    2394:	89 81       	ldd	r24, Y+1	; 0x01

}
    2396:	26 96       	adiw	r28, 0x06	; 6
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <DIO_u8ControlPullUp>:



u8 DIO_u8ControlPullUp(u8 Local_ConnectionType, u8 Local_GroupName, u8 Local_PinNumber, u8 Local_PullUpState)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	2d 97       	sbiw	r28, 0x0d	; 13
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	8a 83       	std	Y+2, r24	; 0x02
    23be:	6b 83       	std	Y+3, r22	; 0x03
    23c0:	4c 83       	std	Y+4, r20	; 0x04
    23c2:	2d 83       	std	Y+5, r18	; 0x05
	RequestState Request;
	if ((Local_GroupName <= DIO_GroupD) && (Local_GroupName >= DIO_GroupA))
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	85 30       	cpi	r24, 0x05	; 5
    23c8:	08 f0       	brcs	.+2      	; 0x23cc <DIO_u8ControlPullUp+0x24>
    23ca:	84 c1       	rjmp	.+776    	; 0x26d4 <DIO_u8ControlPullUp+0x32c>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	88 23       	and	r24, r24
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <DIO_u8ControlPullUp+0x2c>
    23d2:	80 c1       	rjmp	.+768    	; 0x26d4 <DIO_u8ControlPullUp+0x32c>
	{
		if(Local_ConnectionType == DIO_PortConnection)
    23d4:	8a 81       	ldd	r24, Y+2	; 0x02
    23d6:	88 23       	and	r24, r24
    23d8:	09 f0       	breq	.+2      	; 0x23dc <DIO_u8ControlPullUp+0x34>
    23da:	75 c0       	rjmp	.+234    	; 0x24c6 <DIO_u8ControlPullUp+0x11e>
		{
			if(Local_PullUpState == DIO_PullUpEn)
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	c1 f5       	brne	.+112    	; 0x2452 <DIO_u8ControlPullUp+0xaa>
			{
				switch(Local_GroupName)
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	3d 87       	std	Y+13, r19	; 0x0d
    23ea:	2c 87       	std	Y+12, r18	; 0x0c
    23ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    23ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    23f0:	82 30       	cpi	r24, 0x02	; 2
    23f2:	91 05       	cpc	r25, r1
    23f4:	e1 f0       	breq	.+56     	; 0x242e <DIO_u8ControlPullUp+0x86>
    23f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    23f8:	3d 85       	ldd	r19, Y+13	; 0x0d
    23fa:	23 30       	cpi	r18, 0x03	; 3
    23fc:	31 05       	cpc	r19, r1
    23fe:	34 f4       	brge	.+12     	; 0x240c <DIO_u8ControlPullUp+0x64>
    2400:	8c 85       	ldd	r24, Y+12	; 0x0c
    2402:	9d 85       	ldd	r25, Y+13	; 0x0d
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	61 f0       	breq	.+24     	; 0x2422 <DIO_u8ControlPullUp+0x7a>
    240a:	66 c1       	rjmp	.+716    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
    240c:	2c 85       	ldd	r18, Y+12	; 0x0c
    240e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2410:	23 30       	cpi	r18, 0x03	; 3
    2412:	31 05       	cpc	r19, r1
    2414:	91 f0       	breq	.+36     	; 0x243a <DIO_u8ControlPullUp+0x92>
    2416:	8c 85       	ldd	r24, Y+12	; 0x0c
    2418:	9d 85       	ldd	r25, Y+13	; 0x0d
    241a:	84 30       	cpi	r24, 0x04	; 4
    241c:	91 05       	cpc	r25, r1
    241e:	99 f0       	breq	.+38     	; 0x2446 <DIO_u8ControlPullUp+0x9e>
    2420:	5b c1       	rjmp	.+694    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				{
				case DIO_GroupA : DIO_PORTA = DIO_GroupHigh;
    2422:	eb e3       	ldi	r30, 0x3B	; 59
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	8f ef       	ldi	r24, 0xFF	; 255
    2428:	80 83       	st	Z, r24
				Request = RequestHandled;
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	55 c1       	rjmp	.+682    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupB : DIO_PORTB = DIO_GroupHigh;
    242e:	e8 e3       	ldi	r30, 0x38	; 56
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	80 83       	st	Z, r24
				Request = RequestHandled;
    2436:	19 82       	std	Y+1, r1	; 0x01
    2438:	4f c1       	rjmp	.+670    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupC : DIO_PORTC = DIO_GroupHigh;
    243a:	e5 e3       	ldi	r30, 0x35	; 53
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	80 83       	st	Z, r24
				Request = RequestHandled;
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	49 c1       	rjmp	.+658    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupD : DIO_PORTD = DIO_GroupHigh;
    2446:	e2 e3       	ldi	r30, 0x32	; 50
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	8f ef       	ldi	r24, 0xFF	; 255
    244c:	80 83       	st	Z, r24
				Request = RequestHandled;
    244e:	19 82       	std	Y+1, r1	; 0x01
    2450:	43 c1       	rjmp	.+646    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;
				}
			}
			else if(Local_PullUpState == DIO_PullUpDis)
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	82 30       	cpi	r24, 0x02	; 2
    2456:	a1 f5       	brne	.+104    	; 0x24c0 <DIO_u8ControlPullUp+0x118>
			{
				switch(Local_GroupName)
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	3b 87       	std	Y+11, r19	; 0x0b
    2460:	2a 87       	std	Y+10, r18	; 0x0a
    2462:	8a 85       	ldd	r24, Y+10	; 0x0a
    2464:	9b 85       	ldd	r25, Y+11	; 0x0b
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	91 05       	cpc	r25, r1
    246a:	d9 f0       	breq	.+54     	; 0x24a2 <DIO_u8ControlPullUp+0xfa>
    246c:	2a 85       	ldd	r18, Y+10	; 0x0a
    246e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2470:	23 30       	cpi	r18, 0x03	; 3
    2472:	31 05       	cpc	r19, r1
    2474:	34 f4       	brge	.+12     	; 0x2482 <DIO_u8ControlPullUp+0xda>
    2476:	8a 85       	ldd	r24, Y+10	; 0x0a
    2478:	9b 85       	ldd	r25, Y+11	; 0x0b
    247a:	81 30       	cpi	r24, 0x01	; 1
    247c:	91 05       	cpc	r25, r1
    247e:	61 f0       	breq	.+24     	; 0x2498 <DIO_u8ControlPullUp+0xf0>
    2480:	2b c1       	rjmp	.+598    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
    2482:	2a 85       	ldd	r18, Y+10	; 0x0a
    2484:	3b 85       	ldd	r19, Y+11	; 0x0b
    2486:	23 30       	cpi	r18, 0x03	; 3
    2488:	31 05       	cpc	r19, r1
    248a:	81 f0       	breq	.+32     	; 0x24ac <DIO_u8ControlPullUp+0x104>
    248c:	8a 85       	ldd	r24, Y+10	; 0x0a
    248e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	91 05       	cpc	r25, r1
    2494:	81 f0       	breq	.+32     	; 0x24b6 <DIO_u8ControlPullUp+0x10e>
    2496:	20 c1       	rjmp	.+576    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				{
				case DIO_GroupA : DIO_PORTA = DIO_GroupLow;
    2498:	eb e3       	ldi	r30, 0x3B	; 59
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	10 82       	st	Z, r1
				Request = RequestHandled;
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	1b c1       	rjmp	.+566    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupB : DIO_PORTB = DIO_GroupLow;
    24a2:	e8 e3       	ldi	r30, 0x38	; 56
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	10 82       	st	Z, r1
				Request = RequestHandled;
    24a8:	19 82       	std	Y+1, r1	; 0x01
    24aa:	16 c1       	rjmp	.+556    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupC : DIO_PORTC = DIO_GroupLow;
    24ac:	e5 e3       	ldi	r30, 0x35	; 53
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	10 82       	st	Z, r1
				Request = RequestHandled;
    24b2:	19 82       	std	Y+1, r1	; 0x01
    24b4:	11 c1       	rjmp	.+546    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;

				case DIO_GroupD : DIO_PORTD = DIO_GroupLow;
    24b6:	e2 e3       	ldi	r30, 0x32	; 50
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	10 82       	st	Z, r1
				Request = RequestHandled;
    24bc:	19 82       	std	Y+1, r1	; 0x01
    24be:	0c c1       	rjmp	.+536    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				break;
				}
			}
			else
			{
				Request= RequestErrorNotValidState;
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	09 c1       	rjmp	.+530    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
			}
		}

		else if(Local_ConnectionType == DIO_PinConnection)
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	81 30       	cpi	r24, 0x01	; 1
    24ca:	09 f0       	breq	.+2      	; 0x24ce <DIO_u8ControlPullUp+0x126>
    24cc:	00 c1       	rjmp	.+512    	; 0x26ce <DIO_u8ControlPullUp+0x326>
		{
			if((Local_PinNumber <= DIO_PIN7 ) && (Local_PinNumber >= DIO_PIN0))
    24ce:	8c 81       	ldd	r24, Y+4	; 0x04
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	08 f0       	brcs	.+2      	; 0x24d6 <DIO_u8ControlPullUp+0x12e>
    24d4:	f9 c0       	rjmp	.+498    	; 0x26c8 <DIO_u8ControlPullUp+0x320>
			{
				if ((Local_PullUpState == DIO_PullUpEn))
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	81 30       	cpi	r24, 0x01	; 1
    24da:	09 f0       	breq	.+2      	; 0x24de <DIO_u8ControlPullUp+0x136>
    24dc:	75 c0       	rjmp	.+234    	; 0x25c8 <DIO_u8ControlPullUp+0x220>
				{
					switch(Local_GroupName)
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	39 87       	std	Y+9, r19	; 0x09
    24e6:	28 87       	std	Y+8, r18	; 0x08
    24e8:	88 85       	ldd	r24, Y+8	; 0x08
    24ea:	99 85       	ldd	r25, Y+9	; 0x09
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	91 05       	cpc	r25, r1
    24f0:	61 f1       	breq	.+88     	; 0x254a <DIO_u8ControlPullUp+0x1a2>
    24f2:	28 85       	ldd	r18, Y+8	; 0x08
    24f4:	39 85       	ldd	r19, Y+9	; 0x09
    24f6:	23 30       	cpi	r18, 0x03	; 3
    24f8:	31 05       	cpc	r19, r1
    24fa:	34 f4       	brge	.+12     	; 0x2508 <DIO_u8ControlPullUp+0x160>
    24fc:	88 85       	ldd	r24, Y+8	; 0x08
    24fe:	99 85       	ldd	r25, Y+9	; 0x09
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	91 05       	cpc	r25, r1
    2504:	69 f0       	breq	.+26     	; 0x2520 <DIO_u8ControlPullUp+0x178>
    2506:	e8 c0       	rjmp	.+464    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
    2508:	28 85       	ldd	r18, Y+8	; 0x08
    250a:	39 85       	ldd	r19, Y+9	; 0x09
    250c:	23 30       	cpi	r18, 0x03	; 3
    250e:	31 05       	cpc	r19, r1
    2510:	89 f1       	breq	.+98     	; 0x2574 <DIO_u8ControlPullUp+0x1cc>
    2512:	88 85       	ldd	r24, Y+8	; 0x08
    2514:	99 85       	ldd	r25, Y+9	; 0x09
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	91 05       	cpc	r25, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <DIO_u8ControlPullUp+0x176>
    251c:	40 c0       	rjmp	.+128    	; 0x259e <DIO_u8ControlPullUp+0x1f6>
    251e:	dc c0       	rjmp	.+440    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					{
					case DIO_GroupA : DIO_PORTA |=(1<<Local_PinNumber);
    2520:	ab e3       	ldi	r26, 0x3B	; 59
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	eb e3       	ldi	r30, 0x3B	; 59
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	48 2f       	mov	r20, r24
    252c:	8c 81       	ldd	r24, Y+4	; 0x04
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 2e       	mov	r0, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <DIO_u8ControlPullUp+0x196>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	0a 94       	dec	r0
    2540:	e2 f7       	brpl	.-8      	; 0x253a <DIO_u8ControlPullUp+0x192>
    2542:	84 2b       	or	r24, r20
    2544:	8c 93       	st	X, r24
					Request = RequestHandled;
    2546:	19 82       	std	Y+1, r1	; 0x01
    2548:	c7 c0       	rjmp	.+398    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupB : DIO_PORTB |=(1<<Local_PinNumber);
    254a:	a8 e3       	ldi	r26, 0x38	; 56
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e8 e3       	ldi	r30, 0x38	; 56
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <DIO_u8ControlPullUp+0x1c0>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <DIO_u8ControlPullUp+0x1bc>
    256c:	84 2b       	or	r24, r20
    256e:	8c 93       	st	X, r24
					Request = RequestHandled;
    2570:	19 82       	std	Y+1, r1	; 0x01
    2572:	b2 c0       	rjmp	.+356    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupC : DIO_PORTC |=(1<<Local_PinNumber);
    2574:	a5 e3       	ldi	r26, 0x35	; 53
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e5 e3       	ldi	r30, 0x35	; 53
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	48 2f       	mov	r20, r24
    2580:	8c 81       	ldd	r24, Y+4	; 0x04
    2582:	28 2f       	mov	r18, r24
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	02 2e       	mov	r0, r18
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <DIO_u8ControlPullUp+0x1ea>
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	0a 94       	dec	r0
    2594:	e2 f7       	brpl	.-8      	; 0x258e <DIO_u8ControlPullUp+0x1e6>
    2596:	84 2b       	or	r24, r20
    2598:	8c 93       	st	X, r24
					Request = RequestHandled;
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	9d c0       	rjmp	.+314    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupD : DIO_PORTD |=(1<<Local_PinNumber);
    259e:	a2 e3       	ldi	r26, 0x32	; 50
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e2 e3       	ldi	r30, 0x32	; 50
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	48 2f       	mov	r20, r24
    25aa:	8c 81       	ldd	r24, Y+4	; 0x04
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 2e       	mov	r0, r18
    25b6:	02 c0       	rjmp	.+4      	; 0x25bc <DIO_u8ControlPullUp+0x214>
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	0a 94       	dec	r0
    25be:	e2 f7       	brpl	.-8      	; 0x25b8 <DIO_u8ControlPullUp+0x210>
    25c0:	84 2b       	or	r24, r20
    25c2:	8c 93       	st	X, r24
					Request = RequestHandled;
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	88 c0       	rjmp	.+272    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;
					}
				}
				else if(Local_PullUpState == DIO_PullUpDis)
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	82 30       	cpi	r24, 0x02	; 2
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <DIO_u8ControlPullUp+0x228>
    25ce:	79 c0       	rjmp	.+242    	; 0x26c2 <DIO_u8ControlPullUp+0x31a>
				{
					switch(Local_GroupName)
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	3f 83       	std	Y+7, r19	; 0x07
    25d8:	2e 83       	std	Y+6, r18	; 0x06
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	9f 81       	ldd	r25, Y+7	; 0x07
    25de:	82 30       	cpi	r24, 0x02	; 2
    25e0:	91 05       	cpc	r25, r1
    25e2:	69 f1       	breq	.+90     	; 0x263e <DIO_u8ControlPullUp+0x296>
    25e4:	2e 81       	ldd	r18, Y+6	; 0x06
    25e6:	3f 81       	ldd	r19, Y+7	; 0x07
    25e8:	23 30       	cpi	r18, 0x03	; 3
    25ea:	31 05       	cpc	r19, r1
    25ec:	34 f4       	brge	.+12     	; 0x25fa <DIO_u8ControlPullUp+0x252>
    25ee:	8e 81       	ldd	r24, Y+6	; 0x06
    25f0:	9f 81       	ldd	r25, Y+7	; 0x07
    25f2:	81 30       	cpi	r24, 0x01	; 1
    25f4:	91 05       	cpc	r25, r1
    25f6:	69 f0       	breq	.+26     	; 0x2612 <DIO_u8ControlPullUp+0x26a>
    25f8:	6f c0       	rjmp	.+222    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
    25fa:	2e 81       	ldd	r18, Y+6	; 0x06
    25fc:	3f 81       	ldd	r19, Y+7	; 0x07
    25fe:	23 30       	cpi	r18, 0x03	; 3
    2600:	31 05       	cpc	r19, r1
    2602:	99 f1       	breq	.+102    	; 0x266a <DIO_u8ControlPullUp+0x2c2>
    2604:	8e 81       	ldd	r24, Y+6	; 0x06
    2606:	9f 81       	ldd	r25, Y+7	; 0x07
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	91 05       	cpc	r25, r1
    260c:	09 f4       	brne	.+2      	; 0x2610 <DIO_u8ControlPullUp+0x268>
    260e:	43 c0       	rjmp	.+134    	; 0x2696 <DIO_u8ControlPullUp+0x2ee>
    2610:	63 c0       	rjmp	.+198    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					{
					case DIO_GroupA :Clear_Bit(DIO_PORTA,Local_PinNumber);
    2612:	ab e3       	ldi	r26, 0x3B	; 59
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	eb e3       	ldi	r30, 0x3B	; 59
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	48 2f       	mov	r20, r24
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 2e       	mov	r0, r18
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <DIO_u8ControlPullUp+0x288>
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	0a 94       	dec	r0
    2632:	e2 f7       	brpl	.-8      	; 0x262c <DIO_u8ControlPullUp+0x284>
    2634:	80 95       	com	r24
    2636:	84 23       	and	r24, r20
    2638:	8c 93       	st	X, r24
					Request = RequestHandled;
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	4d c0       	rjmp	.+154    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupB : Clear_Bit(DIO_PORTB,Local_PinNumber);
    263e:	a8 e3       	ldi	r26, 0x38	; 56
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	e8 e3       	ldi	r30, 0x38	; 56
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	80 81       	ld	r24, Z
    2648:	48 2f       	mov	r20, r24
    264a:	8c 81       	ldd	r24, Y+4	; 0x04
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	02 2e       	mov	r0, r18
    2656:	02 c0       	rjmp	.+4      	; 0x265c <DIO_u8ControlPullUp+0x2b4>
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	0a 94       	dec	r0
    265e:	e2 f7       	brpl	.-8      	; 0x2658 <DIO_u8ControlPullUp+0x2b0>
    2660:	80 95       	com	r24
    2662:	84 23       	and	r24, r20
    2664:	8c 93       	st	X, r24
					Request = RequestHandled;
    2666:	19 82       	std	Y+1, r1	; 0x01
    2668:	37 c0       	rjmp	.+110    	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupC : Clear_Bit(DIO_PORTC,Local_PinNumber);
    266a:	a5 e3       	ldi	r26, 0x35	; 53
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e5 e3       	ldi	r30, 0x35	; 53
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	48 2f       	mov	r20, r24
    2676:	8c 81       	ldd	r24, Y+4	; 0x04
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	02 2e       	mov	r0, r18
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <DIO_u8ControlPullUp+0x2e0>
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	0a 94       	dec	r0
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <DIO_u8ControlPullUp+0x2dc>
    268c:	80 95       	com	r24
    268e:	84 23       	and	r24, r20
    2690:	8c 93       	st	X, r24
					Request = RequestHandled;
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	21 c0       	rjmp	.+66     	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;

					case DIO_GroupD : Clear_Bit(DIO_PORTD,Local_PinNumber);
    2696:	a2 e3       	ldi	r26, 0x32	; 50
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e2 e3       	ldi	r30, 0x32	; 50
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	48 2f       	mov	r20, r24
    26a2:	8c 81       	ldd	r24, Y+4	; 0x04
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 2e       	mov	r0, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <DIO_u8ControlPullUp+0x30c>
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	0a 94       	dec	r0
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <DIO_u8ControlPullUp+0x308>
    26b8:	80 95       	com	r24
    26ba:	84 23       	and	r24, r20
    26bc:	8c 93       	st	X, r24
					Request = RequestHandled;
    26be:	19 82       	std	Y+1, r1	; 0x01
    26c0:	0b c0       	rjmp	.+22     	; 0x26d8 <DIO_u8ControlPullUp+0x330>
					break;
					}
				}
				else
				{
					Request= RequestErrorNotValidState;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	08 c0       	rjmp	.+16     	; 0x26d8 <DIO_u8ControlPullUp+0x330>
				}
			}
			else
			{
				Request = RequestErrorPinOutOfRange;
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <DIO_u8ControlPullUp+0x330>
			}
		}
		else
		{
			Request= RequestErrorNotValidState;
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <DIO_u8ControlPullUp+0x330>
		}
	}
	else
	{
		Request = RequestErrorGroupOutOfRange;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Request;
    26d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26da:	2d 96       	adiw	r28, 0x0d	; 13
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <ADC_voidInit>:
#include "../Header/ADC_private.h"
#include "../../GIE/Header/GIE_All.h"


void ADC_voidInit()
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADC_ADMUX,ADC_REFS0);
    26f4:	a7 e2       	ldi	r26, 0x27	; 39
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	e7 e2       	ldi	r30, 0x27	; 39
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	80 64       	ori	r24, 0x40	; 64
    2700:	8c 93       	st	X, r24
	Clear_Bit(ADC_ADMUX,ADC_REFS1);
    2702:	a7 e2       	ldi	r26, 0x27	; 39
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e7 e2       	ldi	r30, 0x27	; 39
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8f 77       	andi	r24, 0x7F	; 127
    270e:	8c 93       	st	X, r24

	Clear_Bit(ADC_ADMUX,ADC_ADLAR);
    2710:	a7 e2       	ldi	r26, 0x27	; 39
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e7 e2       	ldi	r30, 0x27	; 39
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7d       	andi	r24, 0xDF	; 223
    271c:	8c 93       	st	X, r24

	Set_Bit(ADC_ADCSRA,ADC_ADEN);
    271e:	a6 e2       	ldi	r26, 0x26	; 38
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e6 e2       	ldi	r30, 0x26	; 38
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	80 68       	ori	r24, 0x80	; 128
    272a:	8c 93       	st	X, r24
	Clear_Bit(ADC_ADCSRA,ADC_ADIE);
    272c:	a6 e2       	ldi	r26, 0x26	; 38
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e6 e2       	ldi	r30, 0x26	; 38
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	87 7f       	andi	r24, 0xF7	; 247
    2738:	8c 93       	st	X, r24

	Set_Bit(ADC_ADCSRA,ADC_ADPS0);
    273a:	a6 e2       	ldi	r26, 0x26	; 38
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e6 e2       	ldi	r30, 0x26	; 38
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	81 60       	ori	r24, 0x01	; 1
    2746:	8c 93       	st	X, r24
	Set_Bit(ADC_ADCSRA,ADC_ADPS1);
    2748:	a6 e2       	ldi	r26, 0x26	; 38
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e6 e2       	ldi	r30, 0x26	; 38
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	82 60       	ori	r24, 0x02	; 2
    2754:	8c 93       	st	X, r24
	Clear_Bit(ADC_ADCSRA,ADC_ADPS2);
    2756:	a6 e2       	ldi	r26, 0x26	; 38
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e6 e2       	ldi	r30, 0x26	; 38
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8b 7f       	andi	r24, 0xFB	; 251
    2762:	8c 93       	st	X, r24

}
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <ADC_u16StartConversion>:
u16 ADC_u16StartConversion(u8 Channel)
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	89 83       	std	Y+1, r24	; 0x01

	Channel   &= 0x07;
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	87 70       	andi	r24, 0x07	; 7
    277a:	89 83       	std	Y+1, r24	; 0x01
	ADC_ADMUX &= 0xE0;
    277c:	a7 e2       	ldi	r26, 0x27	; 39
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e7 e2       	ldi	r30, 0x27	; 39
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	80 7e       	andi	r24, 0xE0	; 224
    2788:	8c 93       	st	X, r24
	ADC_ADMUX |= Channel;
    278a:	a7 e2       	ldi	r26, 0x27	; 39
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e7 e2       	ldi	r30, 0x27	; 39
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	90 81       	ld	r25, Z
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	89 2b       	or	r24, r25
    2798:	8c 93       	st	X, r24

	Set_Bit(ADC_ADCSRA,ADC_ADSC);
    279a:	a6 e2       	ldi	r26, 0x26	; 38
    279c:	b0 e0       	ldi	r27, 0x00	; 0
    279e:	e6 e2       	ldi	r30, 0x26	; 38
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	80 81       	ld	r24, Z
    27a4:	80 64       	ori	r24, 0x40	; 64
    27a6:	8c 93       	st	X, r24

	while(Get_Bit(ADC_ADCSRA,ADC_ADIF) == 0);
    27a8:	e6 e2       	ldi	r30, 0x26	; 38
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	82 95       	swap	r24
    27b0:	8f 70       	andi	r24, 0x0F	; 15
    27b2:	88 2f       	mov	r24, r24
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	81 70       	andi	r24, 0x01	; 1
    27b8:	90 70       	andi	r25, 0x00	; 0
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	a9 f3       	breq	.-22     	; 0x27a8 <ADC_u16StartConversion+0x3e>
	Set_Bit(ADC_ADCSRA,ADC_ADIF);
    27be:	a6 e2       	ldi	r26, 0x26	; 38
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e6 e2       	ldi	r30, 0x26	; 38
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	80 61       	ori	r24, 0x10	; 16
    27ca:	8c 93       	st	X, r24

	return ADC_DATA;
    27cc:	e4 e2       	ldi	r30, 0x24	; 36
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
}
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <Stepper_VoidInit>:

#include "../Header/Stepper_Interface.h"
#include <util/delay.h>

void Stepper_VoidInit(void)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
DIO_u8SetPinDir(Stepper_Group,Stepper_Blue,Output);
    27e4:	84 e0       	ldi	r24, 0x04	; 4
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
DIO_u8SetPinDir(Stepper_Group,Stepper_Pink,Output);
    27ee:	84 e0       	ldi	r24, 0x04	; 4
    27f0:	61 e0       	ldi	r22, 0x01	; 1
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
DIO_u8SetPinDir(Stepper_Group,Stepper_Yellow,Output);
    27f8:	84 e0       	ldi	r24, 0x04	; 4
    27fa:	62 e0       	ldi	r22, 0x02	; 2
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
DIO_u8SetPinDir(Stepper_Group,Stepper_Orange,Output);
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	63 e0       	ldi	r22, 0x03	; 3
    2806:	41 e0       	ldi	r20, 0x01	; 1
    2808:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
}
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <Stepper_VoidOnCW>:

void Stepper_VoidOnCW(u16 Local_anagle)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
    281a:	c0 54       	subi	r28, 0x40	; 64
    281c:	d0 40       	sbci	r29, 0x00	; 0
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	fe 01       	movw	r30, r28
    282a:	ff 96       	adiw	r30, 0x3f	; 63
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
	u16 Local_NoOfSteps = Local_anagle / FullStridAnagle ;
    2830:	fe 01       	movw	r30, r28
    2832:	ff 96       	adiw	r30, 0x3f	; 63
    2834:	80 81       	ld	r24, Z
    2836:	91 81       	ldd	r25, Z+1	; 0x01
    2838:	cc 01       	movw	r24, r24
    283a:	a0 e0       	ldi	r26, 0x00	; 0
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	23 eb       	ldi	r18, 0xB3	; 179
    2850:	3a ee       	ldi	r19, 0xEA	; 234
    2852:	43 e3       	ldi	r20, 0x33	; 51
    2854:	5e e3       	ldi	r21, 0x3E	; 62
    2856:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    285a:	dc 01       	movw	r26, r24
    285c:	cb 01       	movw	r24, r22
    285e:	bc 01       	movw	r22, r24
    2860:	cd 01       	movw	r24, r26
    2862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	9e af       	std	Y+62, r25	; 0x3e
    286c:	8d af       	std	Y+61, r24	; 0x3d
	u16 Local_NoOfIetration = Local_NoOfSteps / 4 ;
    286e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2870:	9e ad       	ldd	r25, Y+62	; 0x3e
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	96 95       	lsr	r25
    2878:	87 95       	ror	r24
    287a:	9c af       	std	Y+60, r25	; 0x3c
    287c:	8b af       	std	Y+59, r24	; 0x3b
	u16 Local_counter ;

	for (Local_counter = 0 ; Local_counter < Local_NoOfIetration; Local_counter++)
    287e:	1a ae       	std	Y+58, r1	; 0x3a
    2880:	19 ae       	std	Y+57, r1	; 0x39
    2882:	1d c2       	rjmp	.+1082   	; 0x2cbe <Stepper_VoidOnCW+0x4ac>
	{
		/*Step-1*/
		DIO_u8SetPinValue(Stepper_Group,Stepper_Blue,Low);
    2884:	84 e0       	ldi	r24, 0x04	; 4
    2886:	60 e0       	ldi	r22, 0x00	; 0
    2888:	40 e0       	ldi	r20, 0x00	; 0
    288a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Pink,High);
    288e:	84 e0       	ldi	r24, 0x04	; 4
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Yellow,High);
    2898:	84 e0       	ldi	r24, 0x04	; 4
    289a:	62 e0       	ldi	r22, 0x02	; 2
    289c:	41 e0       	ldi	r20, 0x01	; 1
    289e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Orange,High);
    28a2:	84 e0       	ldi	r24, 0x04	; 4
    28a4:	63 e0       	ldi	r22, 0x03	; 3
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	a0 e2       	ldi	r26, 0x20	; 32
    28b2:	b1 e4       	ldi	r27, 0x41	; 65
    28b4:	8d ab       	std	Y+53, r24	; 0x35
    28b6:	9e ab       	std	Y+54, r25	; 0x36
    28b8:	af ab       	std	Y+55, r26	; 0x37
    28ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28bc:	6d a9       	ldd	r22, Y+53	; 0x35
    28be:	7e a9       	ldd	r23, Y+54	; 0x36
    28c0:	8f a9       	ldd	r24, Y+55	; 0x37
    28c2:	98 ad       	ldd	r25, Y+56	; 0x38
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	4a ef       	ldi	r20, 0xFA	; 250
    28ca:	54 e4       	ldi	r21, 0x44	; 68
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	89 ab       	std	Y+49, r24	; 0x31
    28d6:	9a ab       	std	Y+50, r25	; 0x32
    28d8:	ab ab       	std	Y+51, r26	; 0x33
    28da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28dc:	69 a9       	ldd	r22, Y+49	; 0x31
    28de:	7a a9       	ldd	r23, Y+50	; 0x32
    28e0:	8b a9       	ldd	r24, Y+51	; 0x33
    28e2:	9c a9       	ldd	r25, Y+52	; 0x34
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	40 e8       	ldi	r20, 0x80	; 128
    28ea:	5f e3       	ldi	r21, 0x3F	; 63
    28ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f0:	88 23       	and	r24, r24
    28f2:	2c f4       	brge	.+10     	; 0x28fe <Stepper_VoidOnCW+0xec>
		__ticks = 1;
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
    28fc:	3f c0       	rjmp	.+126    	; 0x297c <Stepper_VoidOnCW+0x16a>
	else if (__tmp > 65535)
    28fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2900:	7a a9       	ldd	r23, Y+50	; 0x32
    2902:	8b a9       	ldd	r24, Y+51	; 0x33
    2904:	9c a9       	ldd	r25, Y+52	; 0x34
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	3f ef       	ldi	r19, 0xFF	; 255
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	57 e4       	ldi	r21, 0x47	; 71
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	4c f5       	brge	.+82     	; 0x2968 <Stepper_VoidOnCW+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2916:	6d a9       	ldd	r22, Y+53	; 0x35
    2918:	7e a9       	ldd	r23, Y+54	; 0x36
    291a:	8f a9       	ldd	r24, Y+55	; 0x37
    291c:	98 ad       	ldd	r25, Y+56	; 0x38
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e2       	ldi	r20, 0x20	; 32
    2924:	51 e4       	ldi	r21, 0x41	; 65
    2926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	98 ab       	std	Y+48, r25	; 0x30
    293c:	8f a7       	std	Y+47, r24	; 0x2f
    293e:	0f c0       	rjmp	.+30     	; 0x295e <Stepper_VoidOnCW+0x14c>
    2940:	88 ec       	ldi	r24, 0xC8	; 200
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9e a7       	std	Y+46, r25	; 0x2e
    2946:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2948:	8d a5       	ldd	r24, Y+45	; 0x2d
    294a:	9e a5       	ldd	r25, Y+46	; 0x2e
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <Stepper_VoidOnCW+0x13a>
    2950:	9e a7       	std	Y+46, r25	; 0x2e
    2952:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2954:	8f a5       	ldd	r24, Y+47	; 0x2f
    2956:	98 a9       	ldd	r25, Y+48	; 0x30
    2958:	01 97       	sbiw	r24, 0x01	; 1
    295a:	98 ab       	std	Y+48, r25	; 0x30
    295c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2960:	98 a9       	ldd	r25, Y+48	; 0x30
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	69 f7       	brne	.-38     	; 0x2940 <Stepper_VoidOnCW+0x12e>
    2966:	14 c0       	rjmp	.+40     	; 0x2990 <Stepper_VoidOnCW+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2968:	69 a9       	ldd	r22, Y+49	; 0x31
    296a:	7a a9       	ldd	r23, Y+50	; 0x32
    296c:	8b a9       	ldd	r24, Y+51	; 0x33
    296e:	9c a9       	ldd	r25, Y+52	; 0x34
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	98 ab       	std	Y+48, r25	; 0x30
    297a:	8f a7       	std	Y+47, r24	; 0x2f
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	9c a7       	std	Y+44, r25	; 0x2c
    2982:	8b a7       	std	Y+43, r24	; 0x2b
    2984:	8b a5       	ldd	r24, Y+43	; 0x2b
    2986:	9c a5       	ldd	r25, Y+44	; 0x2c
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	f1 f7       	brne	.-4      	; 0x2988 <Stepper_VoidOnCW+0x176>
    298c:	9c a7       	std	Y+44, r25	; 0x2c
    298e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(Stepper_Delay);
		/*Step-2*/
		DIO_u8SetPinValue(Stepper_Group,Stepper_Blue,High);
    2990:	84 e0       	ldi	r24, 0x04	; 4
    2992:	60 e0       	ldi	r22, 0x00	; 0
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Pink,Low);
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Yellow,High);
    29a4:	84 e0       	ldi	r24, 0x04	; 4
    29a6:	62 e0       	ldi	r22, 0x02	; 2
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Orange,High);
    29ae:	84 e0       	ldi	r24, 0x04	; 4
    29b0:	63 e0       	ldi	r22, 0x03	; 3
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	a0 e2       	ldi	r26, 0x20	; 32
    29be:	b1 e4       	ldi	r27, 0x41	; 65
    29c0:	8f a3       	std	Y+39, r24	; 0x27
    29c2:	98 a7       	std	Y+40, r25	; 0x28
    29c4:	a9 a7       	std	Y+41, r26	; 0x29
    29c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c8:	6f a1       	ldd	r22, Y+39	; 0x27
    29ca:	78 a5       	ldd	r23, Y+40	; 0x28
    29cc:	89 a5       	ldd	r24, Y+41	; 0x29
    29ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a ef       	ldi	r20, 0xFA	; 250
    29d6:	54 e4       	ldi	r21, 0x44	; 68
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8b a3       	std	Y+35, r24	; 0x23
    29e2:	9c a3       	std	Y+36, r25	; 0x24
    29e4:	ad a3       	std	Y+37, r26	; 0x25
    29e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29e8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ea:	7c a1       	ldd	r23, Y+36	; 0x24
    29ec:	8d a1       	ldd	r24, Y+37	; 0x25
    29ee:	9e a1       	ldd	r25, Y+38	; 0x26
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	2c f4       	brge	.+10     	; 0x2a0a <Stepper_VoidOnCW+0x1f8>
		__ticks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9a a3       	std	Y+34, r25	; 0x22
    2a06:	89 a3       	std	Y+33, r24	; 0x21
    2a08:	3f c0       	rjmp	.+126    	; 0x2a88 <Stepper_VoidOnCW+0x276>
	else if (__tmp > 65535)
    2a0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a10:	9e a1       	ldd	r25, Y+38	; 0x26
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	3f ef       	ldi	r19, 0xFF	; 255
    2a16:	4f e7       	ldi	r20, 0x7F	; 127
    2a18:	57 e4       	ldi	r21, 0x47	; 71
    2a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1e:	18 16       	cp	r1, r24
    2a20:	4c f5       	brge	.+82     	; 0x2a74 <Stepper_VoidOnCW+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a22:	6f a1       	ldd	r22, Y+39	; 0x27
    2a24:	78 a5       	ldd	r23, Y+40	; 0x28
    2a26:	89 a5       	ldd	r24, Y+41	; 0x29
    2a28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	bc 01       	movw	r22, r24
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	9a a3       	std	Y+34, r25	; 0x22
    2a48:	89 a3       	std	Y+33, r24	; 0x21
    2a4a:	0f c0       	rjmp	.+30     	; 0x2a6a <Stepper_VoidOnCW+0x258>
    2a4c:	88 ec       	ldi	r24, 0xC8	; 200
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	98 a3       	std	Y+32, r25	; 0x20
    2a52:	8f 8f       	std	Y+31, r24	; 0x1f
    2a54:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a56:	98 a1       	ldd	r25, Y+32	; 0x20
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <Stepper_VoidOnCW+0x246>
    2a5c:	98 a3       	std	Y+32, r25	; 0x20
    2a5e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a60:	89 a1       	ldd	r24, Y+33	; 0x21
    2a62:	9a a1       	ldd	r25, Y+34	; 0x22
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	9a a3       	std	Y+34, r25	; 0x22
    2a68:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	69 f7       	brne	.-38     	; 0x2a4c <Stepper_VoidOnCW+0x23a>
    2a72:	14 c0       	rjmp	.+40     	; 0x2a9c <Stepper_VoidOnCW+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a74:	6b a1       	ldd	r22, Y+35	; 0x23
    2a76:	7c a1       	ldd	r23, Y+36	; 0x24
    2a78:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9a a3       	std	Y+34, r25	; 0x22
    2a86:	89 a3       	std	Y+33, r24	; 0x21
    2a88:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a8e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a92:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a94:	01 97       	sbiw	r24, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <Stepper_VoidOnCW+0x282>
    2a98:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(Stepper_Delay);
		/*Step-3*/
		DIO_u8SetPinValue(Stepper_Group,Stepper_Blue,High);
    2a9c:	84 e0       	ldi	r24, 0x04	; 4
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	41 e0       	ldi	r20, 0x01	; 1
    2aa2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Pink,High);
    2aa6:	84 e0       	ldi	r24, 0x04	; 4
    2aa8:	61 e0       	ldi	r22, 0x01	; 1
    2aaa:	41 e0       	ldi	r20, 0x01	; 1
    2aac:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Yellow,Low);
    2ab0:	84 e0       	ldi	r24, 0x04	; 4
    2ab2:	62 e0       	ldi	r22, 0x02	; 2
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Orange,High);
    2aba:	84 e0       	ldi	r24, 0x04	; 4
    2abc:	63 e0       	ldi	r22, 0x03	; 3
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e2       	ldi	r26, 0x20	; 32
    2aca:	b1 e4       	ldi	r27, 0x41	; 65
    2acc:	89 8f       	std	Y+25, r24	; 0x19
    2ace:	9a 8f       	std	Y+26, r25	; 0x1a
    2ad0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ad2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a ef       	ldi	r20, 0xFA	; 250
    2ae2:	54 e4       	ldi	r21, 0x44	; 68
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8d 8b       	std	Y+21, r24	; 0x15
    2aee:	9e 8b       	std	Y+22, r25	; 0x16
    2af0:	af 8b       	std	Y+23, r26	; 0x17
    2af2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2af4:	6d 89       	ldd	r22, Y+21	; 0x15
    2af6:	7e 89       	ldd	r23, Y+22	; 0x16
    2af8:	8f 89       	ldd	r24, Y+23	; 0x17
    2afa:	98 8d       	ldd	r25, Y+24	; 0x18
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <Stepper_VoidOnCW+0x304>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
    2b12:	8b 8b       	std	Y+19, r24	; 0x13
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <Stepper_VoidOnCW+0x382>
	else if (__tmp > 65535)
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <Stepper_VoidOnCW+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9c 8b       	std	Y+20, r25	; 0x14
    2b54:	8b 8b       	std	Y+19, r24	; 0x13
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <Stepper_VoidOnCW+0x364>
    2b58:	88 ec       	ldi	r24, 0xC8	; 200
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	9a 8b       	std	Y+18, r25	; 0x12
    2b5e:	89 8b       	std	Y+17, r24	; 0x11
    2b60:	89 89       	ldd	r24, Y+17	; 0x11
    2b62:	9a 89       	ldd	r25, Y+18	; 0x12
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <Stepper_VoidOnCW+0x352>
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	9c 8b       	std	Y+20, r25	; 0x14
    2b74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8b 89       	ldd	r24, Y+19	; 0x13
    2b78:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <Stepper_VoidOnCW+0x346>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <Stepper_VoidOnCW+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	6d 89       	ldd	r22, Y+21	; 0x15
    2b82:	7e 89       	ldd	r23, Y+22	; 0x16
    2b84:	8f 89       	ldd	r24, Y+23	; 0x17
    2b86:	98 8d       	ldd	r25, Y+24	; 0x18
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	98 8b       	std	Y+16, r25	; 0x10
    2b9a:	8f 87       	std	Y+15, r24	; 0x0f
    2b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9e:	98 89       	ldd	r25, Y+16	; 0x10
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <Stepper_VoidOnCW+0x38e>
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(Stepper_Delay);
		/*Step-4*/
		DIO_u8SetPinValue(Stepper_Group,Stepper_Blue,High);
    2ba8:	84 e0       	ldi	r24, 0x04	; 4
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Pink,High);
    2bb2:	84 e0       	ldi	r24, 0x04	; 4
    2bb4:	61 e0       	ldi	r22, 0x01	; 1
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Yellow,High);
    2bbc:	84 e0       	ldi	r24, 0x04	; 4
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Orange,Low);
    2bc6:	84 e0       	ldi	r24, 0x04	; 4
    2bc8:	63 e0       	ldi	r22, 0x03	; 3
    2bca:	40 e0       	ldi	r20, 0x00	; 0
    2bcc:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	a0 e2       	ldi	r26, 0x20	; 32
    2bd6:	b1 e4       	ldi	r27, 0x41	; 65
    2bd8:	8b 87       	std	Y+11, r24	; 0x0b
    2bda:	9c 87       	std	Y+12, r25	; 0x0c
    2bdc:	ad 87       	std	Y+13, r26	; 0x0d
    2bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	4a ef       	ldi	r20, 0xFA	; 250
    2bee:	54 e4       	ldi	r21, 0x44	; 68
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	8f 83       	std	Y+7, r24	; 0x07
    2bfa:	98 87       	std	Y+8, r25	; 0x08
    2bfc:	a9 87       	std	Y+9, r26	; 0x09
    2bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c00:	6f 81       	ldd	r22, Y+7	; 0x07
    2c02:	78 85       	ldd	r23, Y+8	; 0x08
    2c04:	89 85       	ldd	r24, Y+9	; 0x09
    2c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e8       	ldi	r20, 0x80	; 128
    2c0e:	5f e3       	ldi	r21, 0x3F	; 63
    2c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c14:	88 23       	and	r24, r24
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <Stepper_VoidOnCW+0x410>
		__ticks = 1;
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	9e 83       	std	Y+6, r25	; 0x06
    2c1e:	8d 83       	std	Y+5, r24	; 0x05
    2c20:	3f c0       	rjmp	.+126    	; 0x2ca0 <Stepper_VoidOnCW+0x48e>
	else if (__tmp > 65535)
    2c22:	6f 81       	ldd	r22, Y+7	; 0x07
    2c24:	78 85       	ldd	r23, Y+8	; 0x08
    2c26:	89 85       	ldd	r24, Y+9	; 0x09
    2c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	3f ef       	ldi	r19, 0xFF	; 255
    2c2e:	4f e7       	ldi	r20, 0x7F	; 127
    2c30:	57 e4       	ldi	r21, 0x47	; 71
    2c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c36:	18 16       	cp	r1, r24
    2c38:	4c f5       	brge	.+82     	; 0x2c8c <Stepper_VoidOnCW+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	51 e4       	ldi	r21, 0x41	; 65
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	9e 83       	std	Y+6, r25	; 0x06
    2c60:	8d 83       	std	Y+5, r24	; 0x05
    2c62:	0f c0       	rjmp	.+30     	; 0x2c82 <Stepper_VoidOnCW+0x470>
    2c64:	88 ec       	ldi	r24, 0xC8	; 200
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
    2c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <Stepper_VoidOnCW+0x45e>
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	9e 83       	std	Y+6, r25	; 0x06
    2c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c82:	8d 81       	ldd	r24, Y+5	; 0x05
    2c84:	9e 81       	ldd	r25, Y+6	; 0x06
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	69 f7       	brne	.-38     	; 0x2c64 <Stepper_VoidOnCW+0x452>
    2c8a:	14 c0       	rjmp	.+40     	; 0x2cb4 <Stepper_VoidOnCW+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8e:	78 85       	ldd	r23, Y+8	; 0x08
    2c90:	89 85       	ldd	r24, Y+9	; 0x09
    2c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	9a 81       	ldd	r25, Y+2	; 0x02
    2cac:	01 97       	sbiw	r24, 0x01	; 1
    2cae:	f1 f7       	brne	.-4      	; 0x2cac <Stepper_VoidOnCW+0x49a>
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
{
	u16 Local_NoOfSteps = Local_anagle / FullStridAnagle ;
	u16 Local_NoOfIetration = Local_NoOfSteps / 4 ;
	u16 Local_counter ;

	for (Local_counter = 0 ; Local_counter < Local_NoOfIetration; Local_counter++)
    2cb4:	89 ad       	ldd	r24, Y+57	; 0x39
    2cb6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	9a af       	std	Y+58, r25	; 0x3a
    2cbc:	89 af       	std	Y+57, r24	; 0x39
    2cbe:	29 ad       	ldd	r18, Y+57	; 0x39
    2cc0:	3a ad       	ldd	r19, Y+58	; 0x3a
    2cc2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2cc4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2cc6:	28 17       	cp	r18, r24
    2cc8:	39 07       	cpc	r19, r25
    2cca:	08 f4       	brcc	.+2      	; 0x2cce <Stepper_VoidOnCW+0x4bc>
    2ccc:	db cd       	rjmp	.-1098   	; 0x2884 <Stepper_VoidOnCW+0x72>
		DIO_u8SetPinValue(Stepper_Group,Stepper_Pink,High);
		DIO_u8SetPinValue(Stepper_Group,Stepper_Yellow,High);
		DIO_u8SetPinValue(Stepper_Group,Stepper_Orange,Low);
		_delay_ms(Stepper_Delay);
	}
}
    2cce:	c0 5c       	subi	r28, 0xC0	; 192
    2cd0:	df 4f       	sbci	r29, 0xFF	; 255
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	f8 94       	cli
    2cd6:	de bf       	out	0x3e, r29	; 62
    2cd8:	0f be       	out	0x3f, r0	; 63
    2cda:	cd bf       	out	0x3d, r28	; 61
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <Stepper_VoidStop>:
void Stepper_VoidStop(void)
{
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62

}
    2cea:	cf 91       	pop	r28
    2cec:	df 91       	pop	r29
    2cee:	08 95       	ret

00002cf0 <SevSeg_voidSingleInit>:
#include "../Header/SevSeg_Config.h"
#include "../Header/Sevseg_Interface.h"


void SevSeg_voidSingleInit()
{
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDir(Sev_DirC, DIO_GroupOut);
    2cf8:	83 e0       	ldi	r24, 0x03	; 3
    2cfa:	6f ef       	ldi	r22, 0xFF	; 255
    2cfc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <SevSeg_voidDoubleInit>:


void SevSeg_voidDoubleInit()
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDir(Sev_DirC, DIO_GroupOut);
    2d0e:	83 e0       	ldi	r24, 0x03	; 3
    2d10:	6f ef       	ldi	r22, 0xFF	; 255
    2d12:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
	DIO_u8SetPortDir(Sev_DirD, DIO_GroupOut);
    2d16:	84 e0       	ldi	r24, 0x04	; 4
    2d18:	6f ef       	ldi	r22, 0xFF	; 255
    2d1a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
}
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <SevSeg_voidDisplayNumber>:

void SevSeg_voidDisplayNumber(u8 number)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	60 97       	sbiw	r28, 0x10	; 16
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	8b 87       	std	Y+11, r24	; 0x0b
	u8 Sev_arr[] = Sev_Array;
    2d3a:	ce 01       	movw	r24, r28
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	9d 87       	std	Y+13, r25	; 0x0d
    2d40:	8c 87       	std	Y+12, r24	; 0x0c
    2d42:	e0 e7       	ldi	r30, 0x70	; 112
    2d44:	f1 e0       	ldi	r31, 0x01	; 1
    2d46:	ff 87       	std	Y+15, r31	; 0x0f
    2d48:	ee 87       	std	Y+14, r30	; 0x0e
    2d4a:	fa e0       	ldi	r31, 0x0A	; 10
    2d4c:	f8 8b       	std	Y+16, r31	; 0x10
    2d4e:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d50:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d52:	00 80       	ld	r0, Z
    2d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	9f 87       	std	Y+15, r25	; 0x0f
    2d5c:	8e 87       	std	Y+14, r24	; 0x0e
    2d5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d60:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d62:	00 82       	st	Z, r0
    2d64:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d66:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d68:	01 96       	adiw	r24, 0x01	; 1
    2d6a:	9d 87       	std	Y+13, r25	; 0x0d
    2d6c:	8c 87       	std	Y+12, r24	; 0x0c
    2d6e:	98 89       	ldd	r25, Y+16	; 0x10
    2d70:	91 50       	subi	r25, 0x01	; 1
    2d72:	98 8b       	std	Y+16, r25	; 0x10
    2d74:	e8 89       	ldd	r30, Y+16	; 0x10
    2d76:	ee 23       	and	r30, r30
    2d78:	51 f7       	brne	.-44     	; 0x2d4e <SevSeg_voidDisplayNumber+0x2a>

	DIO_u8SetPortValue(Sev_DirC,Sev_arr[number]);
    2d7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	ce 01       	movw	r24, r28
    2d82:	01 96       	adiw	r24, 0x01	; 1
    2d84:	fc 01       	movw	r30, r24
    2d86:	e2 0f       	add	r30, r18
    2d88:	f3 1f       	adc	r31, r19
    2d8a:	90 81       	ld	r25, Z
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	69 2f       	mov	r22, r25
    2d90:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
}
    2d94:	60 96       	adiw	r28, 0x10	; 16
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <SevSeg_voidSingleCounter>:


void SevSeg_voidSingleCounter()
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	6f 97       	sbiw	r28, 0x1f	; 31
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	f8 94       	cli
    2db4:	de bf       	out	0x3e, r29	; 62
    2db6:	0f be       	out	0x3f, r0	; 63
    2db8:	cd bf       	out	0x3d, r28	; 61
	u8 Sev_arr[] = Sev_Array;
    2dba:	ce 01       	movw	r24, r28
    2dbc:	41 96       	adiw	r24, 0x11	; 17
    2dbe:	9c 8f       	std	Y+28, r25	; 0x1c
    2dc0:	8b 8f       	std	Y+27, r24	; 0x1b
    2dc2:	ea e7       	ldi	r30, 0x7A	; 122
    2dc4:	f1 e0       	ldi	r31, 0x01	; 1
    2dc6:	fe 8f       	std	Y+30, r31	; 0x1e
    2dc8:	ed 8f       	std	Y+29, r30	; 0x1d
    2dca:	fa e0       	ldi	r31, 0x0A	; 10
    2dcc:	ff 8f       	std	Y+31, r31	; 0x1f
    2dce:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2dd0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2dd2:	00 80       	ld	r0, Z
    2dd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	9e 8f       	std	Y+30, r25	; 0x1e
    2ddc:	8d 8f       	std	Y+29, r24	; 0x1d
    2dde:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2de0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2de2:	00 82       	st	Z, r0
    2de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de8:	01 96       	adiw	r24, 0x01	; 1
    2dea:	9c 8f       	std	Y+28, r25	; 0x1c
    2dec:	8b 8f       	std	Y+27, r24	; 0x1b
    2dee:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2df0:	91 50       	subi	r25, 0x01	; 1
    2df2:	9f 8f       	std	Y+31, r25	; 0x1f
    2df4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2df6:	ee 23       	and	r30, r30
    2df8:	51 f7       	brne	.-44     	; 0x2dce <SevSeg_voidSingleCounter+0x28>
	u16 i;

	for(i=0; i<10; i++)
    2dfa:	18 8a       	std	Y+16, r1	; 0x10
    2dfc:	1f 86       	std	Y+15, r1	; 0x0f
    2dfe:	83 c0       	rjmp	.+262    	; 0x2f06 <SevSeg_voidSingleCounter+0x160>
	{
		DIO_u8SetPortValue(Sev_DirC,Sev_arr[i]);
    2e00:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e02:	38 89       	ldd	r19, Y+16	; 0x10
    2e04:	ce 01       	movw	r24, r28
    2e06:	41 96       	adiw	r24, 0x11	; 17
    2e08:	fc 01       	movw	r30, r24
    2e0a:	e2 0f       	add	r30, r18
    2e0c:	f3 1f       	adc	r31, r19
    2e0e:	90 81       	ld	r25, Z
    2e10:	83 e0       	ldi	r24, 0x03	; 3
    2e12:	69 2f       	mov	r22, r25
    2e14:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	aa e7       	ldi	r26, 0x7A	; 122
    2e1e:	b4 e4       	ldi	r27, 0x44	; 68
    2e20:	8b 87       	std	Y+11, r24	; 0x0b
    2e22:	9c 87       	std	Y+12, r25	; 0x0c
    2e24:	ad 87       	std	Y+13, r26	; 0x0d
    2e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4a ef       	ldi	r20, 0xFA	; 250
    2e36:	54 e4       	ldi	r21, 0x44	; 68
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	8f 83       	std	Y+7, r24	; 0x07
    2e42:	98 87       	std	Y+8, r25	; 0x08
    2e44:	a9 87       	std	Y+9, r26	; 0x09
    2e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e48:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4a:	78 85       	ldd	r23, Y+8	; 0x08
    2e4c:	89 85       	ldd	r24, Y+9	; 0x09
    2e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e5c:	88 23       	and	r24, r24
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <SevSeg_voidSingleCounter+0xc4>
		__ticks = 1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
    2e68:	3f c0       	rjmp	.+126    	; 0x2ee8 <SevSeg_voidSingleCounter+0x142>
	else if (__tmp > 65535)
    2e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6c:	78 85       	ldd	r23, Y+8	; 0x08
    2e6e:	89 85       	ldd	r24, Y+9	; 0x09
    2e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7e:	18 16       	cp	r1, r24
    2e80:	4c f5       	brge	.+82     	; 0x2ed4 <SevSeg_voidSingleCounter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <SevSeg_voidSingleCounter+0x124>
    2eac:	88 ec       	ldi	r24, 0xC8	; 200
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <SevSeg_voidSingleCounter+0x112>
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	69 f7       	brne	.-38     	; 0x2eac <SevSeg_voidSingleCounter+0x106>
    2ed2:	14 c0       	rjmp	.+40     	; 0x2efc <SevSeg_voidSingleCounter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <SevSeg_voidSingleCounter+0x14e>
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
void SevSeg_voidSingleCounter()
{
	u8 Sev_arr[] = Sev_Array;
	u16 i;

	for(i=0; i<10; i++)
    2efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2efe:	98 89       	ldd	r25, Y+16	; 0x10
    2f00:	01 96       	adiw	r24, 0x01	; 1
    2f02:	98 8b       	std	Y+16, r25	; 0x10
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
    2f06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f08:	98 89       	ldd	r25, Y+16	; 0x10
    2f0a:	8a 30       	cpi	r24, 0x0A	; 10
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	08 f4       	brcc	.+2      	; 0x2f12 <SevSeg_voidSingleCounter+0x16c>
    2f10:	77 cf       	rjmp	.-274    	; 0x2e00 <SevSeg_voidSingleCounter+0x5a>
	{
		DIO_u8SetPortValue(Sev_DirC,Sev_arr[i]);
		_delay_ms(Sev_Delay);
	}
}
    2f12:	6f 96       	adiw	r28, 0x1f	; 31
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
    2f1e:	cf 91       	pop	r28
    2f20:	df 91       	pop	r29
    2f22:	08 95       	ret

00002f24 <SevSeg_voidDisplayAll>:



void SevSeg_voidDisplayAll()
{
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	a1 97       	sbiw	r28, 0x21	; 33
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
	u8 Sev_arr[] = Sev_Array;
    2f38:	ce 01       	movw	r24, r28
    2f3a:	43 96       	adiw	r24, 0x13	; 19
    2f3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f3e:	8d 8f       	std	Y+29, r24	; 0x1d
    2f40:	e4 e8       	ldi	r30, 0x84	; 132
    2f42:	f1 e0       	ldi	r31, 0x01	; 1
    2f44:	f8 a3       	std	Y+32, r31	; 0x20
    2f46:	ef 8f       	std	Y+31, r30	; 0x1f
    2f48:	fa e0       	ldi	r31, 0x0A	; 10
    2f4a:	f9 a3       	std	Y+33, r31	; 0x21
    2f4c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2f4e:	f8 a1       	ldd	r31, Y+32	; 0x20
    2f50:	00 80       	ld	r0, Z
    2f52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f54:	98 a1       	ldd	r25, Y+32	; 0x20
    2f56:	01 96       	adiw	r24, 0x01	; 1
    2f58:	98 a3       	std	Y+32, r25	; 0x20
    2f5a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f5c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2f5e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2f60:	00 82       	st	Z, r0
    2f62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f64:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f66:	01 96       	adiw	r24, 0x01	; 1
    2f68:	9e 8f       	std	Y+30, r25	; 0x1e
    2f6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f6c:	99 a1       	ldd	r25, Y+33	; 0x21
    2f6e:	91 50       	subi	r25, 0x01	; 1
    2f70:	99 a3       	std	Y+33, r25	; 0x21
    2f72:	e9 a1       	ldd	r30, Y+33	; 0x21
    2f74:	ee 23       	and	r30, r30
    2f76:	51 f7       	brne	.-44     	; 0x2f4c <SevSeg_voidDisplayAll+0x28>
	u16 i;
	u16 j;

	for(i=0; i<10; i++)
    2f78:	1a 8a       	std	Y+18, r1	; 0x12
    2f7a:	19 8a       	std	Y+17, r1	; 0x11
    2f7c:	9d c0       	rjmp	.+314    	; 0x30b8 <SevSeg_voidDisplayAll+0x194>
	{
		DIO_u8SetPortValue(Sev_DirD,Sev_arr[i]);
    2f7e:	29 89       	ldd	r18, Y+17	; 0x11
    2f80:	3a 89       	ldd	r19, Y+18	; 0x12
    2f82:	ce 01       	movw	r24, r28
    2f84:	43 96       	adiw	r24, 0x13	; 19
    2f86:	fc 01       	movw	r30, r24
    2f88:	e2 0f       	add	r30, r18
    2f8a:	f3 1f       	adc	r31, r19
    2f8c:	90 81       	ld	r25, Z
    2f8e:	84 e0       	ldi	r24, 0x04	; 4
    2f90:	69 2f       	mov	r22, r25
    2f92:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>

		for(j=0; j<10; j++)
    2f96:	18 8a       	std	Y+16, r1	; 0x10
    2f98:	1f 86       	std	Y+15, r1	; 0x0f
    2f9a:	83 c0       	rjmp	.+262    	; 0x30a2 <SevSeg_voidDisplayAll+0x17e>
		{
			DIO_u8SetPortValue(Sev_DirC,Sev_arr[j]);
    2f9c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2f9e:	38 89       	ldd	r19, Y+16	; 0x10
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	43 96       	adiw	r24, 0x13	; 19
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	e2 0f       	add	r30, r18
    2fa8:	f3 1f       	adc	r31, r19
    2faa:	90 81       	ld	r25, Z
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	69 2f       	mov	r22, r25
    2fb0:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	aa e7       	ldi	r26, 0x7A	; 122
    2fba:	b4 e4       	ldi	r27, 0x44	; 68
    2fbc:	8b 87       	std	Y+11, r24	; 0x0b
    2fbe:	9c 87       	std	Y+12, r25	; 0x0c
    2fc0:	ad 87       	std	Y+13, r26	; 0x0d
    2fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	4a ef       	ldi	r20, 0xFA	; 250
    2fd2:	54 e4       	ldi	r21, 0x44	; 68
    2fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	8f 83       	std	Y+7, r24	; 0x07
    2fde:	98 87       	std	Y+8, r25	; 0x08
    2fe0:	a9 87       	std	Y+9, r26	; 0x09
    2fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe6:	78 85       	ldd	r23, Y+8	; 0x08
    2fe8:	89 85       	ldd	r24, Y+9	; 0x09
    2fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e8       	ldi	r20, 0x80	; 128
    2ff2:	5f e3       	ldi	r21, 0x3F	; 63
    2ff4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff8:	88 23       	and	r24, r24
    2ffa:	2c f4       	brge	.+10     	; 0x3006 <SevSeg_voidDisplayAll+0xe2>
		__ticks = 1;
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	9e 83       	std	Y+6, r25	; 0x06
    3002:	8d 83       	std	Y+5, r24	; 0x05
    3004:	3f c0       	rjmp	.+126    	; 0x3084 <SevSeg_voidDisplayAll+0x160>
	else if (__tmp > 65535)
    3006:	6f 81       	ldd	r22, Y+7	; 0x07
    3008:	78 85       	ldd	r23, Y+8	; 0x08
    300a:	89 85       	ldd	r24, Y+9	; 0x09
    300c:	9a 85       	ldd	r25, Y+10	; 0x0a
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	3f ef       	ldi	r19, 0xFF	; 255
    3012:	4f e7       	ldi	r20, 0x7F	; 127
    3014:	57 e4       	ldi	r21, 0x47	; 71
    3016:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    301a:	18 16       	cp	r1, r24
    301c:	4c f5       	brge	.+82     	; 0x3070 <SevSeg_voidDisplayAll+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	40 e2       	ldi	r20, 0x20	; 32
    302c:	51 e4       	ldi	r21, 0x41	; 65
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	bc 01       	movw	r22, r24
    3038:	cd 01       	movw	r24, r26
    303a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
    3046:	0f c0       	rjmp	.+30     	; 0x3066 <SevSeg_voidDisplayAll+0x142>
    3048:	88 ec       	ldi	r24, 0xC8	; 200
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9c 83       	std	Y+4, r25	; 0x04
    304e:	8b 83       	std	Y+3, r24	; 0x03
    3050:	8b 81       	ldd	r24, Y+3	; 0x03
    3052:	9c 81       	ldd	r25, Y+4	; 0x04
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <SevSeg_voidDisplayAll+0x130>
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3066:	8d 81       	ldd	r24, Y+5	; 0x05
    3068:	9e 81       	ldd	r25, Y+6	; 0x06
    306a:	00 97       	sbiw	r24, 0x00	; 0
    306c:	69 f7       	brne	.-38     	; 0x3048 <SevSeg_voidDisplayAll+0x124>
    306e:	14 c0       	rjmp	.+40     	; 0x3098 <SevSeg_voidDisplayAll+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3070:	6f 81       	ldd	r22, Y+7	; 0x07
    3072:	78 85       	ldd	r23, Y+8	; 0x08
    3074:	89 85       	ldd	r24, Y+9	; 0x09
    3076:	9a 85       	ldd	r25, Y+10	; 0x0a
    3078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	8d 81       	ldd	r24, Y+5	; 0x05
    3086:	9e 81       	ldd	r25, Y+6	; 0x06
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	9a 81       	ldd	r25, Y+2	; 0x02
    3090:	01 97       	sbiw	r24, 0x01	; 1
    3092:	f1 f7       	brne	.-4      	; 0x3090 <SevSeg_voidDisplayAll+0x16c>
    3094:	9a 83       	std	Y+2, r25	; 0x02
    3096:	89 83       	std	Y+1, r24	; 0x01

	for(i=0; i<10; i++)
	{
		DIO_u8SetPortValue(Sev_DirD,Sev_arr[i]);

		for(j=0; j<10; j++)
    3098:	8f 85       	ldd	r24, Y+15	; 0x0f
    309a:	98 89       	ldd	r25, Y+16	; 0x10
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	98 8b       	std	Y+16, r25	; 0x10
    30a0:	8f 87       	std	Y+15, r24	; 0x0f
    30a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a4:	98 89       	ldd	r25, Y+16	; 0x10
    30a6:	8a 30       	cpi	r24, 0x0A	; 10
    30a8:	91 05       	cpc	r25, r1
    30aa:	08 f4       	brcc	.+2      	; 0x30ae <SevSeg_voidDisplayAll+0x18a>
    30ac:	77 cf       	rjmp	.-274    	; 0x2f9c <SevSeg_voidDisplayAll+0x78>
{
	u8 Sev_arr[] = Sev_Array;
	u16 i;
	u16 j;

	for(i=0; i<10; i++)
    30ae:	89 89       	ldd	r24, Y+17	; 0x11
    30b0:	9a 89       	ldd	r25, Y+18	; 0x12
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	9a 8b       	std	Y+18, r25	; 0x12
    30b6:	89 8b       	std	Y+17, r24	; 0x11
    30b8:	89 89       	ldd	r24, Y+17	; 0x11
    30ba:	9a 89       	ldd	r25, Y+18	; 0x12
    30bc:	8a 30       	cpi	r24, 0x0A	; 10
    30be:	91 05       	cpc	r25, r1
    30c0:	08 f4       	brcc	.+2      	; 0x30c4 <SevSeg_voidDisplayAll+0x1a0>
    30c2:	5d cf       	rjmp	.-326    	; 0x2f7e <SevSeg_voidDisplayAll+0x5a>
			DIO_u8SetPortValue(Sev_DirC,Sev_arr[j]);
			_delay_ms(Sev_Delay);
		}
	}

}
    30c4:	a1 96       	adiw	r28, 0x21	; 33
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	08 95       	ret

000030d6 <SevSeg_voidDisplayRange>:


void SevSeg_voidDisplayRange(u8 start,u8 end)
{
    30d6:	df 93       	push	r29
    30d8:	cf 93       	push	r28
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	af 97       	sbiw	r28, 0x2f	; 47
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	89 a7       	std	Y+41, r24	; 0x29
    30ec:	6a a7       	std	Y+42, r22	; 0x2a
	u8 Sev_arr[] = Sev_Array;
    30ee:	ce 01       	movw	r24, r28
    30f0:	4f 96       	adiw	r24, 0x1f	; 31
    30f2:	9c a7       	std	Y+44, r25	; 0x2c
    30f4:	8b a7       	std	Y+43, r24	; 0x2b
    30f6:	ee e8       	ldi	r30, 0x8E	; 142
    30f8:	f1 e0       	ldi	r31, 0x01	; 1
    30fa:	fe a7       	std	Y+46, r31	; 0x2e
    30fc:	ed a7       	std	Y+45, r30	; 0x2d
    30fe:	fa e0       	ldi	r31, 0x0A	; 10
    3100:	ff a7       	std	Y+47, r31	; 0x2f
    3102:	ed a5       	ldd	r30, Y+45	; 0x2d
    3104:	fe a5       	ldd	r31, Y+46	; 0x2e
    3106:	00 80       	ld	r0, Z
    3108:	8d a5       	ldd	r24, Y+45	; 0x2d
    310a:	9e a5       	ldd	r25, Y+46	; 0x2e
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	9e a7       	std	Y+46, r25	; 0x2e
    3110:	8d a7       	std	Y+45, r24	; 0x2d
    3112:	eb a5       	ldd	r30, Y+43	; 0x2b
    3114:	fc a5       	ldd	r31, Y+44	; 0x2c
    3116:	00 82       	st	Z, r0
    3118:	8b a5       	ldd	r24, Y+43	; 0x2b
    311a:	9c a5       	ldd	r25, Y+44	; 0x2c
    311c:	01 96       	adiw	r24, 0x01	; 1
    311e:	9c a7       	std	Y+44, r25	; 0x2c
    3120:	8b a7       	std	Y+43, r24	; 0x2b
    3122:	9f a5       	ldd	r25, Y+47	; 0x2f
    3124:	91 50       	subi	r25, 0x01	; 1
    3126:	9f a7       	std	Y+47, r25	; 0x2f
    3128:	ef a5       	ldd	r30, Y+47	; 0x2f
    312a:	ee 23       	and	r30, r30
    312c:	51 f7       	brne	.-44     	; 0x3102 <SevSeg_voidDisplayRange+0x2c>
	u16 i;
	u16 j;
	u16 count1 = 0;
    312e:	1a 8e       	std	Y+26, r1	; 0x1a
    3130:	19 8e       	std	Y+25, r1	; 0x19
	u16 count2 = 0;
    3132:	18 8e       	std	Y+24, r1	; 0x18
    3134:	1f 8a       	std	Y+23, r1	; 0x17
	u16 start0,start1,end0,end1;

	if (start <100 && end <100)
    3136:	89 a5       	ldd	r24, Y+41	; 0x29
    3138:	84 36       	cpi	r24, 0x64	; 100
    313a:	08 f0       	brcs	.+2      	; 0x313e <SevSeg_voidDisplayRange+0x68>
    313c:	4c c1       	rjmp	.+664    	; 0x33d6 <SevSeg_voidDisplayRange+0x300>
    313e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3140:	84 36       	cpi	r24, 0x64	; 100
    3142:	08 f0       	brcs	.+2      	; 0x3146 <SevSeg_voidDisplayRange+0x70>
    3144:	48 c1       	rjmp	.+656    	; 0x33d6 <SevSeg_voidDisplayRange+0x300>
	{

		for (i=0; i<10;i++)
    3146:	1e 8e       	std	Y+30, r1	; 0x1e
    3148:	1d 8e       	std	Y+29, r1	; 0x1d
    314a:	1e c0       	rjmp	.+60     	; 0x3188 <SevSeg_voidDisplayRange+0xb2>
		{
			if (start >= count1)
    314c:	89 a5       	ldd	r24, Y+41	; 0x29
    314e:	28 2f       	mov	r18, r24
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	89 8d       	ldd	r24, Y+25	; 0x19
    3154:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3156:	28 17       	cp	r18, r24
    3158:	39 07       	cpc	r19, r25
    315a:	58 f0       	brcs	.+22     	; 0x3172 <SevSeg_voidDisplayRange+0x9c>
			{
				count1 = count1 + 10;
    315c:	89 8d       	ldd	r24, Y+25	; 0x19
    315e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3160:	0a 96       	adiw	r24, 0x0a	; 10
    3162:	9a 8f       	std	Y+26, r25	; 0x1a
    3164:	89 8f       	std	Y+25, r24	; 0x19
	u16 start0,start1,end0,end1;

	if (start <100 && end <100)
	{

		for (i=0; i<10;i++)
    3166:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3168:	9e 8d       	ldd	r25, Y+30	; 0x1e
    316a:	01 96       	adiw	r24, 0x01	; 1
    316c:	9e 8f       	std	Y+30, r25	; 0x1e
    316e:	8d 8f       	std	Y+29, r24	; 0x1d
    3170:	0b c0       	rjmp	.+22     	; 0x3188 <SevSeg_voidDisplayRange+0xb2>
			{
				count1 = count1 + 10;
			}
			else
			{
				count1 = count1 - 10;
    3172:	89 8d       	ldd	r24, Y+25	; 0x19
    3174:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3176:	0a 97       	sbiw	r24, 0x0a	; 10
    3178:	9a 8f       	std	Y+26, r25	; 0x1a
    317a:	89 8f       	std	Y+25, r24	; 0x19
				start0 = i-1;
    317c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    317e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	9e 8b       	std	Y+22, r25	; 0x16
    3184:	8d 8b       	std	Y+21, r24	; 0x15
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <SevSeg_voidDisplayRange+0xbc>
	u16 start0,start1,end0,end1;

	if (start <100 && end <100)
	{

		for (i=0; i<10;i++)
    3188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    318a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    318c:	8a 30       	cpi	r24, 0x0A	; 10
    318e:	91 05       	cpc	r25, r1
    3190:	e8 f2       	brcs	.-70     	; 0x314c <SevSeg_voidDisplayRange+0x76>
				start0 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    3192:	1e 8e       	std	Y+30, r1	; 0x1e
    3194:	1d 8e       	std	Y+29, r1	; 0x1d
    3196:	19 c0       	rjmp	.+50     	; 0x31ca <SevSeg_voidDisplayRange+0xf4>
		{
			if (start >= count1 )
    3198:	89 a5       	ldd	r24, Y+41	; 0x29
    319a:	28 2f       	mov	r18, r24
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	89 8d       	ldd	r24, Y+25	; 0x19
    31a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31a2:	28 17       	cp	r18, r24
    31a4:	39 07       	cpc	r19, r25
    31a6:	58 f0       	brcs	.+22     	; 0x31be <SevSeg_voidDisplayRange+0xe8>
			{
				count1++;
    31a8:	89 8d       	ldd	r24, Y+25	; 0x19
    31aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	9a 8f       	std	Y+26, r25	; 0x1a
    31b0:	89 8f       	std	Y+25, r24	; 0x19
				start0 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    31b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b6:	01 96       	adiw	r24, 0x01	; 1
    31b8:	9e 8f       	std	Y+30, r25	; 0x1e
    31ba:	8d 8f       	std	Y+29, r24	; 0x1d
    31bc:	06 c0       	rjmp	.+12     	; 0x31ca <SevSeg_voidDisplayRange+0xf4>
			{
				count1++;
			}
			else
			{
				start1 = i-1;
    31be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	9c 8b       	std	Y+20, r25	; 0x14
    31c6:	8b 8b       	std	Y+19, r24	; 0x13
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <SevSeg_voidDisplayRange+0xfe>
				start0 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    31ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ce:	8a 30       	cpi	r24, 0x0A	; 10
    31d0:	91 05       	cpc	r25, r1
    31d2:	10 f3       	brcs	.-60     	; 0x3198 <SevSeg_voidDisplayRange+0xc2>
				start1 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    31d4:	1e 8e       	std	Y+30, r1	; 0x1e
    31d6:	1d 8e       	std	Y+29, r1	; 0x1d
    31d8:	1e c0       	rjmp	.+60     	; 0x3216 <SevSeg_voidDisplayRange+0x140>
		{
			if (end >= count2 )
    31da:	8a a5       	ldd	r24, Y+42	; 0x2a
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	8f 89       	ldd	r24, Y+23	; 0x17
    31e2:	98 8d       	ldd	r25, Y+24	; 0x18
    31e4:	28 17       	cp	r18, r24
    31e6:	39 07       	cpc	r19, r25
    31e8:	58 f0       	brcs	.+22     	; 0x3200 <SevSeg_voidDisplayRange+0x12a>
			{
				count2 = count2 + 10;
    31ea:	8f 89       	ldd	r24, Y+23	; 0x17
    31ec:	98 8d       	ldd	r25, Y+24	; 0x18
    31ee:	0a 96       	adiw	r24, 0x0a	; 10
    31f0:	98 8f       	std	Y+24, r25	; 0x18
    31f2:	8f 8b       	std	Y+23, r24	; 0x17
				start1 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    31f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	9e 8f       	std	Y+30, r25	; 0x1e
    31fc:	8d 8f       	std	Y+29, r24	; 0x1d
    31fe:	0b c0       	rjmp	.+22     	; 0x3216 <SevSeg_voidDisplayRange+0x140>
			{
				count2 = count2 + 10;
			}
			else
			{
				count2 = count2 - 10;
    3200:	8f 89       	ldd	r24, Y+23	; 0x17
    3202:	98 8d       	ldd	r25, Y+24	; 0x18
    3204:	0a 97       	sbiw	r24, 0x0a	; 10
    3206:	98 8f       	std	Y+24, r25	; 0x18
    3208:	8f 8b       	std	Y+23, r24	; 0x17
				end0 = i-1;
    320a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    320c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9a 8b       	std	Y+18, r25	; 0x12
    3212:	89 8b       	std	Y+17, r24	; 0x11
    3214:	05 c0       	rjmp	.+10     	; 0x3220 <SevSeg_voidDisplayRange+0x14a>
				start1 = i-1;
				break;
			}
		}

		for (i=0; i<10;i++)
    3216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3218:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321a:	8a 30       	cpi	r24, 0x0A	; 10
    321c:	91 05       	cpc	r25, r1
    321e:	e8 f2       	brcs	.-70     	; 0x31da <SevSeg_voidDisplayRange+0x104>
				break;
			}
		}


		for (i=0; i<10;i++)
    3220:	1e 8e       	std	Y+30, r1	; 0x1e
    3222:	1d 8e       	std	Y+29, r1	; 0x1d
    3224:	19 c0       	rjmp	.+50     	; 0x3258 <SevSeg_voidDisplayRange+0x182>
		{
			if (end >= count2 )
    3226:	8a a5       	ldd	r24, Y+42	; 0x2a
    3228:	28 2f       	mov	r18, r24
    322a:	30 e0       	ldi	r19, 0x00	; 0
    322c:	8f 89       	ldd	r24, Y+23	; 0x17
    322e:	98 8d       	ldd	r25, Y+24	; 0x18
    3230:	28 17       	cp	r18, r24
    3232:	39 07       	cpc	r19, r25
    3234:	58 f0       	brcs	.+22     	; 0x324c <SevSeg_voidDisplayRange+0x176>
			{
				count2++;
    3236:	8f 89       	ldd	r24, Y+23	; 0x17
    3238:	98 8d       	ldd	r25, Y+24	; 0x18
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	98 8f       	std	Y+24, r25	; 0x18
    323e:	8f 8b       	std	Y+23, r24	; 0x17
				break;
			}
		}


		for (i=0; i<10;i++)
    3240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3242:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	9e 8f       	std	Y+30, r25	; 0x1e
    3248:	8d 8f       	std	Y+29, r24	; 0x1d
    324a:	06 c0       	rjmp	.+12     	; 0x3258 <SevSeg_voidDisplayRange+0x182>
			{
				count2++;
			}
			else
			{
				end1 = i-1;
    324c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    324e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	98 8b       	std	Y+16, r25	; 0x10
    3254:	8f 87       	std	Y+15, r24	; 0x0f
    3256:	05 c0       	rjmp	.+10     	; 0x3262 <SevSeg_voidDisplayRange+0x18c>
				break;
			}
		}


		for (i=0; i<10;i++)
    3258:	8d 8d       	ldd	r24, Y+29	; 0x1d
    325a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    325c:	8a 30       	cpi	r24, 0x0A	; 10
    325e:	91 05       	cpc	r25, r1
    3260:	10 f3       	brcs	.-60     	; 0x3226 <SevSeg_voidDisplayRange+0x150>
			}
		}



		for(i=start0; i<10; i++)
    3262:	8d 89       	ldd	r24, Y+21	; 0x15
    3264:	9e 89       	ldd	r25, Y+22	; 0x16
    3266:	9e 8f       	std	Y+30, r25	; 0x1e
    3268:	8d 8f       	std	Y+29, r24	; 0x1d
    326a:	af c0       	rjmp	.+350    	; 0x33ca <SevSeg_voidDisplayRange+0x2f4>
		{

			DIO_u8SetPortValue(Sev_DirD,Sev_arr[i]);
    326c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    326e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3270:	ce 01       	movw	r24, r28
    3272:	4f 96       	adiw	r24, 0x1f	; 31
    3274:	fc 01       	movw	r30, r24
    3276:	e2 0f       	add	r30, r18
    3278:	f3 1f       	adc	r31, r19
    327a:	90 81       	ld	r25, Z
    327c:	84 e0       	ldi	r24, 0x04	; 4
    327e:	69 2f       	mov	r22, r25
    3280:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>

			for(j=start1; j<10 ; j++)
    3284:	8b 89       	ldd	r24, Y+19	; 0x13
    3286:	9c 89       	ldd	r25, Y+20	; 0x14
    3288:	9c 8f       	std	Y+28, r25	; 0x1c
    328a:	8b 8f       	std	Y+27, r24	; 0x1b
    328c:	91 c0       	rjmp	.+290    	; 0x33b0 <SevSeg_voidDisplayRange+0x2da>
			{
				DIO_u8SetPortValue(Sev_DirC,Sev_arr[j]);
    328e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3290:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3292:	ce 01       	movw	r24, r28
    3294:	4f 96       	adiw	r24, 0x1f	; 31
    3296:	fc 01       	movw	r30, r24
    3298:	e2 0f       	add	r30, r18
    329a:	f3 1f       	adc	r31, r19
    329c:	90 81       	ld	r25, Z
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	69 2f       	mov	r22, r25
    32a2:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	aa e7       	ldi	r26, 0x7A	; 122
    32ac:	b4 e4       	ldi	r27, 0x44	; 68
    32ae:	8b 87       	std	Y+11, r24	; 0x0b
    32b0:	9c 87       	std	Y+12, r25	; 0x0c
    32b2:	ad 87       	std	Y+13, r26	; 0x0d
    32b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    32bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	4a ef       	ldi	r20, 0xFA	; 250
    32c4:	54 e4       	ldi	r21, 0x44	; 68
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	8f 83       	std	Y+7, r24	; 0x07
    32d0:	98 87       	std	Y+8, r25	; 0x08
    32d2:	a9 87       	std	Y+9, r26	; 0x09
    32d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e8       	ldi	r20, 0x80	; 128
    32e4:	5f e3       	ldi	r21, 0x3F	; 63
    32e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ea:	88 23       	and	r24, r24
    32ec:	2c f4       	brge	.+10     	; 0x32f8 <SevSeg_voidDisplayRange+0x222>
		__ticks = 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	9e 83       	std	Y+6, r25	; 0x06
    32f4:	8d 83       	std	Y+5, r24	; 0x05
    32f6:	3f c0       	rjmp	.+126    	; 0x3376 <SevSeg_voidDisplayRange+0x2a0>
	else if (__tmp > 65535)
    32f8:	6f 81       	ldd	r22, Y+7	; 0x07
    32fa:	78 85       	ldd	r23, Y+8	; 0x08
    32fc:	89 85       	ldd	r24, Y+9	; 0x09
    32fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	3f ef       	ldi	r19, 0xFF	; 255
    3304:	4f e7       	ldi	r20, 0x7F	; 127
    3306:	57 e4       	ldi	r21, 0x47	; 71
    3308:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    330c:	18 16       	cp	r1, r24
    330e:	4c f5       	brge	.+82     	; 0x3362 <SevSeg_voidDisplayRange+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3310:	6b 85       	ldd	r22, Y+11	; 0x0b
    3312:	7c 85       	ldd	r23, Y+12	; 0x0c
    3314:	8d 85       	ldd	r24, Y+13	; 0x0d
    3316:	9e 85       	ldd	r25, Y+14	; 0x0e
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e2       	ldi	r20, 0x20	; 32
    331e:	51 e4       	ldi	r21, 0x41	; 65
    3320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	bc 01       	movw	r22, r24
    332a:	cd 01       	movw	r24, r26
    332c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3330:	dc 01       	movw	r26, r24
    3332:	cb 01       	movw	r24, r22
    3334:	9e 83       	std	Y+6, r25	; 0x06
    3336:	8d 83       	std	Y+5, r24	; 0x05
    3338:	0f c0       	rjmp	.+30     	; 0x3358 <SevSeg_voidDisplayRange+0x282>
    333a:	88 ec       	ldi	r24, 0xC8	; 200
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	9c 83       	std	Y+4, r25	; 0x04
    3340:	8b 83       	std	Y+3, r24	; 0x03
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	f1 f7       	brne	.-4      	; 0x3346 <SevSeg_voidDisplayRange+0x270>
    334a:	9c 83       	std	Y+4, r25	; 0x04
    334c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	69 f7       	brne	.-38     	; 0x333a <SevSeg_voidDisplayRange+0x264>
    3360:	14 c0       	rjmp	.+40     	; 0x338a <SevSeg_voidDisplayRange+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3362:	6f 81       	ldd	r22, Y+7	; 0x07
    3364:	78 85       	ldd	r23, Y+8	; 0x08
    3366:	89 85       	ldd	r24, Y+9	; 0x09
    3368:	9a 85       	ldd	r25, Y+10	; 0x0a
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9e 83       	std	Y+6, r25	; 0x06
    3374:	8d 83       	std	Y+5, r24	; 0x05
    3376:	8d 81       	ldd	r24, Y+5	; 0x05
    3378:	9e 81       	ldd	r25, Y+6	; 0x06
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	f1 f7       	brne	.-4      	; 0x3382 <SevSeg_voidDisplayRange+0x2ac>
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(Sev_Delay);

				if(i == end0 && j == end1)
    338a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    338c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    338e:	89 89       	ldd	r24, Y+17	; 0x11
    3390:	9a 89       	ldd	r25, Y+18	; 0x12
    3392:	28 17       	cp	r18, r24
    3394:	39 07       	cpc	r19, r25
    3396:	39 f4       	brne	.+14     	; 0x33a6 <SevSeg_voidDisplayRange+0x2d0>
    3398:	2b 8d       	ldd	r18, Y+27	; 0x1b
    339a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	98 89       	ldd	r25, Y+16	; 0x10
    33a0:	28 17       	cp	r18, r24
    33a2:	39 07       	cpc	r19, r25
    33a4:	c1 f0       	breq	.+48     	; 0x33d6 <SevSeg_voidDisplayRange+0x300>
		for(i=start0; i<10; i++)
		{

			DIO_u8SetPortValue(Sev_DirD,Sev_arr[i]);

			for(j=start1; j<10 ; j++)
    33a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33aa:	01 96       	adiw	r24, 0x01	; 1
    33ac:	9c 8f       	std	Y+28, r25	; 0x1c
    33ae:	8b 8f       	std	Y+27, r24	; 0x1b
    33b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33b4:	8a 30       	cpi	r24, 0x0A	; 10
    33b6:	91 05       	cpc	r25, r1
    33b8:	08 f4       	brcc	.+2      	; 0x33bc <SevSeg_voidDisplayRange+0x2e6>
    33ba:	69 cf       	rjmp	.-302    	; 0x328e <SevSeg_voidDisplayRange+0x1b8>
				if(i == end0 && j == end1)
				{
					return;
				}
			}
			start1=0;
    33bc:	1c 8a       	std	Y+20, r1	; 0x14
    33be:	1b 8a       	std	Y+19, r1	; 0x13
			}
		}



		for(i=start0; i<10; i++)
    33c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33c4:	01 96       	adiw	r24, 0x01	; 1
    33c6:	9e 8f       	std	Y+30, r25	; 0x1e
    33c8:	8d 8f       	std	Y+29, r24	; 0x1d
    33ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33ce:	8a 30       	cpi	r24, 0x0A	; 10
    33d0:	91 05       	cpc	r25, r1
    33d2:	08 f4       	brcc	.+2      	; 0x33d6 <SevSeg_voidDisplayRange+0x300>
    33d4:	4b cf       	rjmp	.-362    	; 0x326c <SevSeg_voidDisplayRange+0x196>
			start1=0;
		}

	}

}
    33d6:	af 96       	adiw	r28, 0x2f	; 47
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <Servo_VoidInit>:
#include "../../../MCAL/TI1/Header/TI1_Interface.h"
#include "../Header/Servo_Interface.h"


void Servo_VoidInit(void)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <Servo_VoidInit+0x6>
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
	//Select the OC1A As Output
	DIO_u8SetPinDir(DIO_GroupD,DIO_PIN5,Output);
    33f2:	84 e0       	ldi	r24, 0x04	; 4
    33f4:	65 e0       	ldi	r22, 0x05	; 5
    33f6:	41 e0       	ldi	r20, 0x01	; 1
    33f8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>

	//Select Servo motor angle Zero  -> compare value
	//call function to calc the angel -> return value

	u16 Local_CompareValue = Servo_U16CalcAnagle(0);
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	0e 94 10 1a 	call	0x3420	; 0x3420 <Servo_U16CalcAnagle>
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01

	//Call the PWM1_voidInitM14(Servo_Perdioc ,value);
	PWM1_VoidInitM14(Servo_Perdioc,Local_CompareValue,TI1_Prescaler8);
    3406:	29 81       	ldd	r18, Y+1	; 0x01
    3408:	3a 81       	ldd	r19, Y+2	; 0x02
    340a:	8f e1       	ldi	r24, 0x1F	; 31
    340c:	9e e4       	ldi	r25, 0x4E	; 78
    340e:	b9 01       	movw	r22, r18
    3410:	43 e0       	ldi	r20, 0x03	; 3
    3412:	0e 94 c5 07 	call	0xf8a	; 0xf8a <PWM1_VoidInitM14>

}
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	cf 91       	pop	r28
    341c:	df 91       	pop	r29
    341e:	08 95       	ret

00003420 <Servo_U16CalcAnagle>:
u16  Servo_U16CalcAnagle(u8 Local_Anagl)
{
    3420:	df 93       	push	r29
    3422:	cf 93       	push	r28
    3424:	00 d0       	rcall	.+0      	; 0x3426 <Servo_U16CalcAnagle+0x6>
    3426:	0f 92       	push	r0
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_return = (Local_Anagl *2000)/180 ;
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	80 ed       	ldi	r24, 0xD0	; 208
    3436:	97 e0       	ldi	r25, 0x07	; 7
    3438:	ac 01       	movw	r20, r24
    343a:	24 9f       	mul	r18, r20
    343c:	c0 01       	movw	r24, r0
    343e:	25 9f       	mul	r18, r21
    3440:	90 0d       	add	r25, r0
    3442:	34 9f       	mul	r19, r20
    3444:	90 0d       	add	r25, r0
    3446:	11 24       	eor	r1, r1
    3448:	24 eb       	ldi	r18, 0xB4	; 180
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	b9 01       	movw	r22, r18
    344e:	0e 94 09 38 	call	0x7012	; 0x7012 <__divmodhi4>
    3452:	cb 01       	movw	r24, r22
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
	return local_return ;
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02

	//return ((Local_Anagl *2000)/180) ;

}
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	08 95       	ret

00003468 <Servo_VoidMove>:
void Servo_VoidMove(u8 Local_Anagl)
{
    3468:	df 93       	push	r29
    346a:	cf 93       	push	r28
    346c:	00 d0       	rcall	.+0      	; 0x346e <Servo_VoidMove+0x6>
    346e:	0f 92       	push	r0
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_return  = Servo_U16CalcAnagle(Local_Anagl);
    3476:	8b 81       	ldd	r24, Y+3	; 0x03
    3478:	0e 94 10 1a 	call	0x3420	; 0x3420 <Servo_U16CalcAnagle>
    347c:	9a 83       	std	Y+2, r25	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01
	PWM1_VoidSetCompareValue(local_return);
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	9a 81       	ldd	r25, Y+2	; 0x02
    3484:	0e 94 8b 08 	call	0x1116	; 0x1116 <PWM1_VoidSetCompareValue>
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <Motor_voidInit>:
#include "../Header/Motor_Interface.h"

u8 Motor_Direction = 3;

void Motor_voidInit()
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(Motor_Dir, Motor_RightPin, Output);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	41 e0       	ldi	r20, 0x01	; 1
    34a2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Motor_Dir, Motor_LeftPin, Output);
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	41 e0       	ldi	r20, 0x01	; 1
    34ac:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
}
    34b0:	cf 91       	pop	r28
    34b2:	df 91       	pop	r29
    34b4:	08 95       	ret

000034b6 <Motor_voidOn>:


void Motor_voidOn(u8 direction)
{
    34b6:	df 93       	push	r29
    34b8:	cf 93       	push	r28
    34ba:	0f 92       	push	r0
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
    34c0:	89 83       	std	Y+1, r24	; 0x01
	if(direction == Motor_Right)
    34c2:	89 81       	ldd	r24, Y+1	; 0x01
    34c4:	88 23       	and	r24, r24
    34c6:	69 f4       	brne	.+26     	; 0x34e2 <Motor_voidOn+0x2c>
	{
		Motor_Direction = Motor_Right;
    34c8:	10 92 6d 01 	sts	0x016D, r1

		DIO_u8SetPinValue(Motor_Dir, Motor_RightPin,High);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	41 e0       	ldi	r20, 0x01	; 1
    34d2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_Dir, Motor_LeftPin,Low);
    34d6:	81 e0       	ldi	r24, 0x01	; 1
    34d8:	61 e0       	ldi	r22, 0x01	; 1
    34da:	40 e0       	ldi	r20, 0x00	; 0
    34dc:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    34e0:	10 c0       	rjmp	.+32     	; 0x3502 <Motor_voidOn+0x4c>
	}
	else if(direction == Motor_Left)
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	81 30       	cpi	r24, 0x01	; 1
    34e6:	69 f4       	brne	.+26     	; 0x3502 <Motor_voidOn+0x4c>
	{
		Motor_Direction = Motor_Left;
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	80 93 6d 01 	sts	0x016D, r24

		DIO_u8SetPinValue(Motor_Dir, Motor_RightPin,Low);
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_Dir, Motor_LeftPin,High);
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	}
}
    3502:	0f 90       	pop	r0
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <Motor_voidOff>:


void Motor_voidOff()
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(Motor_Dir, Motor_RightPin,Low);
    3512:	81 e0       	ldi	r24, 0x01	; 1
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Motor_Dir, Motor_LeftPin,Low);
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	61 e0       	ldi	r22, 0x01	; 1
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	Motor_Direction = 4;
    3526:	84 e0       	ldi	r24, 0x04	; 4
    3528:	80 93 6d 01 	sts	0x016D, r24
}
    352c:	cf 91       	pop	r28
    352e:	df 91       	pop	r29
    3530:	08 95       	ret

00003532 <Motor_voidChangeDirection>:

void Motor_voidChangeDirection()
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62

	if(Motor_Direction == Motor_Right)
    353a:	80 91 6d 01 	lds	r24, 0x016D
    353e:	88 23       	and	r24, r24
    3540:	59 f4       	brne	.+22     	; 0x3558 <Motor_voidChangeDirection+0x26>
	{
		DIO_u8SetPinValue(Motor_Dir, Motor_RightPin,Low);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_Dir, Motor_LeftPin,High);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	61 e0       	ldi	r22, 0x01	; 1
    3550:	41 e0       	ldi	r20, 0x01	; 1
    3552:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    3556:	0e c0       	rjmp	.+28     	; 0x3574 <Motor_voidChangeDirection+0x42>
	}
	else if(Motor_Direction == Motor_Left)
    3558:	80 91 6d 01 	lds	r24, 0x016D
    355c:	81 30       	cpi	r24, 0x01	; 1
    355e:	51 f4       	brne	.+20     	; 0x3574 <Motor_voidChangeDirection+0x42>
	{
		DIO_u8SetPinValue(Motor_Dir, Motor_RightPin,High);
    3560:	81 e0       	ldi	r24, 0x01	; 1
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	41 e0       	ldi	r20, 0x01	; 1
    3566:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Motor_Dir, Motor_LeftPin,Low);
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	61 e0       	ldi	r22, 0x01	; 1
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	}
}
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <Led_voidInit>:
#include "../Header/Led_Interface.h"
#include "../Header/Led_Private.h"


void Led_voidInit()
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	cd b7       	in	r28, 0x3d	; 61
    3580:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDir(Led_DirC, DIO_GroupOut);
    3582:	83 e0       	ldi	r24, 0x03	; 3
    3584:	6f ef       	ldi	r22, 0xFF	; 255
    3586:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
}
    358a:	cf 91       	pop	r28
    358c:	df 91       	pop	r29
    358e:	08 95       	ret

00003590 <Led_voidSingleON>:


void Led_voidSingleON()
{
    3590:	df 93       	push	r29
    3592:	cf 93       	push	r28
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinValue(Led_DirC, DIO_PIN0, DIO_High);
    3598:	83 e0       	ldi	r24, 0x03	; 3
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	41 e0       	ldi	r20, 0x01	; 1
    359e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
}
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <Led_voidSingleOff>:

void Led_voidSingleOff()
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(Led_DirC, DIO_PIN0, DIO_Low);
    35b0:	83 e0       	ldi	r24, 0x03	; 3
    35b2:	60 e0       	ldi	r22, 0x00	; 0
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
}
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <Led_voidAllOn>:

void Led_voidAllOn()
{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	cd b7       	in	r28, 0x3d	; 61
    35c6:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPortValue(Led_DirC, DIO_GroupHigh);
    35c8:	83 e0       	ldi	r24, 0x03	; 3
    35ca:	6f ef       	ldi	r22, 0xFF	; 255
    35cc:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
}
    35d0:	cf 91       	pop	r28
    35d2:	df 91       	pop	r29
    35d4:	08 95       	ret

000035d6 <Led_voidAllOff>:

void Led_voidAllOff()
{
    35d6:	df 93       	push	r29
    35d8:	cf 93       	push	r28
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortValue(Led_DirC, DIO_GroupLow);
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>

}
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <LCD_VoidSendCommand>:
#include "../Header/Lcd_Private.h"
#include "../Header/Lcd_Config.h"
#include "../Header/Lcd_Interface.h"

void LCD_VoidSendCommand(u8 Local_Command)
{
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	cd b7       	in	r28, 0x3d	; 61
    35f2:	de b7       	in	r29, 0x3e	; 62
    35f4:	2f 97       	sbiw	r28, 0x0f	; 15
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select the Rs As Command Low*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRS,Low);
    3602:	82 e0       	ldi	r24, 0x02	; 2
    3604:	60 e0       	ldi	r22, 0x00	; 0
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	/*Select the Rw as Write (LOW)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRW,Low);
    360c:	82 e0       	ldi	r24, 0x02	; 2
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	40 e0       	ldi	r20, 0x00	; 0
    3612:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	/*Write the Command On the Group for Data*/
	DIO_u8SetPortValue(Lcd_DataGroup,Local_Command);
    3616:	83 e0       	ldi	r24, 0x03	; 3
    3618:	6f 85       	ldd	r22, Y+15	; 0x0f
    361a:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
	/*Select the E Running (High)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,High);
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	62 e0       	ldi	r22, 0x02	; 2
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a0 e8       	ldi	r26, 0x80	; 128
    362e:	bf e3       	ldi	r27, 0x3F	; 63
    3630:	8b 87       	std	Y+11, r24	; 0x0b
    3632:	9c 87       	std	Y+12, r25	; 0x0c
    3634:	ad 87       	std	Y+13, r26	; 0x0d
    3636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	6b 85       	ldd	r22, Y+11	; 0x0b
    363a:	7c 85       	ldd	r23, Y+12	; 0x0c
    363c:	8d 85       	ldd	r24, Y+13	; 0x0d
    363e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	4a ef       	ldi	r20, 0xFA	; 250
    3646:	54 e4       	ldi	r21, 0x44	; 68
    3648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	8f 83       	std	Y+7, r24	; 0x07
    3652:	98 87       	std	Y+8, r25	; 0x08
    3654:	a9 87       	std	Y+9, r26	; 0x09
    3656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3658:	6f 81       	ldd	r22, Y+7	; 0x07
    365a:	78 85       	ldd	r23, Y+8	; 0x08
    365c:	89 85       	ldd	r24, Y+9	; 0x09
    365e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	2c f4       	brge	.+10     	; 0x367a <LCD_VoidSendCommand+0x8e>
		__ticks = 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	3f c0       	rjmp	.+126    	; 0x36f8 <LCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    367a:	6f 81       	ldd	r22, Y+7	; 0x07
    367c:	78 85       	ldd	r23, Y+8	; 0x08
    367e:	89 85       	ldd	r24, Y+9	; 0x09
    3680:	9a 85       	ldd	r25, Y+10	; 0x0a
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	3f ef       	ldi	r19, 0xFF	; 255
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	57 e4       	ldi	r21, 0x47	; 71
    368a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	4c f5       	brge	.+82     	; 0x36e4 <LCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	6b 85       	ldd	r22, Y+11	; 0x0b
    3694:	7c 85       	ldd	r23, Y+12	; 0x0c
    3696:	8d 85       	ldd	r24, Y+13	; 0x0d
    3698:	9e 85       	ldd	r25, Y+14	; 0x0e
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	9e 83       	std	Y+6, r25	; 0x06
    36b8:	8d 83       	std	Y+5, r24	; 0x05
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <LCD_VoidSendCommand+0xee>
    36bc:	88 ec       	ldi	r24, 0xC8	; 200
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
    36c4:	8b 81       	ldd	r24, Y+3	; 0x03
    36c6:	9c 81       	ldd	r25, Y+4	; 0x04
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_VoidSendCommand+0xdc>
    36cc:	9c 83       	std	Y+4, r25	; 0x04
    36ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	8d 81       	ldd	r24, Y+5	; 0x05
    36d2:	9e 81       	ldd	r25, Y+6	; 0x06
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	9e 83       	std	Y+6, r25	; 0x06
    36d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	69 f7       	brne	.-38     	; 0x36bc <LCD_VoidSendCommand+0xd0>
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <LCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9e 83       	std	Y+6, r25	; 0x06
    36f6:	8d 83       	std	Y+5, r24	; 0x05
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	9e 81       	ldd	r25, Y+6	; 0x06
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <LCD_VoidSendCommand+0x118>
    3708:	9a 83       	std	Y+2, r25	; 0x02
    370a:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting For 1ms*/
	_delay_ms(1);
	/*Select the E Spoted (Low)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,Low);
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	62 e0       	ldi	r22, 0x02	; 2
    3710:	40 e0       	ldi	r20, 0x00	; 0
    3712:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
}
    3716:	2f 96       	adiw	r28, 0x0f	; 15
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <LCD_VoidSendChar>:

void LCD_VoidSendChar(u8 Local_Char)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	2f 97       	sbiw	r28, 0x0f	; 15
    3732:	0f b6       	in	r0, 0x3f	; 63
    3734:	f8 94       	cli
    3736:	de bf       	out	0x3e, r29	; 62
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select the Rs As Data Low*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRS,High);
    373e:	82 e0       	ldi	r24, 0x02	; 2
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	41 e0       	ldi	r20, 0x01	; 1
    3744:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	/*Select the Rw as Write (LOW)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlRW,Low);
    3748:	82 e0       	ldi	r24, 0x02	; 2
    374a:	61 e0       	ldi	r22, 0x01	; 1
    374c:	40 e0       	ldi	r20, 0x00	; 0
    374e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	/*Write the Command On the Group for Data*/
	DIO_u8SetPortValue(Lcd_DataGroup,Local_Char);
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	6f 85       	ldd	r22, Y+15	; 0x0f
    3756:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>
	/*Select the E Running (High)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,High);
    375a:	82 e0       	ldi	r24, 0x02	; 2
    375c:	62 e0       	ldi	r22, 0x02	; 2
    375e:	41 e0       	ldi	r20, 0x01	; 1
    3760:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a0 e8       	ldi	r26, 0x80	; 128
    376a:	bf e3       	ldi	r27, 0x3F	; 63
    376c:	8b 87       	std	Y+11, r24	; 0x0b
    376e:	9c 87       	std	Y+12, r25	; 0x0c
    3770:	ad 87       	std	Y+13, r26	; 0x0d
    3772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3774:	6b 85       	ldd	r22, Y+11	; 0x0b
    3776:	7c 85       	ldd	r23, Y+12	; 0x0c
    3778:	8d 85       	ldd	r24, Y+13	; 0x0d
    377a:	9e 85       	ldd	r25, Y+14	; 0x0e
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	4a ef       	ldi	r20, 0xFA	; 250
    3782:	54 e4       	ldi	r21, 0x44	; 68
    3784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	8f 83       	std	Y+7, r24	; 0x07
    378e:	98 87       	std	Y+8, r25	; 0x08
    3790:	a9 87       	std	Y+9, r26	; 0x09
    3792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3794:	6f 81       	ldd	r22, Y+7	; 0x07
    3796:	78 85       	ldd	r23, Y+8	; 0x08
    3798:	89 85       	ldd	r24, Y+9	; 0x09
    379a:	9a 85       	ldd	r25, Y+10	; 0x0a
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e8       	ldi	r20, 0x80	; 128
    37a2:	5f e3       	ldi	r21, 0x3F	; 63
    37a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37a8:	88 23       	and	r24, r24
    37aa:	2c f4       	brge	.+10     	; 0x37b6 <LCD_VoidSendChar+0x8e>
		__ticks = 1;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	3f c0       	rjmp	.+126    	; 0x3834 <LCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	20 e0       	ldi	r18, 0x00	; 0
    37c0:	3f ef       	ldi	r19, 0xFF	; 255
    37c2:	4f e7       	ldi	r20, 0x7F	; 127
    37c4:	57 e4       	ldi	r21, 0x47	; 71
    37c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ca:	18 16       	cp	r1, r24
    37cc:	4c f5       	brge	.+82     	; 0x3820 <LCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d6:	20 e0       	ldi	r18, 0x00	; 0
    37d8:	30 e0       	ldi	r19, 0x00	; 0
    37da:	40 e2       	ldi	r20, 0x20	; 32
    37dc:	51 e4       	ldi	r21, 0x41	; 65
    37de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	bc 01       	movw	r22, r24
    37e8:	cd 01       	movw	r24, r26
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	0f c0       	rjmp	.+30     	; 0x3816 <LCD_VoidSendChar+0xee>
    37f8:	88 ec       	ldi	r24, 0xC8	; 200
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	9c 83       	std	Y+4, r25	; 0x04
    37fe:	8b 83       	std	Y+3, r24	; 0x03
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <LCD_VoidSendChar+0xdc>
    3808:	9c 83       	std	Y+4, r25	; 0x04
    380a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    380c:	8d 81       	ldd	r24, Y+5	; 0x05
    380e:	9e 81       	ldd	r25, Y+6	; 0x06
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	9e 81       	ldd	r25, Y+6	; 0x06
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	69 f7       	brne	.-38     	; 0x37f8 <LCD_VoidSendChar+0xd0>
    381e:	14 c0       	rjmp	.+40     	; 0x3848 <LCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3820:	6f 81       	ldd	r22, Y+7	; 0x07
    3822:	78 85       	ldd	r23, Y+8	; 0x08
    3824:	89 85       	ldd	r24, Y+9	; 0x09
    3826:	9a 85       	ldd	r25, Y+10	; 0x0a
    3828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	8d 81       	ldd	r24, Y+5	; 0x05
    3836:	9e 81       	ldd	r25, Y+6	; 0x06
    3838:	9a 83       	std	Y+2, r25	; 0x02
    383a:	89 83       	std	Y+1, r24	; 0x01
    383c:	89 81       	ldd	r24, Y+1	; 0x01
    383e:	9a 81       	ldd	r25, Y+2	; 0x02
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <LCD_VoidSendChar+0x118>
    3844:	9a 83       	std	Y+2, r25	; 0x02
    3846:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting For 1ms*/
	_delay_ms(1);
	/*Select the E Stoped (Low)*/
	DIO_u8SetPinValue(Lcd_ControlGroup,Lcd_ControlE,Low);
    3848:	82 e0       	ldi	r24, 0x02	; 2
    384a:	62 e0       	ldi	r22, 0x02	; 2
    384c:	40 e0       	ldi	r20, 0x00	; 0
    384e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
}
    3852:	2f 96       	adiw	r28, 0x0f	; 15
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	cf 91       	pop	r28
    3860:	df 91       	pop	r29
    3862:	08 95       	ret

00003864 <LCD_VoidInit>:

void LCD_VoidInit(void)
{
    3864:	df 93       	push	r29
    3866:	cf 93       	push	r28
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    386c:	e8 97       	sbiw	r28, 0x38	; 56
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	f8 94       	cli
    3872:	de bf       	out	0x3e, r29	; 62
    3874:	0f be       	out	0x3f, r0	; 63
    3876:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlE,DIO_Output);
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	62 e0       	ldi	r22, 0x02	; 2
    387c:	41 e0       	ldi	r20, 0x01	; 1
    387e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlRS,DIO_Output);
    3882:	82 e0       	ldi	r24, 0x02	; 2
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	41 e0       	ldi	r20, 0x01	; 1
    3888:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Lcd_ControlGroup,Lcd_ControlRW,DIO_Output);
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	61 e0       	ldi	r22, 0x01	; 1
    3890:	41 e0       	ldi	r20, 0x01	; 1
    3892:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPortDir(Lcd_DataGroup, DIO_GroupOut);
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	6f ef       	ldi	r22, 0xFF	; 255
    389a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	ac e0       	ldi	r26, 0x0C	; 12
    38a4:	b2 e4       	ldi	r27, 0x42	; 66
    38a6:	8d ab       	std	Y+53, r24	; 0x35
    38a8:	9e ab       	std	Y+54, r25	; 0x36
    38aa:	af ab       	std	Y+55, r26	; 0x37
    38ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ae:	6d a9       	ldd	r22, Y+53	; 0x35
    38b0:	7e a9       	ldd	r23, Y+54	; 0x36
    38b2:	8f a9       	ldd	r24, Y+55	; 0x37
    38b4:	98 ad       	ldd	r25, Y+56	; 0x38
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	4a ef       	ldi	r20, 0xFA	; 250
    38bc:	54 e4       	ldi	r21, 0x44	; 68
    38be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c2:	dc 01       	movw	r26, r24
    38c4:	cb 01       	movw	r24, r22
    38c6:	89 ab       	std	Y+49, r24	; 0x31
    38c8:	9a ab       	std	Y+50, r25	; 0x32
    38ca:	ab ab       	std	Y+51, r26	; 0x33
    38cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38ce:	69 a9       	ldd	r22, Y+49	; 0x31
    38d0:	7a a9       	ldd	r23, Y+50	; 0x32
    38d2:	8b a9       	ldd	r24, Y+51	; 0x33
    38d4:	9c a9       	ldd	r25, Y+52	; 0x34
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	40 e8       	ldi	r20, 0x80	; 128
    38dc:	5f e3       	ldi	r21, 0x3F	; 63
    38de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e2:	88 23       	and	r24, r24
    38e4:	2c f4       	brge	.+10     	; 0x38f0 <LCD_VoidInit+0x8c>
		__ticks = 1;
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	98 ab       	std	Y+48, r25	; 0x30
    38ec:	8f a7       	std	Y+47, r24	; 0x2f
    38ee:	3f c0       	rjmp	.+126    	; 0x396e <LCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    38f0:	69 a9       	ldd	r22, Y+49	; 0x31
    38f2:	7a a9       	ldd	r23, Y+50	; 0x32
    38f4:	8b a9       	ldd	r24, Y+51	; 0x33
    38f6:	9c a9       	ldd	r25, Y+52	; 0x34
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	3f ef       	ldi	r19, 0xFF	; 255
    38fc:	4f e7       	ldi	r20, 0x7F	; 127
    38fe:	57 e4       	ldi	r21, 0x47	; 71
    3900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3904:	18 16       	cp	r1, r24
    3906:	4c f5       	brge	.+82     	; 0x395a <LCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3908:	6d a9       	ldd	r22, Y+53	; 0x35
    390a:	7e a9       	ldd	r23, Y+54	; 0x36
    390c:	8f a9       	ldd	r24, Y+55	; 0x37
    390e:	98 ad       	ldd	r25, Y+56	; 0x38
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e2       	ldi	r20, 0x20	; 32
    3916:	51 e4       	ldi	r21, 0x41	; 65
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	bc 01       	movw	r22, r24
    3922:	cd 01       	movw	r24, r26
    3924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	98 ab       	std	Y+48, r25	; 0x30
    392e:	8f a7       	std	Y+47, r24	; 0x2f
    3930:	0f c0       	rjmp	.+30     	; 0x3950 <LCD_VoidInit+0xec>
    3932:	88 ec       	ldi	r24, 0xC8	; 200
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	9e a7       	std	Y+46, r25	; 0x2e
    3938:	8d a7       	std	Y+45, r24	; 0x2d
    393a:	8d a5       	ldd	r24, Y+45	; 0x2d
    393c:	9e a5       	ldd	r25, Y+46	; 0x2e
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <LCD_VoidInit+0xda>
    3942:	9e a7       	std	Y+46, r25	; 0x2e
    3944:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3946:	8f a5       	ldd	r24, Y+47	; 0x2f
    3948:	98 a9       	ldd	r25, Y+48	; 0x30
    394a:	01 97       	sbiw	r24, 0x01	; 1
    394c:	98 ab       	std	Y+48, r25	; 0x30
    394e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3950:	8f a5       	ldd	r24, Y+47	; 0x2f
    3952:	98 a9       	ldd	r25, Y+48	; 0x30
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	69 f7       	brne	.-38     	; 0x3932 <LCD_VoidInit+0xce>
    3958:	14 c0       	rjmp	.+40     	; 0x3982 <LCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395a:	69 a9       	ldd	r22, Y+49	; 0x31
    395c:	7a a9       	ldd	r23, Y+50	; 0x32
    395e:	8b a9       	ldd	r24, Y+51	; 0x33
    3960:	9c a9       	ldd	r25, Y+52	; 0x34
    3962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3966:	dc 01       	movw	r26, r24
    3968:	cb 01       	movw	r24, r22
    396a:	98 ab       	std	Y+48, r25	; 0x30
    396c:	8f a7       	std	Y+47, r24	; 0x2f
    396e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3970:	98 a9       	ldd	r25, Y+48	; 0x30
    3972:	9c a7       	std	Y+44, r25	; 0x2c
    3974:	8b a7       	std	Y+43, r24	; 0x2b
    3976:	8b a5       	ldd	r24, Y+43	; 0x2b
    3978:	9c a5       	ldd	r25, Y+44	; 0x2c
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	f1 f7       	brne	.-4      	; 0x397a <LCD_VoidInit+0x116>
    397e:	9c a7       	std	Y+44, r25	; 0x2c
    3980:	8b a7       	std	Y+43, r24	; 0x2b
/*wait the delay */
_delay_ms(35);
/*send the function set */
LCD_VoidSendCommand(0x38);
    3982:	88 e3       	ldi	r24, 0x38	; 56
    3984:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_VoidSendCommand>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	a0 e8       	ldi	r26, 0x80	; 128
    398e:	bf e3       	ldi	r27, 0x3F	; 63
    3990:	8f a3       	std	Y+39, r24	; 0x27
    3992:	98 a7       	std	Y+40, r25	; 0x28
    3994:	a9 a7       	std	Y+41, r26	; 0x29
    3996:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	6f a1       	ldd	r22, Y+39	; 0x27
    399a:	78 a5       	ldd	r23, Y+40	; 0x28
    399c:	89 a5       	ldd	r24, Y+41	; 0x29
    399e:	9a a5       	ldd	r25, Y+42	; 0x2a
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	30 e0       	ldi	r19, 0x00	; 0
    39a4:	4a ef       	ldi	r20, 0xFA	; 250
    39a6:	54 e4       	ldi	r21, 0x44	; 68
    39a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	8b a3       	std	Y+35, r24	; 0x23
    39b2:	9c a3       	std	Y+36, r25	; 0x24
    39b4:	ad a3       	std	Y+37, r26	; 0x25
    39b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39b8:	6b a1       	ldd	r22, Y+35	; 0x23
    39ba:	7c a1       	ldd	r23, Y+36	; 0x24
    39bc:	8d a1       	ldd	r24, Y+37	; 0x25
    39be:	9e a1       	ldd	r25, Y+38	; 0x26
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	40 e8       	ldi	r20, 0x80	; 128
    39c6:	5f e3       	ldi	r21, 0x3F	; 63
    39c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39cc:	88 23       	and	r24, r24
    39ce:	2c f4       	brge	.+10     	; 0x39da <LCD_VoidInit+0x176>
		__ticks = 1;
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	9a a3       	std	Y+34, r25	; 0x22
    39d6:	89 a3       	std	Y+33, r24	; 0x21
    39d8:	3f c0       	rjmp	.+126    	; 0x3a58 <LCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    39da:	6b a1       	ldd	r22, Y+35	; 0x23
    39dc:	7c a1       	ldd	r23, Y+36	; 0x24
    39de:	8d a1       	ldd	r24, Y+37	; 0x25
    39e0:	9e a1       	ldd	r25, Y+38	; 0x26
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	4f e7       	ldi	r20, 0x7F	; 127
    39e8:	57 e4       	ldi	r21, 0x47	; 71
    39ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ee:	18 16       	cp	r1, r24
    39f0:	4c f5       	brge	.+82     	; 0x3a44 <LCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f2:	6f a1       	ldd	r22, Y+39	; 0x27
    39f4:	78 a5       	ldd	r23, Y+40	; 0x28
    39f6:	89 a5       	ldd	r24, Y+41	; 0x29
    39f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39fa:	20 e0       	ldi	r18, 0x00	; 0
    39fc:	30 e0       	ldi	r19, 0x00	; 0
    39fe:	40 e2       	ldi	r20, 0x20	; 32
    3a00:	51 e4       	ldi	r21, 0x41	; 65
    3a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	bc 01       	movw	r22, r24
    3a0c:	cd 01       	movw	r24, r26
    3a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a12:	dc 01       	movw	r26, r24
    3a14:	cb 01       	movw	r24, r22
    3a16:	9a a3       	std	Y+34, r25	; 0x22
    3a18:	89 a3       	std	Y+33, r24	; 0x21
    3a1a:	0f c0       	rjmp	.+30     	; 0x3a3a <LCD_VoidInit+0x1d6>
    3a1c:	88 ec       	ldi	r24, 0xC8	; 200
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	98 a3       	std	Y+32, r25	; 0x20
    3a22:	8f 8f       	std	Y+31, r24	; 0x1f
    3a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a26:	98 a1       	ldd	r25, Y+32	; 0x20
    3a28:	01 97       	sbiw	r24, 0x01	; 1
    3a2a:	f1 f7       	brne	.-4      	; 0x3a28 <LCD_VoidInit+0x1c4>
    3a2c:	98 a3       	std	Y+32, r25	; 0x20
    3a2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a30:	89 a1       	ldd	r24, Y+33	; 0x21
    3a32:	9a a1       	ldd	r25, Y+34	; 0x22
    3a34:	01 97       	sbiw	r24, 0x01	; 1
    3a36:	9a a3       	std	Y+34, r25	; 0x22
    3a38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a3e:	00 97       	sbiw	r24, 0x00	; 0
    3a40:	69 f7       	brne	.-38     	; 0x3a1c <LCD_VoidInit+0x1b8>
    3a42:	14 c0       	rjmp	.+40     	; 0x3a6c <LCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a44:	6b a1       	ldd	r22, Y+35	; 0x23
    3a46:	7c a1       	ldd	r23, Y+36	; 0x24
    3a48:	8d a1       	ldd	r24, Y+37	; 0x25
    3a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
    3a54:	9a a3       	std	Y+34, r25	; 0x22
    3a56:	89 a3       	std	Y+33, r24	; 0x21
    3a58:	89 a1       	ldd	r24, Y+33	; 0x21
    3a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a5e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <LCD_VoidInit+0x200>
    3a68:	9e 8f       	std	Y+30, r25	; 0x1e
    3a6a:	8d 8f       	std	Y+29, r24	; 0x1d
/*Wait for 39us*/
_delay_ms(1);
/*Send the Display on */
LCD_VoidSendCommand(0x0C);
    3a6c:	8c e0       	ldi	r24, 0x0C	; 12
    3a6e:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_VoidSendCommand>
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	a0 e8       	ldi	r26, 0x80	; 128
    3a78:	bf e3       	ldi	r27, 0x3F	; 63
    3a7a:	89 8f       	std	Y+25, r24	; 0x19
    3a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    3a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    3a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a82:	69 8d       	ldd	r22, Y+25	; 0x19
    3a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a8a:	20 e0       	ldi	r18, 0x00	; 0
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	4a ef       	ldi	r20, 0xFA	; 250
    3a90:	54 e4       	ldi	r21, 0x44	; 68
    3a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	8d 8b       	std	Y+21, r24	; 0x15
    3a9c:	9e 8b       	std	Y+22, r25	; 0x16
    3a9e:	af 8b       	std	Y+23, r26	; 0x17
    3aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	40 e8       	ldi	r20, 0x80	; 128
    3ab0:	5f e3       	ldi	r21, 0x3F	; 63
    3ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab6:	88 23       	and	r24, r24
    3ab8:	2c f4       	brge	.+10     	; 0x3ac4 <LCD_VoidInit+0x260>
		__ticks = 1;
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	9c 8b       	std	Y+20, r25	; 0x14
    3ac0:	8b 8b       	std	Y+19, r24	; 0x13
    3ac2:	3f c0       	rjmp	.+126    	; 0x3b42 <LCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    3ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aca:	98 8d       	ldd	r25, Y+24	; 0x18
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	3f ef       	ldi	r19, 0xFF	; 255
    3ad0:	4f e7       	ldi	r20, 0x7F	; 127
    3ad2:	57 e4       	ldi	r21, 0x47	; 71
    3ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad8:	18 16       	cp	r1, r24
    3ada:	4c f5       	brge	.+82     	; 0x3b2e <LCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3adc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	40 e2       	ldi	r20, 0x20	; 32
    3aea:	51 e4       	ldi	r21, 0x41	; 65
    3aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	bc 01       	movw	r22, r24
    3af6:	cd 01       	movw	r24, r26
    3af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	9c 8b       	std	Y+20, r25	; 0x14
    3b02:	8b 8b       	std	Y+19, r24	; 0x13
    3b04:	0f c0       	rjmp	.+30     	; 0x3b24 <LCD_VoidInit+0x2c0>
    3b06:	88 ec       	ldi	r24, 0xC8	; 200
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	9a 8b       	std	Y+18, r25	; 0x12
    3b0c:	89 8b       	std	Y+17, r24	; 0x11
    3b0e:	89 89       	ldd	r24, Y+17	; 0x11
    3b10:	9a 89       	ldd	r25, Y+18	; 0x12
    3b12:	01 97       	sbiw	r24, 0x01	; 1
    3b14:	f1 f7       	brne	.-4      	; 0x3b12 <LCD_VoidInit+0x2ae>
    3b16:	9a 8b       	std	Y+18, r25	; 0x12
    3b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b1e:	01 97       	sbiw	r24, 0x01	; 1
    3b20:	9c 8b       	std	Y+20, r25	; 0x14
    3b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b24:	8b 89       	ldd	r24, Y+19	; 0x13
    3b26:	9c 89       	ldd	r25, Y+20	; 0x14
    3b28:	00 97       	sbiw	r24, 0x00	; 0
    3b2a:	69 f7       	brne	.-38     	; 0x3b06 <LCD_VoidInit+0x2a2>
    3b2c:	14 c0       	rjmp	.+40     	; 0x3b56 <LCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b30:	7e 89       	ldd	r23, Y+22	; 0x16
    3b32:	8f 89       	ldd	r24, Y+23	; 0x17
    3b34:	98 8d       	ldd	r25, Y+24	; 0x18
    3b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	9c 8b       	std	Y+20, r25	; 0x14
    3b40:	8b 8b       	std	Y+19, r24	; 0x13
    3b42:	8b 89       	ldd	r24, Y+19	; 0x13
    3b44:	9c 89       	ldd	r25, Y+20	; 0x14
    3b46:	98 8b       	std	Y+16, r25	; 0x10
    3b48:	8f 87       	std	Y+15, r24	; 0x0f
    3b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b4c:	98 89       	ldd	r25, Y+16	; 0x10
    3b4e:	01 97       	sbiw	r24, 0x01	; 1
    3b50:	f1 f7       	brne	.-4      	; 0x3b4e <LCD_VoidInit+0x2ea>
    3b52:	98 8b       	std	Y+16, r25	; 0x10
    3b54:	8f 87       	std	Y+15, r24	; 0x0f
/*wait for 39us*/
_delay_ms(1);
/*send the clear*/
LCD_VoidSendCommand(0x01);
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_VoidSendCommand>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 e0       	ldi	r26, 0x00	; 0
    3b62:	b0 e4       	ldi	r27, 0x40	; 64
    3b64:	8b 87       	std	Y+11, r24	; 0x0b
    3b66:	9c 87       	std	Y+12, r25	; 0x0c
    3b68:	ad 87       	std	Y+13, r26	; 0x0d
    3b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	4a ef       	ldi	r20, 0xFA	; 250
    3b7a:	54 e4       	ldi	r21, 0x44	; 68
    3b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	8f 83       	std	Y+7, r24	; 0x07
    3b86:	98 87       	std	Y+8, r25	; 0x08
    3b88:	a9 87       	std	Y+9, r26	; 0x09
    3b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8e:	78 85       	ldd	r23, Y+8	; 0x08
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e8       	ldi	r20, 0x80	; 128
    3b9a:	5f e3       	ldi	r21, 0x3F	; 63
    3b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	2c f4       	brge	.+10     	; 0x3bae <LCD_VoidInit+0x34a>
		__ticks = 1;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	9e 83       	std	Y+6, r25	; 0x06
    3baa:	8d 83       	std	Y+5, r24	; 0x05
    3bac:	3f c0       	rjmp	.+126    	; 0x3c2c <LCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    3bae:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb0:	78 85       	ldd	r23, Y+8	; 0x08
    3bb2:	89 85       	ldd	r24, Y+9	; 0x09
    3bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	3f ef       	ldi	r19, 0xFF	; 255
    3bba:	4f e7       	ldi	r20, 0x7F	; 127
    3bbc:	57 e4       	ldi	r21, 0x47	; 71
    3bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc2:	18 16       	cp	r1, r24
    3bc4:	4c f5       	brge	.+82     	; 0x3c18 <LCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	40 e2       	ldi	r20, 0x20	; 32
    3bd4:	51 e4       	ldi	r21, 0x41	; 65
    3bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	bc 01       	movw	r22, r24
    3be0:	cd 01       	movw	r24, r26
    3be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	9e 83       	std	Y+6, r25	; 0x06
    3bec:	8d 83       	std	Y+5, r24	; 0x05
    3bee:	0f c0       	rjmp	.+30     	; 0x3c0e <LCD_VoidInit+0x3aa>
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	9c 83       	std	Y+4, r25	; 0x04
    3bf6:	8b 83       	std	Y+3, r24	; 0x03
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <LCD_VoidInit+0x398>
    3c00:	9c 83       	std	Y+4, r25	; 0x04
    3c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c04:	8d 81       	ldd	r24, Y+5	; 0x05
    3c06:	9e 81       	ldd	r25, Y+6	; 0x06
    3c08:	01 97       	sbiw	r24, 0x01	; 1
    3c0a:	9e 83       	std	Y+6, r25	; 0x06
    3c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c10:	9e 81       	ldd	r25, Y+6	; 0x06
    3c12:	00 97       	sbiw	r24, 0x00	; 0
    3c14:	69 f7       	brne	.-38     	; 0x3bf0 <LCD_VoidInit+0x38c>
    3c16:	14 c0       	rjmp	.+40     	; 0x3c40 <LCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c18:	6f 81       	ldd	r22, Y+7	; 0x07
    3c1a:	78 85       	ldd	r23, Y+8	; 0x08
    3c1c:	89 85       	ldd	r24, Y+9	; 0x09
    3c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	9e 83       	std	Y+6, r25	; 0x06
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	89 81       	ldd	r24, Y+1	; 0x01
    3c36:	9a 81       	ldd	r25, Y+2	; 0x02
    3c38:	01 97       	sbiw	r24, 0x01	; 1
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <LCD_VoidInit+0x3d4>
    3c3c:	9a 83       	std	Y+2, r25	; 0x02
    3c3e:	89 83       	std	Y+1, r24	; 0x01
/*wait for 1.53ms*/
_delay_ms(2);
}
    3c40:	e8 96       	adiw	r28, 0x38	; 56
    3c42:	0f b6       	in	r0, 0x3f	; 63
    3c44:	f8 94       	cli
    3c46:	de bf       	out	0x3e, r29	; 62
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	cd bf       	out	0x3d, r28	; 61
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <LCD_VoidSendString>:



void LCD_VoidSendString(u8 *Address_String)
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	00 d0       	rcall	.+0      	; 0x3c58 <LCD_VoidSendString+0x6>
    3c58:	0f 92       	push	r0
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
    3c5e:	9b 83       	std	Y+3, r25	; 0x03
    3c60:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter = 0;
    3c62:	19 82       	std	Y+1, r1	; 0x01
    3c64:	0e c0       	rjmp	.+28     	; 0x3c82 <LCD_VoidSendString+0x30>


	while (Address_String[Counter] != '\0')
	{
	LCD_VoidSendChar( Address_String[Counter]);
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	28 2f       	mov	r18, r24
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c70:	fc 01       	movw	r30, r24
    3c72:	e2 0f       	add	r30, r18
    3c74:	f3 1f       	adc	r31, r19
    3c76:	80 81       	ld	r24, Z
    3c78:	0e 94 94 1b 	call	0x3728	; 0x3728 <LCD_VoidSendChar>
	Counter++;
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	8f 5f       	subi	r24, 0xFF	; 255
    3c80:	89 83       	std	Y+1, r24	; 0x01
void LCD_VoidSendString(u8 *Address_String)
{
	u8 Counter = 0;


	while (Address_String[Counter] != '\0')
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	28 2f       	mov	r18, r24
    3c86:	30 e0       	ldi	r19, 0x00	; 0
    3c88:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c8c:	fc 01       	movw	r30, r24
    3c8e:	e2 0f       	add	r30, r18
    3c90:	f3 1f       	adc	r31, r19
    3c92:	80 81       	ld	r24, Z
    3c94:	88 23       	and	r24, r24
    3c96:	39 f7       	brne	.-50     	; 0x3c66 <LCD_VoidSendString+0x14>
	{
	LCD_VoidSendChar( Address_String[Counter]);
	Counter++;
	}
}
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <LCD_VoidGoToXY>:


void LCD_VoidGoToXY(u8 Local_XPosition,u8 Local_YPosition)
{
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LCD_VoidGoToXY+0x6>
    3caa:	0f 92       	push	r0
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
    3cb2:	6b 83       	std	Y+3, r22	; 0x03
	 u8 position = 0 ;
    3cb4:	19 82       	std	Y+1, r1	; 0x01

	 if (Local_XPosition == LCD_FirstLine)
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	88 23       	and	r24, r24
    3cba:	19 f4       	brne	.+6      	; 0x3cc2 <LCD_VoidGoToXY+0x1e>
	 {
		 position = LCD_FirstLine + Local_YPosition;
    3cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	03 c0       	rjmp	.+6      	; 0x3cc8 <LCD_VoidGoToXY+0x24>
	 }
	 else
	 {
		 position = LCD_SecondLine + Local_YPosition;
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	80 5c       	subi	r24, 0xC0	; 192
    3cc6:	89 83       	std	Y+1, r24	; 0x01
	 }
	 Set_Bit(position, 7);
    3cc8:	89 81       	ldd	r24, Y+1	; 0x01
    3cca:	80 68       	ori	r24, 0x80	; 128
    3ccc:	89 83       	std	Y+1, r24	; 0x01
	 LCD_VoidSendCommand(position);
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_VoidSendCommand>
}
    3cd4:	0f 90       	pop	r0
    3cd6:	0f 90       	pop	r0
    3cd8:	0f 90       	pop	r0
    3cda:	cf 91       	pop	r28
    3cdc:	df 91       	pop	r29
    3cde:	08 95       	ret

00003ce0 <LCD_VoidSendNumber>:


void LCD_VoidSendNumber(u32 local_U32Number)
{
    3ce0:	df 93       	push	r29
    3ce2:	cf 93       	push	r28
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	66 97       	sbiw	r28, 0x16	; 22
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	6b 8b       	std	Y+19, r22	; 0x13
    3cf6:	7c 8b       	std	Y+20, r23	; 0x14
    3cf8:	8d 8b       	std	Y+21, r24	; 0x15
    3cfa:	9e 8b       	std	Y+22, r25	; 0x16
	u32 Reminder =0;
    3cfc:	1f 82       	std	Y+7, r1	; 0x07
    3cfe:	18 86       	std	Y+8, r1	; 0x08
    3d00:	19 86       	std	Y+9, r1	; 0x09
    3d02:	1a 86       	std	Y+10, r1	; 0x0a
	u16 arr [sizeof(u32)] = {0};
    3d04:	88 e0       	ldi	r24, 0x08	; 8
    3d06:	fe 01       	movw	r30, r28
    3d08:	3b 96       	adiw	r30, 0x0b	; 11
    3d0a:	df 01       	movw	r26, r30
    3d0c:	98 2f       	mov	r25, r24
    3d0e:	1d 92       	st	X+, r1
    3d10:	9a 95       	dec	r25
    3d12:	e9 f7       	brne	.-6      	; 0x3d0e <LCD_VoidSendNumber+0x2e>
	u32 i = 0;
    3d14:	1b 82       	std	Y+3, r1	; 0x03
    3d16:	1c 82       	std	Y+4, r1	; 0x04
    3d18:	1d 82       	std	Y+5, r1	; 0x05
    3d1a:	1e 82       	std	Y+6, r1	; 0x06
    3d1c:	40 c0       	rjmp	.+128    	; 0x3d9e <LCD_VoidSendNumber+0xbe>
	while (local_U32Number != 0)
	{
		Reminder = local_U32Number % 10;
    3d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d20:	9c 89       	ldd	r25, Y+20	; 0x14
    3d22:	ad 89       	ldd	r26, Y+21	; 0x15
    3d24:	be 89       	ldd	r27, Y+22	; 0x16
    3d26:	2a e0       	ldi	r18, 0x0A	; 10
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 1c 38 	call	0x7038	; 0x7038 <__udivmodsi4>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	8f 83       	std	Y+7, r24	; 0x07
    3d3c:	98 87       	std	Y+8, r25	; 0x08
    3d3e:	a9 87       	std	Y+9, r26	; 0x09
    3d40:	ba 87       	std	Y+10, r27	; 0x0a
		local_U32Number /=10;
    3d42:	8b 89       	ldd	r24, Y+19	; 0x13
    3d44:	9c 89       	ldd	r25, Y+20	; 0x14
    3d46:	ad 89       	ldd	r26, Y+21	; 0x15
    3d48:	be 89       	ldd	r27, Y+22	; 0x16
    3d4a:	2a e0       	ldi	r18, 0x0A	; 10
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	40 e0       	ldi	r20, 0x00	; 0
    3d50:	50 e0       	ldi	r21, 0x00	; 0
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 1c 38 	call	0x7038	; 0x7038 <__udivmodsi4>
    3d5a:	da 01       	movw	r26, r20
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	8b 8b       	std	Y+19, r24	; 0x13
    3d60:	9c 8b       	std	Y+20, r25	; 0x14
    3d62:	ad 8b       	std	Y+21, r26	; 0x15
    3d64:	be 8b       	std	Y+22, r27	; 0x16
		arr[i] = Reminder;
    3d66:	8b 81       	ldd	r24, Y+3	; 0x03
    3d68:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6a:	ad 81       	ldd	r26, Y+5	; 0x05
    3d6c:	be 81       	ldd	r27, Y+6	; 0x06
    3d6e:	4f 81       	ldd	r20, Y+7	; 0x07
    3d70:	58 85       	ldd	r21, Y+8	; 0x08
    3d72:	9c 01       	movw	r18, r24
    3d74:	22 0f       	add	r18, r18
    3d76:	33 1f       	adc	r19, r19
    3d78:	ce 01       	movw	r24, r28
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	82 0f       	add	r24, r18
    3d7e:	93 1f       	adc	r25, r19
    3d80:	fc 01       	movw	r30, r24
    3d82:	3a 96       	adiw	r30, 0x0a	; 10
    3d84:	51 83       	std	Z+1, r21	; 0x01
    3d86:	40 83       	st	Z, r20
		i++;
    3d88:	8b 81       	ldd	r24, Y+3	; 0x03
    3d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d8c:	ad 81       	ldd	r26, Y+5	; 0x05
    3d8e:	be 81       	ldd	r27, Y+6	; 0x06
    3d90:	01 96       	adiw	r24, 0x01	; 1
    3d92:	a1 1d       	adc	r26, r1
    3d94:	b1 1d       	adc	r27, r1
    3d96:	8b 83       	std	Y+3, r24	; 0x03
    3d98:	9c 83       	std	Y+4, r25	; 0x04
    3d9a:	ad 83       	std	Y+5, r26	; 0x05
    3d9c:	be 83       	std	Y+6, r27	; 0x06
void LCD_VoidSendNumber(u32 local_U32Number)
{
	u32 Reminder =0;
	u16 arr [sizeof(u32)] = {0};
	u32 i = 0;
	while (local_U32Number != 0)
    3d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    3da0:	9c 89       	ldd	r25, Y+20	; 0x14
    3da2:	ad 89       	ldd	r26, Y+21	; 0x15
    3da4:	be 89       	ldd	r27, Y+22	; 0x16
    3da6:	00 97       	sbiw	r24, 0x00	; 0
    3da8:	a1 05       	cpc	r26, r1
    3daa:	b1 05       	cpc	r27, r1
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <LCD_VoidSendNumber+0xd0>
    3dae:	b7 cf       	rjmp	.-146    	; 0x3d1e <LCD_VoidSendNumber+0x3e>
		local_U32Number /=10;
		arr[i] = Reminder;
		i++;
	}

	for(int count = i-1; count >=0; count--)
    3db0:	8b 81       	ldd	r24, Y+3	; 0x03
    3db2:	9c 81       	ldd	r25, Y+4	; 0x04
    3db4:	01 97       	sbiw	r24, 0x01	; 1
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	89 83       	std	Y+1, r24	; 0x01
    3dba:	15 c0       	rjmp	.+42     	; 0x3de6 <LCD_VoidSendNumber+0x106>
	{
		LCD_VoidSendChar(arr[count] + '0');
    3dbc:	89 81       	ldd	r24, Y+1	; 0x01
    3dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc0:	9c 01       	movw	r18, r24
    3dc2:	22 0f       	add	r18, r18
    3dc4:	33 1f       	adc	r19, r19
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	01 96       	adiw	r24, 0x01	; 1
    3dca:	82 0f       	add	r24, r18
    3dcc:	93 1f       	adc	r25, r19
    3dce:	fc 01       	movw	r30, r24
    3dd0:	3a 96       	adiw	r30, 0x0a	; 10
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	80 5d       	subi	r24, 0xD0	; 208
    3dd8:	0e 94 94 1b 	call	0x3728	; 0x3728 <LCD_VoidSendChar>
		local_U32Number /=10;
		arr[i] = Reminder;
		i++;
	}

	for(int count = i-1; count >=0; count--)
    3ddc:	89 81       	ldd	r24, Y+1	; 0x01
    3dde:	9a 81       	ldd	r25, Y+2	; 0x02
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	9a 83       	std	Y+2, r25	; 0x02
    3de4:	89 83       	std	Y+1, r24	; 0x01
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	9a 81       	ldd	r25, Y+2	; 0x02
    3dea:	99 23       	and	r25, r25
    3dec:	3c f7       	brge	.-50     	; 0x3dbc <LCD_VoidSendNumber+0xdc>
	{
		LCD_VoidSendChar(arr[count] + '0');
	}
}
    3dee:	66 96       	adiw	r28, 0x16	; 22
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	f8 94       	cli
    3df4:	de bf       	out	0x3e, r29	; 62
    3df6:	0f be       	out	0x3f, r0	; 63
    3df8:	cd bf       	out	0x3d, r28	; 61
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	08 95       	ret

00003e00 <Kpd_voidInit>:
#include "../Header/Kpd_Interface.h"



void Kpd_voidInit()
{
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(Kpd_ColomGroup,Kpd_Colom0,Output);
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	41 e0       	ldi	r20, 0x01	; 1
    3e0e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_ColomGroup,Kpd_Colom1,Output);
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	41 e0       	ldi	r20, 0x01	; 1
    3e18:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_ColomGroup,Kpd_Colom2,Output);
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	62 e0       	ldi	r22, 0x02	; 2
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_ColomGroup,Kpd_Colom3,Output);
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	63 e0       	ldi	r22, 0x03	; 3
    3e2a:	41 e0       	ldi	r20, 0x01	; 1
    3e2c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>

	DIO_u8SetPinValue(Kpd_ColomGroup,Kpd_Colom0,High);
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	41 e0       	ldi	r20, 0x01	; 1
    3e36:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_ColomGroup,Kpd_Colom1,High);
    3e3a:	81 e0       	ldi	r24, 0x01	; 1
    3e3c:	61 e0       	ldi	r22, 0x01	; 1
    3e3e:	41 e0       	ldi	r20, 0x01	; 1
    3e40:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_ColomGroup,Kpd_Colom2,High);
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	62 e0       	ldi	r22, 0x02	; 2
    3e48:	41 e0       	ldi	r20, 0x01	; 1
    3e4a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_ColomGroup,Kpd_Colom3,High);
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	63 e0       	ldi	r22, 0x03	; 3
    3e52:	41 e0       	ldi	r20, 0x01	; 1
    3e54:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>

	DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row0,Input);
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	64 e0       	ldi	r22, 0x04	; 4
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row1,Input);
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	65 e0       	ldi	r22, 0x05	; 5
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row2,Input);
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	66 e0       	ldi	r22, 0x06	; 6
    3e70:	40 e0       	ldi	r20, 0x00	; 0
    3e72:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(Kpd_RowGroup,Kpd_Row3,Input);
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	67 e0       	ldi	r22, 0x07	; 7
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>


	DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row0,High);
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	64 e0       	ldi	r22, 0x04	; 4
    3e84:	41 e0       	ldi	r20, 0x01	; 1
    3e86:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row1,High);
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	65 e0       	ldi	r22, 0x05	; 5
    3e8e:	41 e0       	ldi	r20, 0x01	; 1
    3e90:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row2,High);
    3e94:	81 e0       	ldi	r24, 0x01	; 1
    3e96:	66 e0       	ldi	r22, 0x06	; 6
    3e98:	41 e0       	ldi	r20, 0x01	; 1
    3e9a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Kpd_RowGroup,Kpd_Row3,High);
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	67 e0       	ldi	r22, 0x07	; 7
    3ea2:	41 e0       	ldi	r20, 0x01	; 1
    3ea4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>

}
    3ea8:	cf 91       	pop	r28
    3eaa:	df 91       	pop	r29
    3eac:	08 95       	ret

00003eae <Kpd_u8CheckPressed>:


u8 Kpd_u8CheckPressed()
{
    3eae:	df 93       	push	r29
    3eb0:	cf 93       	push	r28
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	2d 97       	sbiw	r28, 0x0d	; 13
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
	u8 ColomCounter = 0;
    3ec2:	1b 82       	std	Y+3, r1	; 0x03
	u8 RowCounter   = 0;
    3ec4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_Value =NotPressed;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	8c 83       	std	Y+4, r24	; 0x04
	u8 Value = Kpd_NotPressed;
    3eca:	8f ef       	ldi	r24, 0xFF	; 255
    3ecc:	89 83       	std	Y+1, r24	; 0x01
	u8 Colom_Arr[Coloms_numbers] = {Kpd_Colom0, Kpd_Colom1, Kpd_Colom2, Kpd_Colom3};
    3ece:	1d 82       	std	Y+5, r1	; 0x05
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	8e 83       	std	Y+6, r24	; 0x06
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	8f 83       	std	Y+7, r24	; 0x07
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	88 87       	std	Y+8, r24	; 0x08
	u8 Row_Arr[Rows_numbers]     = {Kpd_Row0, Kpd_Row1, Kpd_Row2, Kpd_Row3};
    3edc:	84 e0       	ldi	r24, 0x04	; 4
    3ede:	89 87       	std	Y+9, r24	; 0x09
    3ee0:	85 e0       	ldi	r24, 0x05	; 5
    3ee2:	8a 87       	std	Y+10, r24	; 0x0a
    3ee4:	86 e0       	ldi	r24, 0x06	; 6
    3ee6:	8b 87       	std	Y+11, r24	; 0x0b
    3ee8:	87 e0       	ldi	r24, 0x07	; 7
    3eea:	8c 87       	std	Y+12, r24	; 0x0c

	for (ColomCounter=Kpd_Colom0; ColomCounter<= Kpd_Colom3; ColomCounter++)
    3eec:	1b 82       	std	Y+3, r1	; 0x03
    3eee:	7f c0       	rjmp	.+254    	; 0x3fee <Kpd_u8CheckPressed+0x140>
	{
		DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], Low);
    3ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	30 e0       	ldi	r19, 0x00	; 0
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	05 96       	adiw	r24, 0x05	; 5
    3efa:	fc 01       	movw	r30, r24
    3efc:	e2 0f       	add	r30, r18
    3efe:	f3 1f       	adc	r31, r19
    3f00:	90 81       	ld	r25, Z
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	69 2f       	mov	r22, r25
    3f06:	40 e0       	ldi	r20, 0x00	; 0
    3f08:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
		for (RowCounter=Kpd_Row0; RowCounter <= Kpd_Row3; RowCounter++)
    3f0c:	84 e0       	ldi	r24, 0x04	; 4
    3f0e:	8a 83       	std	Y+2, r24	; 0x02
    3f10:	59 c0       	rjmp	.+178    	; 0x3fc4 <Kpd_u8CheckPressed+0x116>
		{
			DIO_u8GetBitValue(Kpd_RowGroup, Row_Arr[RowCounter - Kpd_Row0], &Local_Value);
    3f12:	8a 81       	ldd	r24, Y+2	; 0x02
    3f14:	88 2f       	mov	r24, r24
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	9c 01       	movw	r18, r24
    3f1a:	24 50       	subi	r18, 0x04	; 4
    3f1c:	30 40       	sbci	r19, 0x00	; 0
    3f1e:	ce 01       	movw	r24, r28
    3f20:	09 96       	adiw	r24, 0x09	; 9
    3f22:	fc 01       	movw	r30, r24
    3f24:	e2 0f       	add	r30, r18
    3f26:	f3 1f       	adc	r31, r19
    3f28:	90 81       	ld	r25, Z
    3f2a:	9e 01       	movw	r18, r28
    3f2c:	2c 5f       	subi	r18, 0xFC	; 252
    3f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	69 2f       	mov	r22, r25
    3f34:	a9 01       	movw	r20, r18
    3f36:	0e 94 3a 10 	call	0x2074	; 0x2074 <DIO_u8GetBitValue>

			if(Local_Value == Low)
    3f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f3c:	88 23       	and	r24, r24
    3f3e:	09 f0       	breq	.+2      	; 0x3f42 <Kpd_u8CheckPressed+0x94>
    3f40:	3e c0       	rjmp	.+124    	; 0x3fbe <Kpd_u8CheckPressed+0x110>
			{
				Value = Kpd_values[RowCounter - Kpd_Row0][ColomCounter];
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	88 2f       	mov	r24, r24
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	ac 01       	movw	r20, r24
    3f4a:	44 50       	subi	r20, 0x04	; 4
    3f4c:	50 40       	sbci	r21, 0x00	; 0
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	28 2f       	mov	r18, r24
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	ca 01       	movw	r24, r20
    3f56:	88 0f       	add	r24, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	88 0f       	add	r24, r24
    3f5c:	99 1f       	adc	r25, r25
    3f5e:	82 0f       	add	r24, r18
    3f60:	93 1f       	adc	r25, r19
    3f62:	fc 01       	movw	r30, r24
    3f64:	e8 56       	subi	r30, 0x68	; 104
    3f66:	fe 4f       	sbci	r31, 0xFE	; 254
    3f68:	80 81       	ld	r24, Z
    3f6a:	89 83       	std	Y+1, r24	; 0x01
    3f6c:	14 c0       	rjmp	.+40     	; 0x3f96 <Kpd_u8CheckPressed+0xe8>
				while (Local_Value == Low)
				{
					DIO_u8GetBitValue(Kpd_RowGroup, Row_Arr[RowCounter - Kpd_Row0], &Local_Value);
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	88 2f       	mov	r24, r24
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	9c 01       	movw	r18, r24
    3f76:	24 50       	subi	r18, 0x04	; 4
    3f78:	30 40       	sbci	r19, 0x00	; 0
    3f7a:	ce 01       	movw	r24, r28
    3f7c:	09 96       	adiw	r24, 0x09	; 9
    3f7e:	fc 01       	movw	r30, r24
    3f80:	e2 0f       	add	r30, r18
    3f82:	f3 1f       	adc	r31, r19
    3f84:	90 81       	ld	r25, Z
    3f86:	9e 01       	movw	r18, r28
    3f88:	2c 5f       	subi	r18, 0xFC	; 252
    3f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	69 2f       	mov	r22, r25
    3f90:	a9 01       	movw	r20, r18
    3f92:	0e 94 3a 10 	call	0x2074	; 0x2074 <DIO_u8GetBitValue>
			DIO_u8GetBitValue(Kpd_RowGroup, Row_Arr[RowCounter - Kpd_Row0], &Local_Value);

			if(Local_Value == Low)
			{
				Value = Kpd_values[RowCounter - Kpd_Row0][ColomCounter];
				while (Local_Value == Low)
    3f96:	8c 81       	ldd	r24, Y+4	; 0x04
    3f98:	88 23       	and	r24, r24
    3f9a:	49 f3       	breq	.-46     	; 0x3f6e <Kpd_u8CheckPressed+0xc0>
				{
					DIO_u8GetBitValue(Kpd_RowGroup, Row_Arr[RowCounter - Kpd_Row0], &Local_Value);
				}
				DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], High);
    3f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9e:	28 2f       	mov	r18, r24
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	ce 01       	movw	r24, r28
    3fa4:	05 96       	adiw	r24, 0x05	; 5
    3fa6:	fc 01       	movw	r30, r24
    3fa8:	e2 0f       	add	r30, r18
    3faa:	f3 1f       	adc	r31, r19
    3fac:	90 81       	ld	r25, Z
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	69 2f       	mov	r22, r25
    3fb2:	41 e0       	ldi	r20, 0x01	; 1
    3fb4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
				return Value;
    3fb8:	89 81       	ldd	r24, Y+1	; 0x01
    3fba:	8d 87       	std	Y+13, r24	; 0x0d
    3fbc:	1e c0       	rjmp	.+60     	; 0x3ffa <Kpd_u8CheckPressed+0x14c>
	u8 Row_Arr[Rows_numbers]     = {Kpd_Row0, Kpd_Row1, Kpd_Row2, Kpd_Row3};

	for (ColomCounter=Kpd_Colom0; ColomCounter<= Kpd_Colom3; ColomCounter++)
	{
		DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], Low);
		for (RowCounter=Kpd_Row0; RowCounter <= Kpd_Row3; RowCounter++)
    3fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc0:	8f 5f       	subi	r24, 0xFF	; 255
    3fc2:	8a 83       	std	Y+2, r24	; 0x02
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	88 30       	cpi	r24, 0x08	; 8
    3fc8:	08 f4       	brcc	.+2      	; 0x3fcc <Kpd_u8CheckPressed+0x11e>
    3fca:	a3 cf       	rjmp	.-186    	; 0x3f12 <Kpd_u8CheckPressed+0x64>
				}
				DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], High);
				return Value;
			}
		}
		DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], High);
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	28 2f       	mov	r18, r24
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	05 96       	adiw	r24, 0x05	; 5
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	e2 0f       	add	r30, r18
    3fda:	f3 1f       	adc	r31, r19
    3fdc:	90 81       	ld	r25, Z
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	69 2f       	mov	r22, r25
    3fe2:	41 e0       	ldi	r20, 0x01	; 1
    3fe4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
	u8 Local_Value =NotPressed;
	u8 Value = Kpd_NotPressed;
	u8 Colom_Arr[Coloms_numbers] = {Kpd_Colom0, Kpd_Colom1, Kpd_Colom2, Kpd_Colom3};
	u8 Row_Arr[Rows_numbers]     = {Kpd_Row0, Kpd_Row1, Kpd_Row2, Kpd_Row3};

	for (ColomCounter=Kpd_Colom0; ColomCounter<= Kpd_Colom3; ColomCounter++)
    3fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fea:	8f 5f       	subi	r24, 0xFF	; 255
    3fec:	8b 83       	std	Y+3, r24	; 0x03
    3fee:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff0:	84 30       	cpi	r24, 0x04	; 4
    3ff2:	08 f4       	brcc	.+2      	; 0x3ff6 <Kpd_u8CheckPressed+0x148>
    3ff4:	7d cf       	rjmp	.-262    	; 0x3ef0 <Kpd_u8CheckPressed+0x42>
				return Value;
			}
		}
		DIO_u8SetPinValue(Kpd_ColomGroup, Colom_Arr[ColomCounter], High);
	}
	return Value;
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	8d 87       	std	Y+13, r24	; 0x0d
    3ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    3ffc:	2d 96       	adiw	r28, 0x0d	; 13
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    4016:	27 97       	sbiw	r28, 0x07	; 7
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61
    4022:	9d 83       	std	Y+5, r25	; 0x05
    4024:	8c 83       	std	Y+4, r24	; 0x04
    4026:	6e 83       	std	Y+6, r22	; 0x06
    4028:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    402a:	8a e1       	ldi	r24, 0x1A	; 26
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 df 22 	call	0x45be	; 0x45be <pvPortMalloc>
    4032:	9a 83       	std	Y+2, r25	; 0x02
    4034:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    4036:	89 81       	ldd	r24, Y+1	; 0x01
    4038:	9a 81       	ldd	r25, Y+2	; 0x02
    403a:	00 97       	sbiw	r24, 0x00	; 0
    403c:	09 f4       	brne	.+2      	; 0x4040 <xCoRoutineCreate+0x32>
    403e:	6f c0       	rjmp	.+222    	; 0x411e <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    4040:	80 91 b3 01 	lds	r24, 0x01B3
    4044:	90 91 b4 01 	lds	r25, 0x01B4
    4048:	00 97       	sbiw	r24, 0x00	; 0
    404a:	41 f4       	brne	.+16     	; 0x405c <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    404c:	89 81       	ldd	r24, Y+1	; 0x01
    404e:	9a 81       	ldd	r25, Y+2	; 0x02
    4050:	90 93 b4 01 	sts	0x01B4, r25
    4054:	80 93 b3 01 	sts	0x01B3, r24
			prvInitialiseCoRoutineLists();
    4058:	0e 94 6e 22 	call	0x44dc	; 0x44dc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    405c:	8e 81       	ldd	r24, Y+6	; 0x06
    405e:	82 30       	cpi	r24, 0x02	; 2
    4060:	10 f0       	brcs	.+4      	; 0x4066 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    4066:	e9 81       	ldd	r30, Y+1	; 0x01
    4068:	fa 81       	ldd	r31, Y+2	; 0x02
    406a:	11 8e       	std	Z+25, r1	; 0x19
    406c:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    406e:	e9 81       	ldd	r30, Y+1	; 0x01
    4070:	fa 81       	ldd	r31, Y+2	; 0x02
    4072:	8e 81       	ldd	r24, Y+6	; 0x06
    4074:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    4076:	e9 81       	ldd	r30, Y+1	; 0x01
    4078:	fa 81       	ldd	r31, Y+2	; 0x02
    407a:	8f 81       	ldd	r24, Y+7	; 0x07
    407c:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    407e:	e9 81       	ldd	r30, Y+1	; 0x01
    4080:	fa 81       	ldd	r31, Y+2	; 0x02
    4082:	8c 81       	ldd	r24, Y+4	; 0x04
    4084:	9d 81       	ldd	r25, Y+5	; 0x05
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	9a 81       	ldd	r25, Y+2	; 0x02
    408e:	02 96       	adiw	r24, 0x02	; 2
    4090:	0e 94 75 23 	call	0x46ea	; 0x46ea <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	9a 81       	ldd	r25, Y+2	; 0x02
    4098:	0c 96       	adiw	r24, 0x0c	; 12
    409a:	0e 94 75 23 	call	0x46ea	; 0x46ea <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    409e:	e9 81       	ldd	r30, Y+1	; 0x01
    40a0:	fa 81       	ldd	r31, Y+2	; 0x02
    40a2:	89 81       	ldd	r24, Y+1	; 0x01
    40a4:	9a 81       	ldd	r25, Y+2	; 0x02
    40a6:	91 87       	std	Z+9, r25	; 0x09
    40a8:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    40aa:	e9 81       	ldd	r30, Y+1	; 0x01
    40ac:	fa 81       	ldd	r31, Y+2	; 0x02
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	9a 81       	ldd	r25, Y+2	; 0x02
    40b2:	93 8b       	std	Z+19, r25	; 0x13
    40b4:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    40b6:	8e 81       	ldd	r24, Y+6	; 0x06
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	85 e0       	ldi	r24, 0x05	; 5
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	82 1b       	sub	r24, r18
    40c2:	93 0b       	sbc	r25, r19
    40c4:	e9 81       	ldd	r30, Y+1	; 0x01
    40c6:	fa 81       	ldd	r31, Y+2	; 0x02
    40c8:	95 87       	std	Z+13, r25	; 0x0d
    40ca:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    40cc:	e9 81       	ldd	r30, Y+1	; 0x01
    40ce:	fa 81       	ldd	r31, Y+2	; 0x02
    40d0:	96 89       	ldd	r25, Z+22	; 0x16
    40d2:	80 91 b5 01 	lds	r24, 0x01B5
    40d6:	89 17       	cp	r24, r25
    40d8:	28 f4       	brcc	.+10     	; 0x40e4 <xCoRoutineCreate+0xd6>
    40da:	e9 81       	ldd	r30, Y+1	; 0x01
    40dc:	fa 81       	ldd	r31, Y+2	; 0x02
    40de:	86 89       	ldd	r24, Z+22	; 0x16
    40e0:	80 93 b5 01 	sts	0x01B5, r24
    40e4:	e9 81       	ldd	r30, Y+1	; 0x01
    40e6:	fa 81       	ldd	r31, Y+2	; 0x02
    40e8:	86 89       	ldd	r24, Z+22	; 0x16
    40ea:	28 2f       	mov	r18, r24
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	c9 01       	movw	r24, r18
    40f0:	88 0f       	add	r24, r24
    40f2:	99 1f       	adc	r25, r25
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	88 0f       	add	r24, r24
    40fa:	99 1f       	adc	r25, r25
    40fc:	82 0f       	add	r24, r18
    40fe:	93 1f       	adc	r25, r19
    4100:	ac 01       	movw	r20, r24
    4102:	44 54       	subi	r20, 0x44	; 68
    4104:	5e 4f       	sbci	r21, 0xFE	; 254
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	9a 81       	ldd	r25, Y+2	; 0x02
    410a:	9c 01       	movw	r18, r24
    410c:	2e 5f       	subi	r18, 0xFE	; 254
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	ca 01       	movw	r24, r20
    4112:	b9 01       	movw	r22, r18
    4114:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>

		xReturn = pdPASS;
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	8b 83       	std	Y+3, r24	; 0x03
    411c:	02 c0       	rjmp	.+4      	; 0x4122 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    411e:	8f ef       	ldi	r24, 0xFF	; 255
    4120:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    4122:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4124:	27 96       	adiw	r28, 0x07	; 7
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	cf 91       	pop	r28
    4132:	df 91       	pop	r29
    4134:	08 95       	ret

00004136 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	00 d0       	rcall	.+0      	; 0x413c <vCoRoutineAddToDelayedList+0x6>
    413c:	00 d0       	rcall	.+0      	; 0x413e <vCoRoutineAddToDelayedList+0x8>
    413e:	00 d0       	rcall	.+0      	; 0x4140 <vCoRoutineAddToDelayedList+0xa>
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	9c 83       	std	Y+4, r25	; 0x04
    4146:	8b 83       	std	Y+3, r24	; 0x03
    4148:	7e 83       	std	Y+6, r23	; 0x06
    414a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    414c:	20 91 b6 01 	lds	r18, 0x01B6
    4150:	30 91 b7 01 	lds	r19, 0x01B7
    4154:	8b 81       	ldd	r24, Y+3	; 0x03
    4156:	9c 81       	ldd	r25, Y+4	; 0x04
    4158:	82 0f       	add	r24, r18
    415a:	93 1f       	adc	r25, r19
    415c:	9a 83       	std	Y+2, r25	; 0x02
    415e:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    4160:	80 91 b3 01 	lds	r24, 0x01B3
    4164:	90 91 b4 01 	lds	r25, 0x01B4
    4168:	02 96       	adiw	r24, 0x02	; 2
    416a:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    416e:	e0 91 b3 01 	lds	r30, 0x01B3
    4172:	f0 91 b4 01 	lds	r31, 0x01B4
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	9a 81       	ldd	r25, Y+2	; 0x02
    417a:	93 83       	std	Z+3, r25	; 0x03
    417c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    417e:	20 91 b6 01 	lds	r18, 0x01B6
    4182:	30 91 b7 01 	lds	r19, 0x01B7
    4186:	89 81       	ldd	r24, Y+1	; 0x01
    4188:	9a 81       	ldd	r25, Y+2	; 0x02
    418a:	82 17       	cp	r24, r18
    418c:	93 07       	cpc	r25, r19
    418e:	70 f4       	brcc	.+28     	; 0x41ac <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    4190:	80 91 e2 01 	lds	r24, 0x01E2
    4194:	90 91 e3 01 	lds	r25, 0x01E3
    4198:	20 91 b3 01 	lds	r18, 0x01B3
    419c:	30 91 b4 01 	lds	r19, 0x01B4
    41a0:	2e 5f       	subi	r18, 0xFE	; 254
    41a2:	3f 4f       	sbci	r19, 0xFF	; 255
    41a4:	b9 01       	movw	r22, r18
    41a6:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>
    41aa:	0d c0       	rjmp	.+26     	; 0x41c6 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    41ac:	80 91 e0 01 	lds	r24, 0x01E0
    41b0:	90 91 e1 01 	lds	r25, 0x01E1
    41b4:	20 91 b3 01 	lds	r18, 0x01B3
    41b8:	30 91 b4 01 	lds	r19, 0x01B4
    41bc:	2e 5f       	subi	r18, 0xFE	; 254
    41be:	3f 4f       	sbci	r19, 0xFF	; 255
    41c0:	b9 01       	movw	r22, r18
    41c2:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>
	}

	if( pxEventList )
    41c6:	8d 81       	ldd	r24, Y+5	; 0x05
    41c8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ca:	00 97       	sbiw	r24, 0x00	; 0
    41cc:	61 f0       	breq	.+24     	; 0x41e6 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    41ce:	80 91 b3 01 	lds	r24, 0x01B3
    41d2:	90 91 b4 01 	lds	r25, 0x01B4
    41d6:	9c 01       	movw	r18, r24
    41d8:	24 5f       	subi	r18, 0xF4	; 244
    41da:	3f 4f       	sbci	r19, 0xFF	; 255
    41dc:	8d 81       	ldd	r24, Y+5	; 0x05
    41de:	9e 81       	ldd	r25, Y+6	; 0x06
    41e0:	b9 01       	movw	r22, r18
    41e2:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>
	}
}
    41e6:	26 96       	adiw	r28, 0x06	; 6
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	cf 91       	pop	r28
    41f4:	df 91       	pop	r29
    41f6:	08 95       	ret

000041f8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	00 d0       	rcall	.+0      	; 0x41fe <prvCheckPendingReadyList+0x6>
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
    4202:	3a c0       	rjmp	.+116    	; 0x4278 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    4204:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    4206:	e0 91 e9 01 	lds	r30, 0x01E9
    420a:	f0 91 ea 01 	lds	r31, 0x01EA
    420e:	86 81       	ldd	r24, Z+6	; 0x06
    4210:	97 81       	ldd	r25, Z+7	; 0x07
    4212:	9a 83       	std	Y+2, r25	; 0x02
    4214:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    4216:	89 81       	ldd	r24, Y+1	; 0x01
    4218:	9a 81       	ldd	r25, Y+2	; 0x02
    421a:	0c 96       	adiw	r24, 0x0c	; 12
    421c:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
		}
		portENABLE_INTERRUPTS();
    4220:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	02 96       	adiw	r24, 0x02	; 2
    4228:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    422c:	e9 81       	ldd	r30, Y+1	; 0x01
    422e:	fa 81       	ldd	r31, Y+2	; 0x02
    4230:	96 89       	ldd	r25, Z+22	; 0x16
    4232:	80 91 b5 01 	lds	r24, 0x01B5
    4236:	89 17       	cp	r24, r25
    4238:	28 f4       	brcc	.+10     	; 0x4244 <prvCheckPendingReadyList+0x4c>
    423a:	e9 81       	ldd	r30, Y+1	; 0x01
    423c:	fa 81       	ldd	r31, Y+2	; 0x02
    423e:	86 89       	ldd	r24, Z+22	; 0x16
    4240:	80 93 b5 01 	sts	0x01B5, r24
    4244:	e9 81       	ldd	r30, Y+1	; 0x01
    4246:	fa 81       	ldd	r31, Y+2	; 0x02
    4248:	86 89       	ldd	r24, Z+22	; 0x16
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	c9 01       	movw	r24, r18
    4250:	88 0f       	add	r24, r24
    4252:	99 1f       	adc	r25, r25
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	88 0f       	add	r24, r24
    425a:	99 1f       	adc	r25, r25
    425c:	82 0f       	add	r24, r18
    425e:	93 1f       	adc	r25, r19
    4260:	ac 01       	movw	r20, r24
    4262:	44 54       	subi	r20, 0x44	; 68
    4264:	5e 4f       	sbci	r21, 0xFE	; 254
    4266:	89 81       	ldd	r24, Y+1	; 0x01
    4268:	9a 81       	ldd	r25, Y+2	; 0x02
    426a:	9c 01       	movw	r18, r24
    426c:	2e 5f       	subi	r18, 0xFE	; 254
    426e:	3f 4f       	sbci	r19, 0xFF	; 255
    4270:	ca 01       	movw	r24, r20
    4272:	b9 01       	movw	r22, r18
    4274:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    4278:	80 91 e4 01 	lds	r24, 0x01E4
    427c:	88 23       	and	r24, r24
    427e:	09 f0       	breq	.+2      	; 0x4282 <prvCheckPendingReadyList+0x8a>
    4280:	c1 cf       	rjmp	.-126    	; 0x4204 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	cf 91       	pop	r28
    4288:	df 91       	pop	r29
    428a:	08 95       	ret

0000428c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    428c:	df 93       	push	r29
    428e:	cf 93       	push	r28
    4290:	00 d0       	rcall	.+0      	; 0x4292 <prvCheckDelayedList+0x6>
    4292:	00 d0       	rcall	.+0      	; 0x4294 <prvCheckDelayedList+0x8>
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    4298:	0e 94 ab 2e 	call	0x5d56	; 0x5d56 <xTaskGetTickCount>
    429c:	20 91 b8 01 	lds	r18, 0x01B8
    42a0:	30 91 b9 01 	lds	r19, 0x01B9
    42a4:	82 1b       	sub	r24, r18
    42a6:	93 0b       	sbc	r25, r19
    42a8:	90 93 bb 01 	sts	0x01BB, r25
    42ac:	80 93 ba 01 	sts	0x01BA, r24
    42b0:	85 c0       	rjmp	.+266    	; 0x43bc <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    42b2:	80 91 b6 01 	lds	r24, 0x01B6
    42b6:	90 91 b7 01 	lds	r25, 0x01B7
    42ba:	01 96       	adiw	r24, 0x01	; 1
    42bc:	90 93 b7 01 	sts	0x01B7, r25
    42c0:	80 93 b6 01 	sts	0x01B6, r24
		xPassedTicks--;
    42c4:	80 91 ba 01 	lds	r24, 0x01BA
    42c8:	90 91 bb 01 	lds	r25, 0x01BB
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	90 93 bb 01 	sts	0x01BB, r25
    42d2:	80 93 ba 01 	sts	0x01BA, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    42d6:	80 91 b6 01 	lds	r24, 0x01B6
    42da:	90 91 b7 01 	lds	r25, 0x01B7
    42de:	00 97       	sbiw	r24, 0x00	; 0
    42e0:	09 f0       	breq	.+2      	; 0x42e4 <prvCheckDelayedList+0x58>
    42e2:	64 c0       	rjmp	.+200    	; 0x43ac <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    42e4:	80 91 e0 01 	lds	r24, 0x01E0
    42e8:	90 91 e1 01 	lds	r25, 0x01E1
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    42f0:	80 91 e2 01 	lds	r24, 0x01E2
    42f4:	90 91 e3 01 	lds	r25, 0x01E3
    42f8:	90 93 e1 01 	sts	0x01E1, r25
    42fc:	80 93 e0 01 	sts	0x01E0, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	90 93 e3 01 	sts	0x01E3, r25
    4308:	80 93 e2 01 	sts	0x01E2, r24
    430c:	4f c0       	rjmp	.+158    	; 0x43ac <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    430e:	e0 91 e0 01 	lds	r30, 0x01E0
    4312:	f0 91 e1 01 	lds	r31, 0x01E1
    4316:	05 80       	ldd	r0, Z+5	; 0x05
    4318:	f6 81       	ldd	r31, Z+6	; 0x06
    431a:	e0 2d       	mov	r30, r0
    431c:	86 81       	ldd	r24, Z+6	; 0x06
    431e:	97 81       	ldd	r25, Z+7	; 0x07
    4320:	9c 83       	std	Y+4, r25	; 0x04
    4322:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    4324:	eb 81       	ldd	r30, Y+3	; 0x03
    4326:	fc 81       	ldd	r31, Y+4	; 0x04
    4328:	22 81       	ldd	r18, Z+2	; 0x02
    432a:	33 81       	ldd	r19, Z+3	; 0x03
    432c:	80 91 b6 01 	lds	r24, 0x01B6
    4330:	90 91 b7 01 	lds	r25, 0x01B7
    4334:	82 17       	cp	r24, r18
    4336:	93 07       	cpc	r25, r19
    4338:	08 f4       	brcc	.+2      	; 0x433c <prvCheckDelayedList+0xb0>
    433a:	40 c0       	rjmp	.+128    	; 0x43bc <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    433c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    433e:	8b 81       	ldd	r24, Y+3	; 0x03
    4340:	9c 81       	ldd	r25, Y+4	; 0x04
    4342:	02 96       	adiw	r24, 0x02	; 2
    4344:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    4348:	eb 81       	ldd	r30, Y+3	; 0x03
    434a:	fc 81       	ldd	r31, Y+4	; 0x04
    434c:	84 89       	ldd	r24, Z+20	; 0x14
    434e:	95 89       	ldd	r25, Z+21	; 0x15
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	29 f0       	breq	.+10     	; 0x435e <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	9c 81       	ldd	r25, Y+4	; 0x04
    4358:	0c 96       	adiw	r24, 0x0c	; 12
    435a:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    435e:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    4360:	eb 81       	ldd	r30, Y+3	; 0x03
    4362:	fc 81       	ldd	r31, Y+4	; 0x04
    4364:	96 89       	ldd	r25, Z+22	; 0x16
    4366:	80 91 b5 01 	lds	r24, 0x01B5
    436a:	89 17       	cp	r24, r25
    436c:	28 f4       	brcc	.+10     	; 0x4378 <prvCheckDelayedList+0xec>
    436e:	eb 81       	ldd	r30, Y+3	; 0x03
    4370:	fc 81       	ldd	r31, Y+4	; 0x04
    4372:	86 89       	ldd	r24, Z+22	; 0x16
    4374:	80 93 b5 01 	sts	0x01B5, r24
    4378:	eb 81       	ldd	r30, Y+3	; 0x03
    437a:	fc 81       	ldd	r31, Y+4	; 0x04
    437c:	86 89       	ldd	r24, Z+22	; 0x16
    437e:	28 2f       	mov	r18, r24
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	c9 01       	movw	r24, r18
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	82 0f       	add	r24, r18
    4392:	93 1f       	adc	r25, r19
    4394:	ac 01       	movw	r20, r24
    4396:	44 54       	subi	r20, 0x44	; 68
    4398:	5e 4f       	sbci	r21, 0xFE	; 254
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	9c 01       	movw	r18, r24
    43a0:	2e 5f       	subi	r18, 0xFE	; 254
    43a2:	3f 4f       	sbci	r19, 0xFF	; 255
    43a4:	ca 01       	movw	r24, r20
    43a6:	b9 01       	movw	r22, r18
    43a8:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    43ac:	e0 91 e0 01 	lds	r30, 0x01E0
    43b0:	f0 91 e1 01 	lds	r31, 0x01E1
    43b4:	80 81       	ld	r24, Z
    43b6:	88 23       	and	r24, r24
    43b8:	09 f0       	breq	.+2      	; 0x43bc <prvCheckDelayedList+0x130>
    43ba:	a9 cf       	rjmp	.-174    	; 0x430e <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    43bc:	80 91 ba 01 	lds	r24, 0x01BA
    43c0:	90 91 bb 01 	lds	r25, 0x01BB
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	09 f0       	breq	.+2      	; 0x43ca <prvCheckDelayedList+0x13e>
    43c8:	74 cf       	rjmp	.-280    	; 0x42b2 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    43ca:	80 91 b6 01 	lds	r24, 0x01B6
    43ce:	90 91 b7 01 	lds	r25, 0x01B7
    43d2:	90 93 b9 01 	sts	0x01B9, r25
    43d6:	80 93 b8 01 	sts	0x01B8, r24
}
    43da:	0f 90       	pop	r0
    43dc:	0f 90       	pop	r0
    43de:	0f 90       	pop	r0
    43e0:	0f 90       	pop	r0
    43e2:	cf 91       	pop	r28
    43e4:	df 91       	pop	r29
    43e6:	08 95       	ret

000043e8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    43e8:	df 93       	push	r29
    43ea:	cf 93       	push	r28
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <vCoRoutineSchedule+0x6>
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    43f2:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    43f6:	0e 94 46 21 	call	0x428c	; 0x428c <prvCheckDelayedList>
    43fa:	0a c0       	rjmp	.+20     	; 0x4410 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    43fc:	80 91 b5 01 	lds	r24, 0x01B5
    4400:	88 23       	and	r24, r24
    4402:	09 f4       	brne	.+2      	; 0x4406 <vCoRoutineSchedule+0x1e>
    4404:	66 c0       	rjmp	.+204    	; 0x44d2 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    4406:	80 91 b5 01 	lds	r24, 0x01B5
    440a:	81 50       	subi	r24, 0x01	; 1
    440c:	80 93 b5 01 	sts	0x01B5, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    4410:	80 91 b5 01 	lds	r24, 0x01B5
    4414:	28 2f       	mov	r18, r24
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	c9 01       	movw	r24, r18
    441a:	88 0f       	add	r24, r24
    441c:	99 1f       	adc	r25, r25
    441e:	88 0f       	add	r24, r24
    4420:	99 1f       	adc	r25, r25
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	82 0f       	add	r24, r18
    4428:	93 1f       	adc	r25, r19
    442a:	fc 01       	movw	r30, r24
    442c:	e4 54       	subi	r30, 0x44	; 68
    442e:	fe 4f       	sbci	r31, 0xFE	; 254
    4430:	80 81       	ld	r24, Z
    4432:	88 23       	and	r24, r24
    4434:	19 f3       	breq	.-58     	; 0x43fc <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    4436:	80 91 b5 01 	lds	r24, 0x01B5
    443a:	28 2f       	mov	r18, r24
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	c9 01       	movw	r24, r18
    4440:	88 0f       	add	r24, r24
    4442:	99 1f       	adc	r25, r25
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25
    444c:	82 0f       	add	r24, r18
    444e:	93 1f       	adc	r25, r19
    4450:	84 54       	subi	r24, 0x44	; 68
    4452:	9e 4f       	sbci	r25, 0xFE	; 254
    4454:	9a 83       	std	Y+2, r25	; 0x02
    4456:	89 83       	std	Y+1, r24	; 0x01
    4458:	e9 81       	ldd	r30, Y+1	; 0x01
    445a:	fa 81       	ldd	r31, Y+2	; 0x02
    445c:	01 80       	ldd	r0, Z+1	; 0x01
    445e:	f2 81       	ldd	r31, Z+2	; 0x02
    4460:	e0 2d       	mov	r30, r0
    4462:	82 81       	ldd	r24, Z+2	; 0x02
    4464:	93 81       	ldd	r25, Z+3	; 0x03
    4466:	e9 81       	ldd	r30, Y+1	; 0x01
    4468:	fa 81       	ldd	r31, Y+2	; 0x02
    446a:	92 83       	std	Z+2, r25	; 0x02
    446c:	81 83       	std	Z+1, r24	; 0x01
    446e:	e9 81       	ldd	r30, Y+1	; 0x01
    4470:	fa 81       	ldd	r31, Y+2	; 0x02
    4472:	21 81       	ldd	r18, Z+1	; 0x01
    4474:	32 81       	ldd	r19, Z+2	; 0x02
    4476:	89 81       	ldd	r24, Y+1	; 0x01
    4478:	9a 81       	ldd	r25, Y+2	; 0x02
    447a:	03 96       	adiw	r24, 0x03	; 3
    447c:	28 17       	cp	r18, r24
    447e:	39 07       	cpc	r19, r25
    4480:	59 f4       	brne	.+22     	; 0x4498 <vCoRoutineSchedule+0xb0>
    4482:	e9 81       	ldd	r30, Y+1	; 0x01
    4484:	fa 81       	ldd	r31, Y+2	; 0x02
    4486:	01 80       	ldd	r0, Z+1	; 0x01
    4488:	f2 81       	ldd	r31, Z+2	; 0x02
    448a:	e0 2d       	mov	r30, r0
    448c:	82 81       	ldd	r24, Z+2	; 0x02
    448e:	93 81       	ldd	r25, Z+3	; 0x03
    4490:	e9 81       	ldd	r30, Y+1	; 0x01
    4492:	fa 81       	ldd	r31, Y+2	; 0x02
    4494:	92 83       	std	Z+2, r25	; 0x02
    4496:	81 83       	std	Z+1, r24	; 0x01
    4498:	e9 81       	ldd	r30, Y+1	; 0x01
    449a:	fa 81       	ldd	r31, Y+2	; 0x02
    449c:	01 80       	ldd	r0, Z+1	; 0x01
    449e:	f2 81       	ldd	r31, Z+2	; 0x02
    44a0:	e0 2d       	mov	r30, r0
    44a2:	86 81       	ldd	r24, Z+6	; 0x06
    44a4:	97 81       	ldd	r25, Z+7	; 0x07
    44a6:	90 93 b4 01 	sts	0x01B4, r25
    44aa:	80 93 b3 01 	sts	0x01B3, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    44ae:	e0 91 b3 01 	lds	r30, 0x01B3
    44b2:	f0 91 b4 01 	lds	r31, 0x01B4
    44b6:	40 81       	ld	r20, Z
    44b8:	51 81       	ldd	r21, Z+1	; 0x01
    44ba:	80 91 b3 01 	lds	r24, 0x01B3
    44be:	90 91 b4 01 	lds	r25, 0x01B4
    44c2:	e0 91 b3 01 	lds	r30, 0x01B3
    44c6:	f0 91 b4 01 	lds	r31, 0x01B4
    44ca:	27 89       	ldd	r18, Z+23	; 0x17
    44cc:	62 2f       	mov	r22, r18
    44ce:	fa 01       	movw	r30, r20
    44d0:	09 95       	icall

	return;
}
    44d2:	0f 90       	pop	r0
    44d4:	0f 90       	pop	r0
    44d6:	cf 91       	pop	r28
    44d8:	df 91       	pop	r29
    44da:	08 95       	ret

000044dc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    44dc:	df 93       	push	r29
    44de:	cf 93       	push	r28
    44e0:	0f 92       	push	r0
    44e2:	cd b7       	in	r28, 0x3d	; 61
    44e4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    44e6:	19 82       	std	Y+1, r1	; 0x01
    44e8:	13 c0       	rjmp	.+38     	; 0x4510 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    44ea:	89 81       	ldd	r24, Y+1	; 0x01
    44ec:	28 2f       	mov	r18, r24
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	c9 01       	movw	r24, r18
    44f2:	88 0f       	add	r24, r24
    44f4:	99 1f       	adc	r25, r25
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	88 0f       	add	r24, r24
    44fc:	99 1f       	adc	r25, r25
    44fe:	82 0f       	add	r24, r18
    4500:	93 1f       	adc	r25, r19
    4502:	84 54       	subi	r24, 0x44	; 68
    4504:	9e 4f       	sbci	r25, 0xFE	; 254
    4506:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	8f 5f       	subi	r24, 0xFF	; 255
    450e:	89 83       	std	Y+1, r24	; 0x01
    4510:	89 81       	ldd	r24, Y+1	; 0x01
    4512:	82 30       	cpi	r24, 0x02	; 2
    4514:	50 f3       	brcs	.-44     	; 0x44ea <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    4516:	8e ec       	ldi	r24, 0xCE	; 206
    4518:	91 e0       	ldi	r25, 0x01	; 1
    451a:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    451e:	87 ed       	ldi	r24, 0xD7	; 215
    4520:	91 e0       	ldi	r25, 0x01	; 1
    4522:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    4526:	84 ee       	ldi	r24, 0xE4	; 228
    4528:	91 e0       	ldi	r25, 0x01	; 1
    452a:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    452e:	8e ec       	ldi	r24, 0xCE	; 206
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	90 93 e1 01 	sts	0x01E1, r25
    4536:	80 93 e0 01 	sts	0x01E0, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    453a:	87 ed       	ldi	r24, 0xD7	; 215
    453c:	91 e0       	ldi	r25, 0x01	; 1
    453e:	90 93 e3 01 	sts	0x01E3, r25
    4542:	80 93 e2 01 	sts	0x01E2, r24
}
    4546:	0f 90       	pop	r0
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    454e:	df 93       	push	r29
    4550:	cf 93       	push	r28
    4552:	00 d0       	rcall	.+0      	; 0x4554 <xCoRoutineRemoveFromEventList+0x6>
    4554:	00 d0       	rcall	.+0      	; 0x4556 <xCoRoutineRemoveFromEventList+0x8>
    4556:	0f 92       	push	r0
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	9d 83       	std	Y+5, r25	; 0x05
    455e:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    4560:	ec 81       	ldd	r30, Y+4	; 0x04
    4562:	fd 81       	ldd	r31, Y+5	; 0x05
    4564:	05 80       	ldd	r0, Z+5	; 0x05
    4566:	f6 81       	ldd	r31, Z+6	; 0x06
    4568:	e0 2d       	mov	r30, r0
    456a:	86 81       	ldd	r24, Z+6	; 0x06
    456c:	97 81       	ldd	r25, Z+7	; 0x07
    456e:	9b 83       	std	Y+3, r25	; 0x03
    4570:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    4572:	8a 81       	ldd	r24, Y+2	; 0x02
    4574:	9b 81       	ldd	r25, Y+3	; 0x03
    4576:	0c 96       	adiw	r24, 0x0c	; 12
    4578:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    457c:	8a 81       	ldd	r24, Y+2	; 0x02
    457e:	9b 81       	ldd	r25, Y+3	; 0x03
    4580:	9c 01       	movw	r18, r24
    4582:	24 5f       	subi	r18, 0xF4	; 244
    4584:	3f 4f       	sbci	r19, 0xFF	; 255
    4586:	84 ee       	ldi	r24, 0xE4	; 228
    4588:	91 e0       	ldi	r25, 0x01	; 1
    458a:	b9 01       	movw	r22, r18
    458c:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    4590:	ea 81       	ldd	r30, Y+2	; 0x02
    4592:	fb 81       	ldd	r31, Y+3	; 0x03
    4594:	96 89       	ldd	r25, Z+22	; 0x16
    4596:	e0 91 b3 01 	lds	r30, 0x01B3
    459a:	f0 91 b4 01 	lds	r31, 0x01B4
    459e:	86 89       	ldd	r24, Z+22	; 0x16
    45a0:	98 17       	cp	r25, r24
    45a2:	18 f0       	brcs	.+6      	; 0x45aa <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    45a4:	81 e0       	ldi	r24, 0x01	; 1
    45a6:	89 83       	std	Y+1, r24	; 0x01
    45a8:	01 c0       	rjmp	.+2      	; 0x45ac <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    45aa:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    45ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    45ae:	0f 90       	pop	r0
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	0f 90       	pop	r0
    45b8:	cf 91       	pop	r28
    45ba:	df 91       	pop	r29
    45bc:	08 95       	ret

000045be <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    45be:	df 93       	push	r29
    45c0:	cf 93       	push	r28
    45c2:	00 d0       	rcall	.+0      	; 0x45c4 <pvPortMalloc+0x6>
    45c4:	00 d0       	rcall	.+0      	; 0x45c6 <pvPortMalloc+0x8>
    45c6:	cd b7       	in	r28, 0x3d	; 61
    45c8:	de b7       	in	r29, 0x3e	; 62
    45ca:	9c 83       	std	Y+4, r25	; 0x04
    45cc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    45ce:	1a 82       	std	Y+2, r1	; 0x02
    45d0:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    45d2:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    45d6:	80 91 ed 01 	lds	r24, 0x01ED
    45da:	90 91 ee 01 	lds	r25, 0x01EE
    45de:	2b 81       	ldd	r18, Y+3	; 0x03
    45e0:	3c 81       	ldd	r19, Y+4	; 0x04
    45e2:	82 0f       	add	r24, r18
    45e4:	93 1f       	adc	r25, r19
    45e6:	22 e0       	ldi	r18, 0x02	; 2
    45e8:	88 35       	cpi	r24, 0x58	; 88
    45ea:	92 07       	cpc	r25, r18
    45ec:	18 f5       	brcc	.+70     	; 0x4634 <pvPortMalloc+0x76>
    45ee:	20 91 ed 01 	lds	r18, 0x01ED
    45f2:	30 91 ee 01 	lds	r19, 0x01EE
    45f6:	8b 81       	ldd	r24, Y+3	; 0x03
    45f8:	9c 81       	ldd	r25, Y+4	; 0x04
    45fa:	28 0f       	add	r18, r24
    45fc:	39 1f       	adc	r19, r25
    45fe:	80 91 ed 01 	lds	r24, 0x01ED
    4602:	90 91 ee 01 	lds	r25, 0x01EE
    4606:	82 17       	cp	r24, r18
    4608:	93 07       	cpc	r25, r19
    460a:	a0 f4       	brcc	.+40     	; 0x4634 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    460c:	80 91 ed 01 	lds	r24, 0x01ED
    4610:	90 91 ee 01 	lds	r25, 0x01EE
    4614:	81 51       	subi	r24, 0x11	; 17
    4616:	9e 4f       	sbci	r25, 0xFE	; 254
    4618:	9a 83       	std	Y+2, r25	; 0x02
    461a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    461c:	20 91 ed 01 	lds	r18, 0x01ED
    4620:	30 91 ee 01 	lds	r19, 0x01EE
    4624:	8b 81       	ldd	r24, Y+3	; 0x03
    4626:	9c 81       	ldd	r25, Y+4	; 0x04
    4628:	82 0f       	add	r24, r18
    462a:	93 1f       	adc	r25, r19
    462c:	90 93 ee 01 	sts	0x01EE, r25
    4630:	80 93 ed 01 	sts	0x01ED, r24
		}	
	}
	xTaskResumeAll();
    4634:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    4638:	89 81       	ldd	r24, Y+1	; 0x01
    463a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    463c:	0f 90       	pop	r0
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	cf 91       	pop	r28
    4646:	df 91       	pop	r29
    4648:	08 95       	ret

0000464a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    464a:	df 93       	push	r29
    464c:	cf 93       	push	r28
    464e:	00 d0       	rcall	.+0      	; 0x4650 <vPortFree+0x6>
    4650:	cd b7       	in	r28, 0x3d	; 61
    4652:	de b7       	in	r29, 0x3e	; 62
    4654:	9a 83       	std	Y+2, r25	; 0x02
    4656:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	cf 91       	pop	r28
    465e:	df 91       	pop	r29
    4660:	08 95       	ret

00004662 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    4662:	df 93       	push	r29
    4664:	cf 93       	push	r28
    4666:	cd b7       	in	r28, 0x3d	; 61
    4668:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    466a:	10 92 ee 01 	sts	0x01EE, r1
    466e:	10 92 ed 01 	sts	0x01ED, r1
}
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	08 95       	ret

00004678 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    4678:	df 93       	push	r29
    467a:	cf 93       	push	r28
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    4680:	20 91 ed 01 	lds	r18, 0x01ED
    4684:	30 91 ee 01 	lds	r19, 0x01EE
    4688:	88 e5       	ldi	r24, 0x58	; 88
    468a:	92 e0       	ldi	r25, 0x02	; 2
    468c:	82 1b       	sub	r24, r18
    468e:	93 0b       	sbc	r25, r19
}
    4690:	cf 91       	pop	r28
    4692:	df 91       	pop	r29
    4694:	08 95       	ret

00004696 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    4696:	df 93       	push	r29
    4698:	cf 93       	push	r28
    469a:	00 d0       	rcall	.+0      	; 0x469c <vListInitialise+0x6>
    469c:	cd b7       	in	r28, 0x3d	; 61
    469e:	de b7       	in	r29, 0x3e	; 62
    46a0:	9a 83       	std	Y+2, r25	; 0x02
    46a2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	03 96       	adiw	r24, 0x03	; 3
    46aa:	e9 81       	ldd	r30, Y+1	; 0x01
    46ac:	fa 81       	ldd	r31, Y+2	; 0x02
    46ae:	92 83       	std	Z+2, r25	; 0x02
    46b0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    46b2:	e9 81       	ldd	r30, Y+1	; 0x01
    46b4:	fa 81       	ldd	r31, Y+2	; 0x02
    46b6:	8f ef       	ldi	r24, 0xFF	; 255
    46b8:	9f ef       	ldi	r25, 0xFF	; 255
    46ba:	94 83       	std	Z+4, r25	; 0x04
    46bc:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    46be:	89 81       	ldd	r24, Y+1	; 0x01
    46c0:	9a 81       	ldd	r25, Y+2	; 0x02
    46c2:	03 96       	adiw	r24, 0x03	; 3
    46c4:	e9 81       	ldd	r30, Y+1	; 0x01
    46c6:	fa 81       	ldd	r31, Y+2	; 0x02
    46c8:	96 83       	std	Z+6, r25	; 0x06
    46ca:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	9a 81       	ldd	r25, Y+2	; 0x02
    46d0:	03 96       	adiw	r24, 0x03	; 3
    46d2:	e9 81       	ldd	r30, Y+1	; 0x01
    46d4:	fa 81       	ldd	r31, Y+2	; 0x02
    46d6:	90 87       	std	Z+8, r25	; 0x08
    46d8:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    46da:	e9 81       	ldd	r30, Y+1	; 0x01
    46dc:	fa 81       	ldd	r31, Y+2	; 0x02
    46de:	10 82       	st	Z, r1
}
    46e0:	0f 90       	pop	r0
    46e2:	0f 90       	pop	r0
    46e4:	cf 91       	pop	r28
    46e6:	df 91       	pop	r29
    46e8:	08 95       	ret

000046ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    46ea:	df 93       	push	r29
    46ec:	cf 93       	push	r28
    46ee:	00 d0       	rcall	.+0      	; 0x46f0 <vListInitialiseItem+0x6>
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
    46f4:	9a 83       	std	Y+2, r25	; 0x02
    46f6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    46f8:	e9 81       	ldd	r30, Y+1	; 0x01
    46fa:	fa 81       	ldd	r31, Y+2	; 0x02
    46fc:	11 86       	std	Z+9, r1	; 0x09
    46fe:	10 86       	std	Z+8, r1	; 0x08
}
    4700:	0f 90       	pop	r0
    4702:	0f 90       	pop	r0
    4704:	cf 91       	pop	r28
    4706:	df 91       	pop	r29
    4708:	08 95       	ret

0000470a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    470a:	df 93       	push	r29
    470c:	cf 93       	push	r28
    470e:	00 d0       	rcall	.+0      	; 0x4710 <vListInsertEnd+0x6>
    4710:	00 d0       	rcall	.+0      	; 0x4712 <vListInsertEnd+0x8>
    4712:	00 d0       	rcall	.+0      	; 0x4714 <vListInsertEnd+0xa>
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	9c 83       	std	Y+4, r25	; 0x04
    471a:	8b 83       	std	Y+3, r24	; 0x03
    471c:	7e 83       	std	Y+6, r23	; 0x06
    471e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    4720:	eb 81       	ldd	r30, Y+3	; 0x03
    4722:	fc 81       	ldd	r31, Y+4	; 0x04
    4724:	81 81       	ldd	r24, Z+1	; 0x01
    4726:	92 81       	ldd	r25, Z+2	; 0x02
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    472c:	e9 81       	ldd	r30, Y+1	; 0x01
    472e:	fa 81       	ldd	r31, Y+2	; 0x02
    4730:	82 81       	ldd	r24, Z+2	; 0x02
    4732:	93 81       	ldd	r25, Z+3	; 0x03
    4734:	ed 81       	ldd	r30, Y+5	; 0x05
    4736:	fe 81       	ldd	r31, Y+6	; 0x06
    4738:	93 83       	std	Z+3, r25	; 0x03
    473a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    473c:	eb 81       	ldd	r30, Y+3	; 0x03
    473e:	fc 81       	ldd	r31, Y+4	; 0x04
    4740:	81 81       	ldd	r24, Z+1	; 0x01
    4742:	92 81       	ldd	r25, Z+2	; 0x02
    4744:	ed 81       	ldd	r30, Y+5	; 0x05
    4746:	fe 81       	ldd	r31, Y+6	; 0x06
    4748:	95 83       	std	Z+5, r25	; 0x05
    474a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    474c:	e9 81       	ldd	r30, Y+1	; 0x01
    474e:	fa 81       	ldd	r31, Y+2	; 0x02
    4750:	02 80       	ldd	r0, Z+2	; 0x02
    4752:	f3 81       	ldd	r31, Z+3	; 0x03
    4754:	e0 2d       	mov	r30, r0
    4756:	8d 81       	ldd	r24, Y+5	; 0x05
    4758:	9e 81       	ldd	r25, Y+6	; 0x06
    475a:	95 83       	std	Z+5, r25	; 0x05
    475c:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    475e:	8d 81       	ldd	r24, Y+5	; 0x05
    4760:	9e 81       	ldd	r25, Y+6	; 0x06
    4762:	e9 81       	ldd	r30, Y+1	; 0x01
    4764:	fa 81       	ldd	r31, Y+2	; 0x02
    4766:	93 83       	std	Z+3, r25	; 0x03
    4768:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    476a:	8d 81       	ldd	r24, Y+5	; 0x05
    476c:	9e 81       	ldd	r25, Y+6	; 0x06
    476e:	eb 81       	ldd	r30, Y+3	; 0x03
    4770:	fc 81       	ldd	r31, Y+4	; 0x04
    4772:	92 83       	std	Z+2, r25	; 0x02
    4774:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    4776:	ed 81       	ldd	r30, Y+5	; 0x05
    4778:	fe 81       	ldd	r31, Y+6	; 0x06
    477a:	8b 81       	ldd	r24, Y+3	; 0x03
    477c:	9c 81       	ldd	r25, Y+4	; 0x04
    477e:	91 87       	std	Z+9, r25	; 0x09
    4780:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    4782:	eb 81       	ldd	r30, Y+3	; 0x03
    4784:	fc 81       	ldd	r31, Y+4	; 0x04
    4786:	80 81       	ld	r24, Z
    4788:	8f 5f       	subi	r24, 0xFF	; 255
    478a:	eb 81       	ldd	r30, Y+3	; 0x03
    478c:	fc 81       	ldd	r31, Y+4	; 0x04
    478e:	80 83       	st	Z, r24
}
    4790:	26 96       	adiw	r28, 0x06	; 6
    4792:	0f b6       	in	r0, 0x3f	; 63
    4794:	f8 94       	cli
    4796:	de bf       	out	0x3e, r29	; 62
    4798:	0f be       	out	0x3f, r0	; 63
    479a:	cd bf       	out	0x3d, r28	; 61
    479c:	cf 91       	pop	r28
    479e:	df 91       	pop	r29
    47a0:	08 95       	ret

000047a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    47a2:	df 93       	push	r29
    47a4:	cf 93       	push	r28
    47a6:	cd b7       	in	r28, 0x3d	; 61
    47a8:	de b7       	in	r29, 0x3e	; 62
    47aa:	28 97       	sbiw	r28, 0x08	; 8
    47ac:	0f b6       	in	r0, 0x3f	; 63
    47ae:	f8 94       	cli
    47b0:	de bf       	out	0x3e, r29	; 62
    47b2:	0f be       	out	0x3f, r0	; 63
    47b4:	cd bf       	out	0x3d, r28	; 61
    47b6:	9e 83       	std	Y+6, r25	; 0x06
    47b8:	8d 83       	std	Y+5, r24	; 0x05
    47ba:	78 87       	std	Y+8, r23	; 0x08
    47bc:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    47be:	ef 81       	ldd	r30, Y+7	; 0x07
    47c0:	f8 85       	ldd	r31, Y+8	; 0x08
    47c2:	80 81       	ld	r24, Z
    47c4:	91 81       	ldd	r25, Z+1	; 0x01
    47c6:	9a 83       	std	Y+2, r25	; 0x02
    47c8:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    47ca:	89 81       	ldd	r24, Y+1	; 0x01
    47cc:	9a 81       	ldd	r25, Y+2	; 0x02
    47ce:	2f ef       	ldi	r18, 0xFF	; 255
    47d0:	8f 3f       	cpi	r24, 0xFF	; 255
    47d2:	92 07       	cpc	r25, r18
    47d4:	39 f4       	brne	.+14     	; 0x47e4 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    47d6:	ed 81       	ldd	r30, Y+5	; 0x05
    47d8:	fe 81       	ldd	r31, Y+6	; 0x06
    47da:	87 81       	ldd	r24, Z+7	; 0x07
    47dc:	90 85       	ldd	r25, Z+8	; 0x08
    47de:	9c 83       	std	Y+4, r25	; 0x04
    47e0:	8b 83       	std	Y+3, r24	; 0x03
    47e2:	18 c0       	rjmp	.+48     	; 0x4814 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    47e4:	8d 81       	ldd	r24, Y+5	; 0x05
    47e6:	9e 81       	ldd	r25, Y+6	; 0x06
    47e8:	03 96       	adiw	r24, 0x03	; 3
    47ea:	9c 83       	std	Y+4, r25	; 0x04
    47ec:	8b 83       	std	Y+3, r24	; 0x03
    47ee:	06 c0       	rjmp	.+12     	; 0x47fc <vListInsert+0x5a>
    47f0:	eb 81       	ldd	r30, Y+3	; 0x03
    47f2:	fc 81       	ldd	r31, Y+4	; 0x04
    47f4:	82 81       	ldd	r24, Z+2	; 0x02
    47f6:	93 81       	ldd	r25, Z+3	; 0x03
    47f8:	9c 83       	std	Y+4, r25	; 0x04
    47fa:	8b 83       	std	Y+3, r24	; 0x03
    47fc:	eb 81       	ldd	r30, Y+3	; 0x03
    47fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4800:	02 80       	ldd	r0, Z+2	; 0x02
    4802:	f3 81       	ldd	r31, Z+3	; 0x03
    4804:	e0 2d       	mov	r30, r0
    4806:	20 81       	ld	r18, Z
    4808:	31 81       	ldd	r19, Z+1	; 0x01
    480a:	89 81       	ldd	r24, Y+1	; 0x01
    480c:	9a 81       	ldd	r25, Y+2	; 0x02
    480e:	82 17       	cp	r24, r18
    4810:	93 07       	cpc	r25, r19
    4812:	70 f7       	brcc	.-36     	; 0x47f0 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    4814:	eb 81       	ldd	r30, Y+3	; 0x03
    4816:	fc 81       	ldd	r31, Y+4	; 0x04
    4818:	82 81       	ldd	r24, Z+2	; 0x02
    481a:	93 81       	ldd	r25, Z+3	; 0x03
    481c:	ef 81       	ldd	r30, Y+7	; 0x07
    481e:	f8 85       	ldd	r31, Y+8	; 0x08
    4820:	93 83       	std	Z+3, r25	; 0x03
    4822:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    4824:	ef 81       	ldd	r30, Y+7	; 0x07
    4826:	f8 85       	ldd	r31, Y+8	; 0x08
    4828:	02 80       	ldd	r0, Z+2	; 0x02
    482a:	f3 81       	ldd	r31, Z+3	; 0x03
    482c:	e0 2d       	mov	r30, r0
    482e:	8f 81       	ldd	r24, Y+7	; 0x07
    4830:	98 85       	ldd	r25, Y+8	; 0x08
    4832:	95 83       	std	Z+5, r25	; 0x05
    4834:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    4836:	ef 81       	ldd	r30, Y+7	; 0x07
    4838:	f8 85       	ldd	r31, Y+8	; 0x08
    483a:	8b 81       	ldd	r24, Y+3	; 0x03
    483c:	9c 81       	ldd	r25, Y+4	; 0x04
    483e:	95 83       	std	Z+5, r25	; 0x05
    4840:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    4842:	8f 81       	ldd	r24, Y+7	; 0x07
    4844:	98 85       	ldd	r25, Y+8	; 0x08
    4846:	eb 81       	ldd	r30, Y+3	; 0x03
    4848:	fc 81       	ldd	r31, Y+4	; 0x04
    484a:	93 83       	std	Z+3, r25	; 0x03
    484c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    484e:	ef 81       	ldd	r30, Y+7	; 0x07
    4850:	f8 85       	ldd	r31, Y+8	; 0x08
    4852:	8d 81       	ldd	r24, Y+5	; 0x05
    4854:	9e 81       	ldd	r25, Y+6	; 0x06
    4856:	91 87       	std	Z+9, r25	; 0x09
    4858:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    485a:	ed 81       	ldd	r30, Y+5	; 0x05
    485c:	fe 81       	ldd	r31, Y+6	; 0x06
    485e:	80 81       	ld	r24, Z
    4860:	8f 5f       	subi	r24, 0xFF	; 255
    4862:	ed 81       	ldd	r30, Y+5	; 0x05
    4864:	fe 81       	ldd	r31, Y+6	; 0x06
    4866:	80 83       	st	Z, r24
}
    4868:	28 96       	adiw	r28, 0x08	; 8
    486a:	0f b6       	in	r0, 0x3f	; 63
    486c:	f8 94       	cli
    486e:	de bf       	out	0x3e, r29	; 62
    4870:	0f be       	out	0x3f, r0	; 63
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	cf 91       	pop	r28
    4876:	df 91       	pop	r29
    4878:	08 95       	ret

0000487a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    487a:	df 93       	push	r29
    487c:	cf 93       	push	r28
    487e:	00 d0       	rcall	.+0      	; 0x4880 <vListRemove+0x6>
    4880:	00 d0       	rcall	.+0      	; 0x4882 <vListRemove+0x8>
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	9c 83       	std	Y+4, r25	; 0x04
    4888:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    488a:	eb 81       	ldd	r30, Y+3	; 0x03
    488c:	fc 81       	ldd	r31, Y+4	; 0x04
    488e:	a2 81       	ldd	r26, Z+2	; 0x02
    4890:	b3 81       	ldd	r27, Z+3	; 0x03
    4892:	eb 81       	ldd	r30, Y+3	; 0x03
    4894:	fc 81       	ldd	r31, Y+4	; 0x04
    4896:	84 81       	ldd	r24, Z+4	; 0x04
    4898:	95 81       	ldd	r25, Z+5	; 0x05
    489a:	15 96       	adiw	r26, 0x05	; 5
    489c:	9c 93       	st	X, r25
    489e:	8e 93       	st	-X, r24
    48a0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    48a2:	eb 81       	ldd	r30, Y+3	; 0x03
    48a4:	fc 81       	ldd	r31, Y+4	; 0x04
    48a6:	a4 81       	ldd	r26, Z+4	; 0x04
    48a8:	b5 81       	ldd	r27, Z+5	; 0x05
    48aa:	eb 81       	ldd	r30, Y+3	; 0x03
    48ac:	fc 81       	ldd	r31, Y+4	; 0x04
    48ae:	82 81       	ldd	r24, Z+2	; 0x02
    48b0:	93 81       	ldd	r25, Z+3	; 0x03
    48b2:	13 96       	adiw	r26, 0x03	; 3
    48b4:	9c 93       	st	X, r25
    48b6:	8e 93       	st	-X, r24
    48b8:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    48ba:	eb 81       	ldd	r30, Y+3	; 0x03
    48bc:	fc 81       	ldd	r31, Y+4	; 0x04
    48be:	80 85       	ldd	r24, Z+8	; 0x08
    48c0:	91 85       	ldd	r25, Z+9	; 0x09
    48c2:	9a 83       	std	Y+2, r25	; 0x02
    48c4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    48c6:	e9 81       	ldd	r30, Y+1	; 0x01
    48c8:	fa 81       	ldd	r31, Y+2	; 0x02
    48ca:	21 81       	ldd	r18, Z+1	; 0x01
    48cc:	32 81       	ldd	r19, Z+2	; 0x02
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	9c 81       	ldd	r25, Y+4	; 0x04
    48d2:	28 17       	cp	r18, r24
    48d4:	39 07       	cpc	r19, r25
    48d6:	41 f4       	brne	.+16     	; 0x48e8 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    48d8:	eb 81       	ldd	r30, Y+3	; 0x03
    48da:	fc 81       	ldd	r31, Y+4	; 0x04
    48dc:	84 81       	ldd	r24, Z+4	; 0x04
    48de:	95 81       	ldd	r25, Z+5	; 0x05
    48e0:	e9 81       	ldd	r30, Y+1	; 0x01
    48e2:	fa 81       	ldd	r31, Y+2	; 0x02
    48e4:	92 83       	std	Z+2, r25	; 0x02
    48e6:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    48e8:	eb 81       	ldd	r30, Y+3	; 0x03
    48ea:	fc 81       	ldd	r31, Y+4	; 0x04
    48ec:	11 86       	std	Z+9, r1	; 0x09
    48ee:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    48f0:	e9 81       	ldd	r30, Y+1	; 0x01
    48f2:	fa 81       	ldd	r31, Y+2	; 0x02
    48f4:	80 81       	ld	r24, Z
    48f6:	81 50       	subi	r24, 0x01	; 1
    48f8:	e9 81       	ldd	r30, Y+1	; 0x01
    48fa:	fa 81       	ldd	r31, Y+2	; 0x02
    48fc:	80 83       	st	Z, r24
}
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	0f 90       	pop	r0
    4904:	0f 90       	pop	r0
    4906:	cf 91       	pop	r28
    4908:	df 91       	pop	r29
    490a:	08 95       	ret

0000490c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    490c:	df 93       	push	r29
    490e:	cf 93       	push	r28
    4910:	cd b7       	in	r28, 0x3d	; 61
    4912:	de b7       	in	r29, 0x3e	; 62
    4914:	28 97       	sbiw	r28, 0x08	; 8
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	f8 94       	cli
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	9c 83       	std	Y+4, r25	; 0x04
    4922:	8b 83       	std	Y+3, r24	; 0x03
    4924:	7e 83       	std	Y+6, r23	; 0x06
    4926:	6d 83       	std	Y+5, r22	; 0x05
    4928:	58 87       	std	Y+8, r21	; 0x08
    492a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    492c:	eb 81       	ldd	r30, Y+3	; 0x03
    492e:	fc 81       	ldd	r31, Y+4	; 0x04
    4930:	81 e1       	ldi	r24, 0x11	; 17
    4932:	80 83       	st	Z, r24
	pxTopOfStack--;
    4934:	8b 81       	ldd	r24, Y+3	; 0x03
    4936:	9c 81       	ldd	r25, Y+4	; 0x04
    4938:	01 97       	sbiw	r24, 0x01	; 1
    493a:	9c 83       	std	Y+4, r25	; 0x04
    493c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    493e:	eb 81       	ldd	r30, Y+3	; 0x03
    4940:	fc 81       	ldd	r31, Y+4	; 0x04
    4942:	82 e2       	ldi	r24, 0x22	; 34
    4944:	80 83       	st	Z, r24
	pxTopOfStack--;
    4946:	8b 81       	ldd	r24, Y+3	; 0x03
    4948:	9c 81       	ldd	r25, Y+4	; 0x04
    494a:	01 97       	sbiw	r24, 0x01	; 1
    494c:	9c 83       	std	Y+4, r25	; 0x04
    494e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    4950:	eb 81       	ldd	r30, Y+3	; 0x03
    4952:	fc 81       	ldd	r31, Y+4	; 0x04
    4954:	83 e3       	ldi	r24, 0x33	; 51
    4956:	80 83       	st	Z, r24
	pxTopOfStack--;
    4958:	8b 81       	ldd	r24, Y+3	; 0x03
    495a:	9c 81       	ldd	r25, Y+4	; 0x04
    495c:	01 97       	sbiw	r24, 0x01	; 1
    495e:	9c 83       	std	Y+4, r25	; 0x04
    4960:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    4962:	8d 81       	ldd	r24, Y+5	; 0x05
    4964:	9e 81       	ldd	r25, Y+6	; 0x06
    4966:	9a 83       	std	Y+2, r25	; 0x02
    4968:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    496a:	89 81       	ldd	r24, Y+1	; 0x01
    496c:	eb 81       	ldd	r30, Y+3	; 0x03
    496e:	fc 81       	ldd	r31, Y+4	; 0x04
    4970:	80 83       	st	Z, r24
	pxTopOfStack--;
    4972:	8b 81       	ldd	r24, Y+3	; 0x03
    4974:	9c 81       	ldd	r25, Y+4	; 0x04
    4976:	01 97       	sbiw	r24, 0x01	; 1
    4978:	9c 83       	std	Y+4, r25	; 0x04
    497a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	9a 81       	ldd	r25, Y+2	; 0x02
    4980:	89 2f       	mov	r24, r25
    4982:	99 27       	eor	r25, r25
    4984:	9a 83       	std	Y+2, r25	; 0x02
    4986:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    4988:	89 81       	ldd	r24, Y+1	; 0x01
    498a:	eb 81       	ldd	r30, Y+3	; 0x03
    498c:	fc 81       	ldd	r31, Y+4	; 0x04
    498e:	80 83       	st	Z, r24
	pxTopOfStack--;
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	9c 81       	ldd	r25, Y+4	; 0x04
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	9c 83       	std	Y+4, r25	; 0x04
    4998:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    499a:	eb 81       	ldd	r30, Y+3	; 0x03
    499c:	fc 81       	ldd	r31, Y+4	; 0x04
    499e:	10 82       	st	Z, r1
	pxTopOfStack--;
    49a0:	8b 81       	ldd	r24, Y+3	; 0x03
    49a2:	9c 81       	ldd	r25, Y+4	; 0x04
    49a4:	01 97       	sbiw	r24, 0x01	; 1
    49a6:	9c 83       	std	Y+4, r25	; 0x04
    49a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    49aa:	eb 81       	ldd	r30, Y+3	; 0x03
    49ac:	fc 81       	ldd	r31, Y+4	; 0x04
    49ae:	80 e8       	ldi	r24, 0x80	; 128
    49b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	9c 81       	ldd	r25, Y+4	; 0x04
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	9c 83       	std	Y+4, r25	; 0x04
    49ba:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    49bc:	eb 81       	ldd	r30, Y+3	; 0x03
    49be:	fc 81       	ldd	r31, Y+4	; 0x04
    49c0:	10 82       	st	Z, r1
	pxTopOfStack--;
    49c2:	8b 81       	ldd	r24, Y+3	; 0x03
    49c4:	9c 81       	ldd	r25, Y+4	; 0x04
    49c6:	01 97       	sbiw	r24, 0x01	; 1
    49c8:	9c 83       	std	Y+4, r25	; 0x04
    49ca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    49cc:	eb 81       	ldd	r30, Y+3	; 0x03
    49ce:	fc 81       	ldd	r31, Y+4	; 0x04
    49d0:	82 e0       	ldi	r24, 0x02	; 2
    49d2:	80 83       	st	Z, r24
	pxTopOfStack--;
    49d4:	8b 81       	ldd	r24, Y+3	; 0x03
    49d6:	9c 81       	ldd	r25, Y+4	; 0x04
    49d8:	01 97       	sbiw	r24, 0x01	; 1
    49da:	9c 83       	std	Y+4, r25	; 0x04
    49dc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    49de:	eb 81       	ldd	r30, Y+3	; 0x03
    49e0:	fc 81       	ldd	r31, Y+4	; 0x04
    49e2:	83 e0       	ldi	r24, 0x03	; 3
    49e4:	80 83       	st	Z, r24
	pxTopOfStack--;
    49e6:	8b 81       	ldd	r24, Y+3	; 0x03
    49e8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	9c 83       	std	Y+4, r25	; 0x04
    49ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    49f0:	eb 81       	ldd	r30, Y+3	; 0x03
    49f2:	fc 81       	ldd	r31, Y+4	; 0x04
    49f4:	84 e0       	ldi	r24, 0x04	; 4
    49f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    49f8:	8b 81       	ldd	r24, Y+3	; 0x03
    49fa:	9c 81       	ldd	r25, Y+4	; 0x04
    49fc:	01 97       	sbiw	r24, 0x01	; 1
    49fe:	9c 83       	std	Y+4, r25	; 0x04
    4a00:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    4a02:	eb 81       	ldd	r30, Y+3	; 0x03
    4a04:	fc 81       	ldd	r31, Y+4	; 0x04
    4a06:	85 e0       	ldi	r24, 0x05	; 5
    4a08:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a0e:	01 97       	sbiw	r24, 0x01	; 1
    4a10:	9c 83       	std	Y+4, r25	; 0x04
    4a12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    4a14:	eb 81       	ldd	r30, Y+3	; 0x03
    4a16:	fc 81       	ldd	r31, Y+4	; 0x04
    4a18:	86 e0       	ldi	r24, 0x06	; 6
    4a1a:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	9c 83       	std	Y+4, r25	; 0x04
    4a24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    4a26:	eb 81       	ldd	r30, Y+3	; 0x03
    4a28:	fc 81       	ldd	r31, Y+4	; 0x04
    4a2a:	87 e0       	ldi	r24, 0x07	; 7
    4a2c:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a30:	9c 81       	ldd	r25, Y+4	; 0x04
    4a32:	01 97       	sbiw	r24, 0x01	; 1
    4a34:	9c 83       	std	Y+4, r25	; 0x04
    4a36:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    4a38:	eb 81       	ldd	r30, Y+3	; 0x03
    4a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    4a3c:	88 e0       	ldi	r24, 0x08	; 8
    4a3e:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a40:	8b 81       	ldd	r24, Y+3	; 0x03
    4a42:	9c 81       	ldd	r25, Y+4	; 0x04
    4a44:	01 97       	sbiw	r24, 0x01	; 1
    4a46:	9c 83       	std	Y+4, r25	; 0x04
    4a48:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    4a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    4a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    4a4e:	89 e0       	ldi	r24, 0x09	; 9
    4a50:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a52:	8b 81       	ldd	r24, Y+3	; 0x03
    4a54:	9c 81       	ldd	r25, Y+4	; 0x04
    4a56:	01 97       	sbiw	r24, 0x01	; 1
    4a58:	9c 83       	std	Y+4, r25	; 0x04
    4a5a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    4a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    4a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    4a60:	80 e1       	ldi	r24, 0x10	; 16
    4a62:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	9c 81       	ldd	r25, Y+4	; 0x04
    4a68:	01 97       	sbiw	r24, 0x01	; 1
    4a6a:	9c 83       	std	Y+4, r25	; 0x04
    4a6c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    4a6e:	eb 81       	ldd	r30, Y+3	; 0x03
    4a70:	fc 81       	ldd	r31, Y+4	; 0x04
    4a72:	81 e1       	ldi	r24, 0x11	; 17
    4a74:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a76:	8b 81       	ldd	r24, Y+3	; 0x03
    4a78:	9c 81       	ldd	r25, Y+4	; 0x04
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	9c 83       	std	Y+4, r25	; 0x04
    4a7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    4a80:	eb 81       	ldd	r30, Y+3	; 0x03
    4a82:	fc 81       	ldd	r31, Y+4	; 0x04
    4a84:	82 e1       	ldi	r24, 0x12	; 18
    4a86:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a88:	8b 81       	ldd	r24, Y+3	; 0x03
    4a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a8c:	01 97       	sbiw	r24, 0x01	; 1
    4a8e:	9c 83       	std	Y+4, r25	; 0x04
    4a90:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    4a92:	eb 81       	ldd	r30, Y+3	; 0x03
    4a94:	fc 81       	ldd	r31, Y+4	; 0x04
    4a96:	83 e1       	ldi	r24, 0x13	; 19
    4a98:	80 83       	st	Z, r24
	pxTopOfStack--;
    4a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    4a9e:	01 97       	sbiw	r24, 0x01	; 1
    4aa0:	9c 83       	std	Y+4, r25	; 0x04
    4aa2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    4aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    4aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    4aa8:	84 e1       	ldi	r24, 0x14	; 20
    4aaa:	80 83       	st	Z, r24
	pxTopOfStack--;
    4aac:	8b 81       	ldd	r24, Y+3	; 0x03
    4aae:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab0:	01 97       	sbiw	r24, 0x01	; 1
    4ab2:	9c 83       	std	Y+4, r25	; 0x04
    4ab4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    4ab6:	eb 81       	ldd	r30, Y+3	; 0x03
    4ab8:	fc 81       	ldd	r31, Y+4	; 0x04
    4aba:	85 e1       	ldi	r24, 0x15	; 21
    4abc:	80 83       	st	Z, r24
	pxTopOfStack--;
    4abe:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac2:	01 97       	sbiw	r24, 0x01	; 1
    4ac4:	9c 83       	std	Y+4, r25	; 0x04
    4ac6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    4ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    4aca:	fc 81       	ldd	r31, Y+4	; 0x04
    4acc:	86 e1       	ldi	r24, 0x16	; 22
    4ace:	80 83       	st	Z, r24
	pxTopOfStack--;
    4ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ad4:	01 97       	sbiw	r24, 0x01	; 1
    4ad6:	9c 83       	std	Y+4, r25	; 0x04
    4ad8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    4ada:	eb 81       	ldd	r30, Y+3	; 0x03
    4adc:	fc 81       	ldd	r31, Y+4	; 0x04
    4ade:	87 e1       	ldi	r24, 0x17	; 23
    4ae0:	80 83       	st	Z, r24
	pxTopOfStack--;
    4ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ae6:	01 97       	sbiw	r24, 0x01	; 1
    4ae8:	9c 83       	std	Y+4, r25	; 0x04
    4aea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    4aec:	eb 81       	ldd	r30, Y+3	; 0x03
    4aee:	fc 81       	ldd	r31, Y+4	; 0x04
    4af0:	88 e1       	ldi	r24, 0x18	; 24
    4af2:	80 83       	st	Z, r24
	pxTopOfStack--;
    4af4:	8b 81       	ldd	r24, Y+3	; 0x03
    4af6:	9c 81       	ldd	r25, Y+4	; 0x04
    4af8:	01 97       	sbiw	r24, 0x01	; 1
    4afa:	9c 83       	std	Y+4, r25	; 0x04
    4afc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    4afe:	eb 81       	ldd	r30, Y+3	; 0x03
    4b00:	fc 81       	ldd	r31, Y+4	; 0x04
    4b02:	89 e1       	ldi	r24, 0x19	; 25
    4b04:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b06:	8b 81       	ldd	r24, Y+3	; 0x03
    4b08:	9c 81       	ldd	r25, Y+4	; 0x04
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	9c 83       	std	Y+4, r25	; 0x04
    4b0e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    4b10:	eb 81       	ldd	r30, Y+3	; 0x03
    4b12:	fc 81       	ldd	r31, Y+4	; 0x04
    4b14:	80 e2       	ldi	r24, 0x20	; 32
    4b16:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b18:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1c:	01 97       	sbiw	r24, 0x01	; 1
    4b1e:	9c 83       	std	Y+4, r25	; 0x04
    4b20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    4b22:	eb 81       	ldd	r30, Y+3	; 0x03
    4b24:	fc 81       	ldd	r31, Y+4	; 0x04
    4b26:	81 e2       	ldi	r24, 0x21	; 33
    4b28:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b2e:	01 97       	sbiw	r24, 0x01	; 1
    4b30:	9c 83       	std	Y+4, r25	; 0x04
    4b32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    4b34:	eb 81       	ldd	r30, Y+3	; 0x03
    4b36:	fc 81       	ldd	r31, Y+4	; 0x04
    4b38:	82 e2       	ldi	r24, 0x22	; 34
    4b3a:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	9c 83       	std	Y+4, r25	; 0x04
    4b44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    4b46:	eb 81       	ldd	r30, Y+3	; 0x03
    4b48:	fc 81       	ldd	r31, Y+4	; 0x04
    4b4a:	83 e2       	ldi	r24, 0x23	; 35
    4b4c:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b50:	9c 81       	ldd	r25, Y+4	; 0x04
    4b52:	01 97       	sbiw	r24, 0x01	; 1
    4b54:	9c 83       	std	Y+4, r25	; 0x04
    4b56:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    4b58:	8f 81       	ldd	r24, Y+7	; 0x07
    4b5a:	98 85       	ldd	r25, Y+8	; 0x08
    4b5c:	9a 83       	std	Y+2, r25	; 0x02
    4b5e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    4b60:	89 81       	ldd	r24, Y+1	; 0x01
    4b62:	eb 81       	ldd	r30, Y+3	; 0x03
    4b64:	fc 81       	ldd	r31, Y+4	; 0x04
    4b66:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b68:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	9c 83       	std	Y+4, r25	; 0x04
    4b70:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    4b72:	89 81       	ldd	r24, Y+1	; 0x01
    4b74:	9a 81       	ldd	r25, Y+2	; 0x02
    4b76:	89 2f       	mov	r24, r25
    4b78:	99 27       	eor	r25, r25
    4b7a:	9a 83       	std	Y+2, r25	; 0x02
    4b7c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    4b7e:	89 81       	ldd	r24, Y+1	; 0x01
    4b80:	eb 81       	ldd	r30, Y+3	; 0x03
    4b82:	fc 81       	ldd	r31, Y+4	; 0x04
    4b84:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b86:	8b 81       	ldd	r24, Y+3	; 0x03
    4b88:	9c 81       	ldd	r25, Y+4	; 0x04
    4b8a:	01 97       	sbiw	r24, 0x01	; 1
    4b8c:	9c 83       	std	Y+4, r25	; 0x04
    4b8e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    4b90:	eb 81       	ldd	r30, Y+3	; 0x03
    4b92:	fc 81       	ldd	r31, Y+4	; 0x04
    4b94:	86 e2       	ldi	r24, 0x26	; 38
    4b96:	80 83       	st	Z, r24
	pxTopOfStack--;
    4b98:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    4b9c:	01 97       	sbiw	r24, 0x01	; 1
    4b9e:	9c 83       	std	Y+4, r25	; 0x04
    4ba0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    4ba2:	eb 81       	ldd	r30, Y+3	; 0x03
    4ba4:	fc 81       	ldd	r31, Y+4	; 0x04
    4ba6:	87 e2       	ldi	r24, 0x27	; 39
    4ba8:	80 83       	st	Z, r24
	pxTopOfStack--;
    4baa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bac:	9c 81       	ldd	r25, Y+4	; 0x04
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	9c 83       	std	Y+4, r25	; 0x04
    4bb2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    4bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    4bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    4bb8:	88 e2       	ldi	r24, 0x28	; 40
    4bba:	80 83       	st	Z, r24
	pxTopOfStack--;
    4bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	9c 83       	std	Y+4, r25	; 0x04
    4bc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    4bc6:	eb 81       	ldd	r30, Y+3	; 0x03
    4bc8:	fc 81       	ldd	r31, Y+4	; 0x04
    4bca:	89 e2       	ldi	r24, 0x29	; 41
    4bcc:	80 83       	st	Z, r24
	pxTopOfStack--;
    4bce:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bd2:	01 97       	sbiw	r24, 0x01	; 1
    4bd4:	9c 83       	std	Y+4, r25	; 0x04
    4bd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    4bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    4bda:	fc 81       	ldd	r31, Y+4	; 0x04
    4bdc:	80 e3       	ldi	r24, 0x30	; 48
    4bde:	80 83       	st	Z, r24
	pxTopOfStack--;
    4be0:	8b 81       	ldd	r24, Y+3	; 0x03
    4be2:	9c 81       	ldd	r25, Y+4	; 0x04
    4be4:	01 97       	sbiw	r24, 0x01	; 1
    4be6:	9c 83       	std	Y+4, r25	; 0x04
    4be8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    4bea:	eb 81       	ldd	r30, Y+3	; 0x03
    4bec:	fc 81       	ldd	r31, Y+4	; 0x04
    4bee:	81 e3       	ldi	r24, 0x31	; 49
    4bf0:	80 83       	st	Z, r24
	pxTopOfStack--;
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf6:	01 97       	sbiw	r24, 0x01	; 1
    4bf8:	9c 83       	std	Y+4, r25	; 0x04
    4bfa:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	9c 81       	ldd	r25, Y+4	; 0x04
}
    4c00:	28 96       	adiw	r28, 0x08	; 8
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	f8 94       	cli
    4c06:	de bf       	out	0x3e, r29	; 62
    4c08:	0f be       	out	0x3f, r0	; 63
    4c0a:	cd bf       	out	0x3d, r28	; 61
    4c0c:	cf 91       	pop	r28
    4c0e:	df 91       	pop	r29
    4c10:	08 95       	ret

00004c12 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    4c12:	df 93       	push	r29
    4c14:	cf 93       	push	r28
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    4c1a:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    4c1e:	a0 91 47 04 	lds	r26, 0x0447
    4c22:	b0 91 48 04 	lds	r27, 0x0448
    4c26:	cd 91       	ld	r28, X+
    4c28:	cd bf       	out	0x3d, r28	; 61
    4c2a:	dd 91       	ld	r29, X+
    4c2c:	de bf       	out	0x3e, r29	; 62
    4c2e:	ff 91       	pop	r31
    4c30:	ef 91       	pop	r30
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	bf 91       	pop	r27
    4c38:	af 91       	pop	r26
    4c3a:	9f 91       	pop	r25
    4c3c:	8f 91       	pop	r24
    4c3e:	7f 91       	pop	r23
    4c40:	6f 91       	pop	r22
    4c42:	5f 91       	pop	r21
    4c44:	4f 91       	pop	r20
    4c46:	3f 91       	pop	r19
    4c48:	2f 91       	pop	r18
    4c4a:	1f 91       	pop	r17
    4c4c:	0f 91       	pop	r16
    4c4e:	ff 90       	pop	r15
    4c50:	ef 90       	pop	r14
    4c52:	df 90       	pop	r13
    4c54:	cf 90       	pop	r12
    4c56:	bf 90       	pop	r11
    4c58:	af 90       	pop	r10
    4c5a:	9f 90       	pop	r9
    4c5c:	8f 90       	pop	r8
    4c5e:	7f 90       	pop	r7
    4c60:	6f 90       	pop	r6
    4c62:	5f 90       	pop	r5
    4c64:	4f 90       	pop	r4
    4c66:	3f 90       	pop	r3
    4c68:	2f 90       	pop	r2
    4c6a:	1f 90       	pop	r1
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    4c72:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
}
    4c76:	cf 91       	pop	r28
    4c78:	df 91       	pop	r29
    4c7a:	08 95       	ret

00004c7c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    4c7c:	df 93       	push	r29
    4c7e:	cf 93       	push	r28
    4c80:	cd b7       	in	r28, 0x3d	; 61
    4c82:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    4c8a:	0f 92       	push	r0
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	0f 92       	push	r0
    4c92:	1f 92       	push	r1
    4c94:	11 24       	eor	r1, r1
    4c96:	2f 92       	push	r2
    4c98:	3f 92       	push	r3
    4c9a:	4f 92       	push	r4
    4c9c:	5f 92       	push	r5
    4c9e:	6f 92       	push	r6
    4ca0:	7f 92       	push	r7
    4ca2:	8f 92       	push	r8
    4ca4:	9f 92       	push	r9
    4ca6:	af 92       	push	r10
    4ca8:	bf 92       	push	r11
    4caa:	cf 92       	push	r12
    4cac:	df 92       	push	r13
    4cae:	ef 92       	push	r14
    4cb0:	ff 92       	push	r15
    4cb2:	0f 93       	push	r16
    4cb4:	1f 93       	push	r17
    4cb6:	2f 93       	push	r18
    4cb8:	3f 93       	push	r19
    4cba:	4f 93       	push	r20
    4cbc:	5f 93       	push	r21
    4cbe:	6f 93       	push	r22
    4cc0:	7f 93       	push	r23
    4cc2:	8f 93       	push	r24
    4cc4:	9f 93       	push	r25
    4cc6:	af 93       	push	r26
    4cc8:	bf 93       	push	r27
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	ef 93       	push	r30
    4cd0:	ff 93       	push	r31
    4cd2:	a0 91 47 04 	lds	r26, 0x0447
    4cd6:	b0 91 48 04 	lds	r27, 0x0448
    4cda:	0d b6       	in	r0, 0x3d	; 61
    4cdc:	0d 92       	st	X+, r0
    4cde:	0e b6       	in	r0, 0x3e	; 62
    4ce0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    4ce2:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    4ce6:	a0 91 47 04 	lds	r26, 0x0447
    4cea:	b0 91 48 04 	lds	r27, 0x0448
    4cee:	cd 91       	ld	r28, X+
    4cf0:	cd bf       	out	0x3d, r28	; 61
    4cf2:	dd 91       	ld	r29, X+
    4cf4:	de bf       	out	0x3e, r29	; 62
    4cf6:	ff 91       	pop	r31
    4cf8:	ef 91       	pop	r30
    4cfa:	df 91       	pop	r29
    4cfc:	cf 91       	pop	r28
    4cfe:	bf 91       	pop	r27
    4d00:	af 91       	pop	r26
    4d02:	9f 91       	pop	r25
    4d04:	8f 91       	pop	r24
    4d06:	7f 91       	pop	r23
    4d08:	6f 91       	pop	r22
    4d0a:	5f 91       	pop	r21
    4d0c:	4f 91       	pop	r20
    4d0e:	3f 91       	pop	r19
    4d10:	2f 91       	pop	r18
    4d12:	1f 91       	pop	r17
    4d14:	0f 91       	pop	r16
    4d16:	ff 90       	pop	r15
    4d18:	ef 90       	pop	r14
    4d1a:	df 90       	pop	r13
    4d1c:	cf 90       	pop	r12
    4d1e:	bf 90       	pop	r11
    4d20:	af 90       	pop	r10
    4d22:	9f 90       	pop	r9
    4d24:	8f 90       	pop	r8
    4d26:	7f 90       	pop	r7
    4d28:	6f 90       	pop	r6
    4d2a:	5f 90       	pop	r5
    4d2c:	4f 90       	pop	r4
    4d2e:	3f 90       	pop	r3
    4d30:	2f 90       	pop	r2
    4d32:	1f 90       	pop	r1
    4d34:	0f 90       	pop	r0
    4d36:	0f be       	out	0x3f, r0	; 63
    4d38:	0f 90       	pop	r0

	asm volatile ( "ret" );
    4d3a:	08 95       	ret

00004d3c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    4d3c:	0f 92       	push	r0
    4d3e:	0f b6       	in	r0, 0x3f	; 63
    4d40:	f8 94       	cli
    4d42:	0f 92       	push	r0
    4d44:	1f 92       	push	r1
    4d46:	11 24       	eor	r1, r1
    4d48:	2f 92       	push	r2
    4d4a:	3f 92       	push	r3
    4d4c:	4f 92       	push	r4
    4d4e:	5f 92       	push	r5
    4d50:	6f 92       	push	r6
    4d52:	7f 92       	push	r7
    4d54:	8f 92       	push	r8
    4d56:	9f 92       	push	r9
    4d58:	af 92       	push	r10
    4d5a:	bf 92       	push	r11
    4d5c:	cf 92       	push	r12
    4d5e:	df 92       	push	r13
    4d60:	ef 92       	push	r14
    4d62:	ff 92       	push	r15
    4d64:	0f 93       	push	r16
    4d66:	1f 93       	push	r17
    4d68:	2f 93       	push	r18
    4d6a:	3f 93       	push	r19
    4d6c:	4f 93       	push	r20
    4d6e:	5f 93       	push	r21
    4d70:	6f 93       	push	r22
    4d72:	7f 93       	push	r23
    4d74:	8f 93       	push	r24
    4d76:	9f 93       	push	r25
    4d78:	af 93       	push	r26
    4d7a:	bf 93       	push	r27
    4d7c:	cf 93       	push	r28
    4d7e:	df 93       	push	r29
    4d80:	ef 93       	push	r30
    4d82:	ff 93       	push	r31
    4d84:	a0 91 47 04 	lds	r26, 0x0447
    4d88:	b0 91 48 04 	lds	r27, 0x0448
    4d8c:	0d b6       	in	r0, 0x3d	; 61
    4d8e:	0d 92       	st	X+, r0
    4d90:	0e b6       	in	r0, 0x3e	; 62
    4d92:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    4d94:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <vTaskIncrementTick>
	vTaskSwitchContext();
    4d98:	0e 94 b5 2f 	call	0x5f6a	; 0x5f6a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    4d9c:	a0 91 47 04 	lds	r26, 0x0447
    4da0:	b0 91 48 04 	lds	r27, 0x0448
    4da4:	cd 91       	ld	r28, X+
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	dd 91       	ld	r29, X+
    4daa:	de bf       	out	0x3e, r29	; 62
    4dac:	ff 91       	pop	r31
    4dae:	ef 91       	pop	r30
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	bf 91       	pop	r27
    4db6:	af 91       	pop	r26
    4db8:	9f 91       	pop	r25
    4dba:	8f 91       	pop	r24
    4dbc:	7f 91       	pop	r23
    4dbe:	6f 91       	pop	r22
    4dc0:	5f 91       	pop	r21
    4dc2:	4f 91       	pop	r20
    4dc4:	3f 91       	pop	r19
    4dc6:	2f 91       	pop	r18
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	af 90       	pop	r10
    4dd8:	9f 90       	pop	r9
    4dda:	8f 90       	pop	r8
    4ddc:	7f 90       	pop	r7
    4dde:	6f 90       	pop	r6
    4de0:	5f 90       	pop	r5
    4de2:	4f 90       	pop	r4
    4de4:	3f 90       	pop	r3
    4de6:	2f 90       	pop	r2
    4de8:	1f 90       	pop	r1
    4dea:	0f 90       	pop	r0
    4dec:	0f be       	out	0x3f, r0	; 63
    4dee:	0f 90       	pop	r0

	asm volatile ( "ret" );
    4df0:	08 95       	ret

00004df2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    4df2:	df 93       	push	r29
    4df4:	cf 93       	push	r28
    4df6:	00 d0       	rcall	.+0      	; 0x4df8 <prvSetupTimerInterrupt+0x6>
    4df8:	00 d0       	rcall	.+0      	; 0x4dfa <prvSetupTimerInterrupt+0x8>
    4dfa:	00 d0       	rcall	.+0      	; 0x4dfc <prvSetupTimerInterrupt+0xa>
    4dfc:	cd b7       	in	r28, 0x3d	; 61
    4dfe:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    4e00:	80 e4       	ldi	r24, 0x40	; 64
    4e02:	9f e1       	ldi	r25, 0x1F	; 31
    4e04:	a0 e0       	ldi	r26, 0x00	; 0
    4e06:	b0 e0       	ldi	r27, 0x00	; 0
    4e08:	8b 83       	std	Y+3, r24	; 0x03
    4e0a:	9c 83       	std	Y+4, r25	; 0x04
    4e0c:	ad 83       	std	Y+5, r26	; 0x05
    4e0e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    4e10:	8b 81       	ldd	r24, Y+3	; 0x03
    4e12:	9c 81       	ldd	r25, Y+4	; 0x04
    4e14:	ad 81       	ldd	r26, Y+5	; 0x05
    4e16:	be 81       	ldd	r27, Y+6	; 0x06
    4e18:	68 94       	set
    4e1a:	15 f8       	bld	r1, 5
    4e1c:	b6 95       	lsr	r27
    4e1e:	a7 95       	ror	r26
    4e20:	97 95       	ror	r25
    4e22:	87 95       	ror	r24
    4e24:	16 94       	lsr	r1
    4e26:	d1 f7       	brne	.-12     	; 0x4e1c <prvSetupTimerInterrupt+0x2a>
    4e28:	8b 83       	std	Y+3, r24	; 0x03
    4e2a:	9c 83       	std	Y+4, r25	; 0x04
    4e2c:	ad 83       	std	Y+5, r26	; 0x05
    4e2e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    4e30:	8b 81       	ldd	r24, Y+3	; 0x03
    4e32:	9c 81       	ldd	r25, Y+4	; 0x04
    4e34:	ad 81       	ldd	r26, Y+5	; 0x05
    4e36:	be 81       	ldd	r27, Y+6	; 0x06
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	a1 09       	sbc	r26, r1
    4e3c:	b1 09       	sbc	r27, r1
    4e3e:	8b 83       	std	Y+3, r24	; 0x03
    4e40:	9c 83       	std	Y+4, r25	; 0x04
    4e42:	ad 83       	std	Y+5, r26	; 0x05
    4e44:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    4e46:	8b 81       	ldd	r24, Y+3	; 0x03
    4e48:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    4e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4e:	ad 81       	ldd	r26, Y+5	; 0x05
    4e50:	be 81       	ldd	r27, Y+6	; 0x06
    4e52:	89 2f       	mov	r24, r25
    4e54:	9a 2f       	mov	r25, r26
    4e56:	ab 2f       	mov	r26, r27
    4e58:	bb 27       	eor	r27, r27
    4e5a:	8b 83       	std	Y+3, r24	; 0x03
    4e5c:	9c 83       	std	Y+4, r25	; 0x04
    4e5e:	ad 83       	std	Y+5, r26	; 0x05
    4e60:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    4e62:	8b 81       	ldd	r24, Y+3	; 0x03
    4e64:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    4e66:	eb e4       	ldi	r30, 0x4B	; 75
    4e68:	f0 e0       	ldi	r31, 0x00	; 0
    4e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e6c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    4e6e:	ea e4       	ldi	r30, 0x4A	; 74
    4e70:	f0 e0       	ldi	r31, 0x00	; 0
    4e72:	89 81       	ldd	r24, Y+1	; 0x01
    4e74:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    4e76:	8b e0       	ldi	r24, 0x0B	; 11
    4e78:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    4e7a:	ee e4       	ldi	r30, 0x4E	; 78
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	89 81       	ldd	r24, Y+1	; 0x01
    4e80:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    4e82:	e9 e5       	ldi	r30, 0x59	; 89
    4e84:	f0 e0       	ldi	r31, 0x00	; 0
    4e86:	80 81       	ld	r24, Z
    4e88:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    4e8a:	89 81       	ldd	r24, Y+1	; 0x01
    4e8c:	80 61       	ori	r24, 0x10	; 16
    4e8e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    4e90:	e9 e5       	ldi	r30, 0x59	; 89
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	89 81       	ldd	r24, Y+1	; 0x01
    4e96:	80 83       	st	Z, r24
}
    4e98:	26 96       	adiw	r28, 0x06	; 6
    4e9a:	0f b6       	in	r0, 0x3f	; 63
    4e9c:	f8 94       	cli
    4e9e:	de bf       	out	0x3e, r29	; 62
    4ea0:	0f be       	out	0x3f, r0	; 63
    4ea2:	cd bf       	out	0x3d, r28	; 61
    4ea4:	cf 91       	pop	r28
    4ea6:	df 91       	pop	r29
    4ea8:	08 95       	ret

00004eaa <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    4eaa:	0e 94 9e 26 	call	0x4d3c	; 0x4d3c <vPortYieldFromTick>
		asm volatile ( "reti" );
    4eae:	18 95       	reti

00004eb0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    4eb0:	df 93       	push	r29
    4eb2:	cf 93       	push	r28
    4eb4:	cd b7       	in	r28, 0x3d	; 61
    4eb6:	de b7       	in	r29, 0x3e	; 62
    4eb8:	28 97       	sbiw	r28, 0x08	; 8
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	f8 94       	cli
    4ebe:	de bf       	out	0x3e, r29	; 62
    4ec0:	0f be       	out	0x3f, r0	; 63
    4ec2:	cd bf       	out	0x3d, r28	; 61
    4ec4:	8f 83       	std	Y+7, r24	; 0x07
    4ec6:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    4ec8:	1a 82       	std	Y+2, r1	; 0x02
    4eca:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    4ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    4ece:	88 23       	and	r24, r24
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <xQueueCreate+0x24>
    4ed2:	8c c0       	rjmp	.+280    	; 0x4fec <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    4ed4:	8f e1       	ldi	r24, 0x1F	; 31
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	0e 94 df 22 	call	0x45be	; 0x45be <pvPortMalloc>
    4edc:	9e 83       	std	Y+6, r25	; 0x06
    4ede:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    4ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee4:	00 97       	sbiw	r24, 0x00	; 0
    4ee6:	09 f4       	brne	.+2      	; 0x4eea <xQueueCreate+0x3a>
    4ee8:	81 c0       	rjmp	.+258    	; 0x4fec <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    4eea:	8f 81       	ldd	r24, Y+7	; 0x07
    4eec:	28 2f       	mov	r18, r24
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	88 85       	ldd	r24, Y+8	; 0x08
    4ef2:	88 2f       	mov	r24, r24
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	ac 01       	movw	r20, r24
    4ef8:	24 9f       	mul	r18, r20
    4efa:	c0 01       	movw	r24, r0
    4efc:	25 9f       	mul	r18, r21
    4efe:	90 0d       	add	r25, r0
    4f00:	34 9f       	mul	r19, r20
    4f02:	90 0d       	add	r25, r0
    4f04:	11 24       	eor	r1, r1
    4f06:	01 96       	adiw	r24, 0x01	; 1
    4f08:	9c 83       	std	Y+4, r25	; 0x04
    4f0a:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    4f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f10:	0e 94 df 22 	call	0x45be	; 0x45be <pvPortMalloc>
    4f14:	ed 81       	ldd	r30, Y+5	; 0x05
    4f16:	fe 81       	ldd	r31, Y+6	; 0x06
    4f18:	91 83       	std	Z+1, r25	; 0x01
    4f1a:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    4f1c:	ed 81       	ldd	r30, Y+5	; 0x05
    4f1e:	fe 81       	ldd	r31, Y+6	; 0x06
    4f20:	80 81       	ld	r24, Z
    4f22:	91 81       	ldd	r25, Z+1	; 0x01
    4f24:	00 97       	sbiw	r24, 0x00	; 0
    4f26:	09 f4       	brne	.+2      	; 0x4f2a <xQueueCreate+0x7a>
    4f28:	5d c0       	rjmp	.+186    	; 0x4fe4 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    4f2a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f2c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f2e:	40 81       	ld	r20, Z
    4f30:	51 81       	ldd	r21, Z+1	; 0x01
    4f32:	8f 81       	ldd	r24, Y+7	; 0x07
    4f34:	28 2f       	mov	r18, r24
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	88 85       	ldd	r24, Y+8	; 0x08
    4f3a:	88 2f       	mov	r24, r24
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	bc 01       	movw	r22, r24
    4f40:	26 9f       	mul	r18, r22
    4f42:	c0 01       	movw	r24, r0
    4f44:	27 9f       	mul	r18, r23
    4f46:	90 0d       	add	r25, r0
    4f48:	36 9f       	mul	r19, r22
    4f4a:	90 0d       	add	r25, r0
    4f4c:	11 24       	eor	r1, r1
    4f4e:	84 0f       	add	r24, r20
    4f50:	95 1f       	adc	r25, r21
    4f52:	ed 81       	ldd	r30, Y+5	; 0x05
    4f54:	fe 81       	ldd	r31, Y+6	; 0x06
    4f56:	93 83       	std	Z+3, r25	; 0x03
    4f58:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    4f5a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f5c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f5e:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    4f60:	ed 81       	ldd	r30, Y+5	; 0x05
    4f62:	fe 81       	ldd	r31, Y+6	; 0x06
    4f64:	80 81       	ld	r24, Z
    4f66:	91 81       	ldd	r25, Z+1	; 0x01
    4f68:	ed 81       	ldd	r30, Y+5	; 0x05
    4f6a:	fe 81       	ldd	r31, Y+6	; 0x06
    4f6c:	95 83       	std	Z+5, r25	; 0x05
    4f6e:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    4f70:	ed 81       	ldd	r30, Y+5	; 0x05
    4f72:	fe 81       	ldd	r31, Y+6	; 0x06
    4f74:	40 81       	ld	r20, Z
    4f76:	51 81       	ldd	r21, Z+1	; 0x01
    4f78:	8f 81       	ldd	r24, Y+7	; 0x07
    4f7a:	88 2f       	mov	r24, r24
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	9c 01       	movw	r18, r24
    4f80:	21 50       	subi	r18, 0x01	; 1
    4f82:	30 40       	sbci	r19, 0x00	; 0
    4f84:	88 85       	ldd	r24, Y+8	; 0x08
    4f86:	88 2f       	mov	r24, r24
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	bc 01       	movw	r22, r24
    4f8c:	26 9f       	mul	r18, r22
    4f8e:	c0 01       	movw	r24, r0
    4f90:	27 9f       	mul	r18, r23
    4f92:	90 0d       	add	r25, r0
    4f94:	36 9f       	mul	r19, r22
    4f96:	90 0d       	add	r25, r0
    4f98:	11 24       	eor	r1, r1
    4f9a:	84 0f       	add	r24, r20
    4f9c:	95 1f       	adc	r25, r21
    4f9e:	ed 81       	ldd	r30, Y+5	; 0x05
    4fa0:	fe 81       	ldd	r31, Y+6	; 0x06
    4fa2:	97 83       	std	Z+7, r25	; 0x07
    4fa4:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    4fa6:	ed 81       	ldd	r30, Y+5	; 0x05
    4fa8:	fe 81       	ldd	r31, Y+6	; 0x06
    4faa:	8f 81       	ldd	r24, Y+7	; 0x07
    4fac:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    4fae:	ed 81       	ldd	r30, Y+5	; 0x05
    4fb0:	fe 81       	ldd	r31, Y+6	; 0x06
    4fb2:	88 85       	ldd	r24, Y+8	; 0x08
    4fb4:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    4fb6:	ed 81       	ldd	r30, Y+5	; 0x05
    4fb8:	fe 81       	ldd	r31, Y+6	; 0x06
    4fba:	8f ef       	ldi	r24, 0xFF	; 255
    4fbc:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    4fbe:	ed 81       	ldd	r30, Y+5	; 0x05
    4fc0:	fe 81       	ldd	r31, Y+6	; 0x06
    4fc2:	8f ef       	ldi	r24, 0xFF	; 255
    4fc4:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    4fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fca:	08 96       	adiw	r24, 0x08	; 8
    4fcc:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    4fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fd4:	41 96       	adiw	r24, 0x11	; 17
    4fd6:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    4fda:	8d 81       	ldd	r24, Y+5	; 0x05
    4fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4fde:	9a 83       	std	Y+2, r25	; 0x02
    4fe0:	89 83       	std	Y+1, r24	; 0x01
    4fe2:	04 c0       	rjmp	.+8      	; 0x4fec <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    4fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    4fe8:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    4fec:	89 81       	ldd	r24, Y+1	; 0x01
    4fee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4ff0:	28 96       	adiw	r28, 0x08	; 8
    4ff2:	0f b6       	in	r0, 0x3f	; 63
    4ff4:	f8 94       	cli
    4ff6:	de bf       	out	0x3e, r29	; 62
    4ff8:	0f be       	out	0x3f, r0	; 63
    4ffa:	cd bf       	out	0x3d, r28	; 61
    4ffc:	cf 91       	pop	r28
    4ffe:	df 91       	pop	r29
    5000:	08 95       	ret

00005002 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    5002:	df 93       	push	r29
    5004:	cf 93       	push	r28
    5006:	cd b7       	in	r28, 0x3d	; 61
    5008:	de b7       	in	r29, 0x3e	; 62
    500a:	2c 97       	sbiw	r28, 0x0c	; 12
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	de bf       	out	0x3e, r29	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	cd bf       	out	0x3d, r28	; 61
    5016:	9e 83       	std	Y+6, r25	; 0x06
    5018:	8d 83       	std	Y+5, r24	; 0x05
    501a:	78 87       	std	Y+8, r23	; 0x08
    501c:	6f 83       	std	Y+7, r22	; 0x07
    501e:	5a 87       	std	Y+10, r21	; 0x0a
    5020:	49 87       	std	Y+9, r20	; 0x09
    5022:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    5024:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    5026:	0f b6       	in	r0, 0x3f	; 63
    5028:	f8 94       	cli
    502a:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    502c:	ed 81       	ldd	r30, Y+5	; 0x05
    502e:	fe 81       	ldd	r31, Y+6	; 0x06
    5030:	92 8d       	ldd	r25, Z+26	; 0x1a
    5032:	ed 81       	ldd	r30, Y+5	; 0x05
    5034:	fe 81       	ldd	r31, Y+6	; 0x06
    5036:	83 8d       	ldd	r24, Z+27	; 0x1b
    5038:	98 17       	cp	r25, r24
    503a:	d8 f4       	brcc	.+54     	; 0x5072 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    503c:	8d 81       	ldd	r24, Y+5	; 0x05
    503e:	9e 81       	ldd	r25, Y+6	; 0x06
    5040:	2f 81       	ldd	r18, Y+7	; 0x07
    5042:	38 85       	ldd	r19, Y+8	; 0x08
    5044:	b9 01       	movw	r22, r18
    5046:	4b 85       	ldd	r20, Y+11	; 0x0b
    5048:	0e 94 3c 2a 	call	0x5478	; 0x5478 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    504c:	ed 81       	ldd	r30, Y+5	; 0x05
    504e:	fe 81       	ldd	r31, Y+6	; 0x06
    5050:	81 89       	ldd	r24, Z+17	; 0x11
    5052:	88 23       	and	r24, r24
    5054:	49 f0       	breq	.+18     	; 0x5068 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    5056:	8d 81       	ldd	r24, Y+5	; 0x05
    5058:	9e 81       	ldd	r25, Y+6	; 0x06
    505a:	41 96       	adiw	r24, 0x11	; 17
    505c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    5060:	81 30       	cpi	r24, 0x01	; 1
    5062:	11 f4       	brne	.+4      	; 0x5068 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    5064:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    5068:	0f 90       	pop	r0
    506a:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	8c 87       	std	Y+12, r24	; 0x0c
    5070:	5c c0       	rjmp	.+184    	; 0x512a <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    5072:	89 85       	ldd	r24, Y+9	; 0x09
    5074:	9a 85       	ldd	r25, Y+10	; 0x0a
    5076:	00 97       	sbiw	r24, 0x00	; 0
    5078:	21 f4       	brne	.+8      	; 0x5082 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    507a:	0f 90       	pop	r0
    507c:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    507e:	1c 86       	std	Y+12, r1	; 0x0c
    5080:	54 c0       	rjmp	.+168    	; 0x512a <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    5082:	89 81       	ldd	r24, Y+1	; 0x01
    5084:	88 23       	and	r24, r24
    5086:	31 f4       	brne	.+12     	; 0x5094 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    5088:	ce 01       	movw	r24, r28
    508a:	02 96       	adiw	r24, 0x02	; 2
    508c:	0e 94 b9 30 	call	0x6172	; 0x6172 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    5094:	0f 90       	pop	r0
    5096:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    5098:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    509c:	0f b6       	in	r0, 0x3f	; 63
    509e:	f8 94       	cli
    50a0:	0f 92       	push	r0
    50a2:	ed 81       	ldd	r30, Y+5	; 0x05
    50a4:	fe 81       	ldd	r31, Y+6	; 0x06
    50a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    50a8:	8f 3f       	cpi	r24, 0xFF	; 255
    50aa:	19 f4       	brne	.+6      	; 0x50b2 <xQueueGenericSend+0xb0>
    50ac:	ed 81       	ldd	r30, Y+5	; 0x05
    50ae:	fe 81       	ldd	r31, Y+6	; 0x06
    50b0:	15 8e       	std	Z+29, r1	; 0x1d
    50b2:	ed 81       	ldd	r30, Y+5	; 0x05
    50b4:	fe 81       	ldd	r31, Y+6	; 0x06
    50b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    50b8:	8f 3f       	cpi	r24, 0xFF	; 255
    50ba:	19 f4       	brne	.+6      	; 0x50c2 <xQueueGenericSend+0xc0>
    50bc:	ed 81       	ldd	r30, Y+5	; 0x05
    50be:	fe 81       	ldd	r31, Y+6	; 0x06
    50c0:	16 8e       	std	Z+30, r1	; 0x1e
    50c2:	0f 90       	pop	r0
    50c4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    50c6:	ce 01       	movw	r24, r28
    50c8:	02 96       	adiw	r24, 0x02	; 2
    50ca:	9e 01       	movw	r18, r28
    50cc:	27 5f       	subi	r18, 0xF7	; 247
    50ce:	3f 4f       	sbci	r19, 0xFF	; 255
    50d0:	b9 01       	movw	r22, r18
    50d2:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <xTaskCheckForTimeOut>
    50d6:	88 23       	and	r24, r24
    50d8:	09 f5       	brne	.+66     	; 0x511c <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    50da:	8d 81       	ldd	r24, Y+5	; 0x05
    50dc:	9e 81       	ldd	r25, Y+6	; 0x06
    50de:	0e 94 a0 2b 	call	0x5740	; 0x5740 <prvIsQueueFull>
    50e2:	88 23       	and	r24, r24
    50e4:	a1 f0       	breq	.+40     	; 0x510e <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    50e6:	8d 81       	ldd	r24, Y+5	; 0x05
    50e8:	9e 81       	ldd	r25, Y+6	; 0x06
    50ea:	08 96       	adiw	r24, 0x08	; 8
    50ec:	29 85       	ldd	r18, Y+9	; 0x09
    50ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    50f0:	b9 01       	movw	r22, r18
    50f2:	0e 94 1b 30 	call	0x6036	; 0x6036 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    50f6:	8d 81       	ldd	r24, Y+5	; 0x05
    50f8:	9e 81       	ldd	r25, Y+6	; 0x06
    50fa:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    50fe:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    5102:	88 23       	and	r24, r24
    5104:	09 f0       	breq	.+2      	; 0x5108 <xQueueGenericSend+0x106>
    5106:	8f cf       	rjmp	.-226    	; 0x5026 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    5108:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
    510c:	8c cf       	rjmp	.-232    	; 0x5026 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    510e:	8d 81       	ldd	r24, Y+5	; 0x05
    5110:	9e 81       	ldd	r25, Y+6	; 0x06
    5112:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5116:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    511a:	85 cf       	rjmp	.-246    	; 0x5026 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    511c:	8d 81       	ldd	r24, Y+5	; 0x05
    511e:	9e 81       	ldd	r25, Y+6	; 0x06
    5120:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    5124:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    5128:	1c 86       	std	Y+12, r1	; 0x0c
    512a:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    512c:	2c 96       	adiw	r28, 0x0c	; 12
    512e:	0f b6       	in	r0, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	de bf       	out	0x3e, r29	; 62
    5134:	0f be       	out	0x3f, r0	; 63
    5136:	cd bf       	out	0x3d, r28	; 61
    5138:	cf 91       	pop	r28
    513a:	df 91       	pop	r29
    513c:	08 95       	ret

0000513e <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    513e:	df 93       	push	r29
    5140:	cf 93       	push	r28
    5142:	cd b7       	in	r28, 0x3d	; 61
    5144:	de b7       	in	r29, 0x3e	; 62
    5146:	29 97       	sbiw	r28, 0x09	; 9
    5148:	0f b6       	in	r0, 0x3f	; 63
    514a:	f8 94       	cli
    514c:	de bf       	out	0x3e, r29	; 62
    514e:	0f be       	out	0x3f, r0	; 63
    5150:	cd bf       	out	0x3d, r28	; 61
    5152:	9c 83       	std	Y+4, r25	; 0x04
    5154:	8b 83       	std	Y+3, r24	; 0x03
    5156:	7e 83       	std	Y+6, r23	; 0x06
    5158:	6d 83       	std	Y+5, r22	; 0x05
    515a:	58 87       	std	Y+8, r21	; 0x08
    515c:	4f 83       	std	Y+7, r20	; 0x07
    515e:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5160:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    5162:	eb 81       	ldd	r30, Y+3	; 0x03
    5164:	fc 81       	ldd	r31, Y+4	; 0x04
    5166:	92 8d       	ldd	r25, Z+26	; 0x1a
    5168:	eb 81       	ldd	r30, Y+3	; 0x03
    516a:	fc 81       	ldd	r31, Y+4	; 0x04
    516c:	83 8d       	ldd	r24, Z+27	; 0x1b
    516e:	98 17       	cp	r25, r24
    5170:	40 f5       	brcc	.+80     	; 0x51c2 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    5172:	8b 81       	ldd	r24, Y+3	; 0x03
    5174:	9c 81       	ldd	r25, Y+4	; 0x04
    5176:	2d 81       	ldd	r18, Y+5	; 0x05
    5178:	3e 81       	ldd	r19, Y+6	; 0x06
    517a:	b9 01       	movw	r22, r18
    517c:	49 85       	ldd	r20, Y+9	; 0x09
    517e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    5182:	eb 81       	ldd	r30, Y+3	; 0x03
    5184:	fc 81       	ldd	r31, Y+4	; 0x04
    5186:	86 8d       	ldd	r24, Z+30	; 0x1e
    5188:	8f 3f       	cpi	r24, 0xFF	; 255
    518a:	89 f4       	brne	.+34     	; 0x51ae <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    518c:	eb 81       	ldd	r30, Y+3	; 0x03
    518e:	fc 81       	ldd	r31, Y+4	; 0x04
    5190:	81 89       	ldd	r24, Z+17	; 0x11
    5192:	88 23       	and	r24, r24
    5194:	99 f0       	breq	.+38     	; 0x51bc <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5196:	8b 81       	ldd	r24, Y+3	; 0x03
    5198:	9c 81       	ldd	r25, Y+4	; 0x04
    519a:	41 96       	adiw	r24, 0x11	; 17
    519c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    51a0:	88 23       	and	r24, r24
    51a2:	61 f0       	breq	.+24     	; 0x51bc <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    51a4:	ef 81       	ldd	r30, Y+7	; 0x07
    51a6:	f8 85       	ldd	r31, Y+8	; 0x08
    51a8:	81 e0       	ldi	r24, 0x01	; 1
    51aa:	80 83       	st	Z, r24
    51ac:	07 c0       	rjmp	.+14     	; 0x51bc <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    51ae:	eb 81       	ldd	r30, Y+3	; 0x03
    51b0:	fc 81       	ldd	r31, Y+4	; 0x04
    51b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    51b4:	8f 5f       	subi	r24, 0xFF	; 255
    51b6:	eb 81       	ldd	r30, Y+3	; 0x03
    51b8:	fc 81       	ldd	r31, Y+4	; 0x04
    51ba:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    51bc:	81 e0       	ldi	r24, 0x01	; 1
    51be:	8a 83       	std	Y+2, r24	; 0x02
    51c0:	01 c0       	rjmp	.+2      	; 0x51c4 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    51c2:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    51c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    51c6:	29 96       	adiw	r28, 0x09	; 9
    51c8:	0f b6       	in	r0, 0x3f	; 63
    51ca:	f8 94       	cli
    51cc:	de bf       	out	0x3e, r29	; 62
    51ce:	0f be       	out	0x3f, r0	; 63
    51d0:	cd bf       	out	0x3d, r28	; 61
    51d2:	cf 91       	pop	r28
    51d4:	df 91       	pop	r29
    51d6:	08 95       	ret

000051d8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    51d8:	df 93       	push	r29
    51da:	cf 93       	push	r28
    51dc:	cd b7       	in	r28, 0x3d	; 61
    51de:	de b7       	in	r29, 0x3e	; 62
    51e0:	2e 97       	sbiw	r28, 0x0e	; 14
    51e2:	0f b6       	in	r0, 0x3f	; 63
    51e4:	f8 94       	cli
    51e6:	de bf       	out	0x3e, r29	; 62
    51e8:	0f be       	out	0x3f, r0	; 63
    51ea:	cd bf       	out	0x3d, r28	; 61
    51ec:	98 87       	std	Y+8, r25	; 0x08
    51ee:	8f 83       	std	Y+7, r24	; 0x07
    51f0:	7a 87       	std	Y+10, r23	; 0x0a
    51f2:	69 87       	std	Y+9, r22	; 0x09
    51f4:	5c 87       	std	Y+12, r21	; 0x0c
    51f6:	4b 87       	std	Y+11, r20	; 0x0b
    51f8:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    51fa:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    5202:	ef 81       	ldd	r30, Y+7	; 0x07
    5204:	f8 85       	ldd	r31, Y+8	; 0x08
    5206:	82 8d       	ldd	r24, Z+26	; 0x1a
    5208:	88 23       	and	r24, r24
    520a:	09 f4       	brne	.+2      	; 0x520e <xQueueGenericReceive+0x36>
    520c:	3f c0       	rjmp	.+126    	; 0x528c <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    520e:	ef 81       	ldd	r30, Y+7	; 0x07
    5210:	f8 85       	ldd	r31, Y+8	; 0x08
    5212:	86 81       	ldd	r24, Z+6	; 0x06
    5214:	97 81       	ldd	r25, Z+7	; 0x07
    5216:	9a 83       	std	Y+2, r25	; 0x02
    5218:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    521a:	8f 81       	ldd	r24, Y+7	; 0x07
    521c:	98 85       	ldd	r25, Y+8	; 0x08
    521e:	29 85       	ldd	r18, Y+9	; 0x09
    5220:	3a 85       	ldd	r19, Y+10	; 0x0a
    5222:	b9 01       	movw	r22, r18
    5224:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    5228:	8d 85       	ldd	r24, Y+13	; 0x0d
    522a:	88 23       	and	r24, r24
    522c:	b1 f4       	brne	.+44     	; 0x525a <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    522e:	ef 81       	ldd	r30, Y+7	; 0x07
    5230:	f8 85       	ldd	r31, Y+8	; 0x08
    5232:	82 8d       	ldd	r24, Z+26	; 0x1a
    5234:	81 50       	subi	r24, 0x01	; 1
    5236:	ef 81       	ldd	r30, Y+7	; 0x07
    5238:	f8 85       	ldd	r31, Y+8	; 0x08
    523a:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    523c:	ef 81       	ldd	r30, Y+7	; 0x07
    523e:	f8 85       	ldd	r31, Y+8	; 0x08
    5240:	80 85       	ldd	r24, Z+8	; 0x08
    5242:	88 23       	and	r24, r24
    5244:	f1 f0       	breq	.+60     	; 0x5282 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    5246:	8f 81       	ldd	r24, Y+7	; 0x07
    5248:	98 85       	ldd	r25, Y+8	; 0x08
    524a:	08 96       	adiw	r24, 0x08	; 8
    524c:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    5250:	81 30       	cpi	r24, 0x01	; 1
    5252:	b9 f4       	brne	.+46     	; 0x5282 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    5254:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
    5258:	14 c0       	rjmp	.+40     	; 0x5282 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    525a:	ef 81       	ldd	r30, Y+7	; 0x07
    525c:	f8 85       	ldd	r31, Y+8	; 0x08
    525e:	89 81       	ldd	r24, Y+1	; 0x01
    5260:	9a 81       	ldd	r25, Y+2	; 0x02
    5262:	97 83       	std	Z+7, r25	; 0x07
    5264:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5266:	ef 81       	ldd	r30, Y+7	; 0x07
    5268:	f8 85       	ldd	r31, Y+8	; 0x08
    526a:	81 89       	ldd	r24, Z+17	; 0x11
    526c:	88 23       	and	r24, r24
    526e:	49 f0       	breq	.+18     	; 0x5282 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5270:	8f 81       	ldd	r24, Y+7	; 0x07
    5272:	98 85       	ldd	r25, Y+8	; 0x08
    5274:	41 96       	adiw	r24, 0x11	; 17
    5276:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    527a:	88 23       	and	r24, r24
    527c:	11 f0       	breq	.+4      	; 0x5282 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    527e:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    5282:	0f 90       	pop	r0
    5284:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	8e 87       	std	Y+14, r24	; 0x0e
    528a:	5c c0       	rjmp	.+184    	; 0x5344 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    528c:	8b 85       	ldd	r24, Y+11	; 0x0b
    528e:	9c 85       	ldd	r25, Y+12	; 0x0c
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	21 f4       	brne	.+8      	; 0x529c <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    5294:	0f 90       	pop	r0
    5296:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    5298:	1e 86       	std	Y+14, r1	; 0x0e
    529a:	54 c0       	rjmp	.+168    	; 0x5344 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    529c:	8b 81       	ldd	r24, Y+3	; 0x03
    529e:	88 23       	and	r24, r24
    52a0:	31 f4       	brne	.+12     	; 0x52ae <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    52a2:	ce 01       	movw	r24, r28
    52a4:	04 96       	adiw	r24, 0x04	; 4
    52a6:	0e 94 b9 30 	call	0x6172	; 0x6172 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    52ae:	0f 90       	pop	r0
    52b0:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    52b2:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	0f 92       	push	r0
    52bc:	ef 81       	ldd	r30, Y+7	; 0x07
    52be:	f8 85       	ldd	r31, Y+8	; 0x08
    52c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    52c2:	8f 3f       	cpi	r24, 0xFF	; 255
    52c4:	19 f4       	brne	.+6      	; 0x52cc <xQueueGenericReceive+0xf4>
    52c6:	ef 81       	ldd	r30, Y+7	; 0x07
    52c8:	f8 85       	ldd	r31, Y+8	; 0x08
    52ca:	15 8e       	std	Z+29, r1	; 0x1d
    52cc:	ef 81       	ldd	r30, Y+7	; 0x07
    52ce:	f8 85       	ldd	r31, Y+8	; 0x08
    52d0:	86 8d       	ldd	r24, Z+30	; 0x1e
    52d2:	8f 3f       	cpi	r24, 0xFF	; 255
    52d4:	19 f4       	brne	.+6      	; 0x52dc <xQueueGenericReceive+0x104>
    52d6:	ef 81       	ldd	r30, Y+7	; 0x07
    52d8:	f8 85       	ldd	r31, Y+8	; 0x08
    52da:	16 8e       	std	Z+30, r1	; 0x1e
    52dc:	0f 90       	pop	r0
    52de:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    52e0:	ce 01       	movw	r24, r28
    52e2:	04 96       	adiw	r24, 0x04	; 4
    52e4:	9e 01       	movw	r18, r28
    52e6:	25 5f       	subi	r18, 0xF5	; 245
    52e8:	3f 4f       	sbci	r19, 0xFF	; 255
    52ea:	b9 01       	movw	r22, r18
    52ec:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <xTaskCheckForTimeOut>
    52f0:	88 23       	and	r24, r24
    52f2:	09 f5       	brne	.+66     	; 0x5336 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    52f4:	8f 81       	ldd	r24, Y+7	; 0x07
    52f6:	98 85       	ldd	r25, Y+8	; 0x08
    52f8:	0e 94 6d 2b 	call	0x56da	; 0x56da <prvIsQueueEmpty>
    52fc:	88 23       	and	r24, r24
    52fe:	a1 f0       	breq	.+40     	; 0x5328 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    5300:	8f 81       	ldd	r24, Y+7	; 0x07
    5302:	98 85       	ldd	r25, Y+8	; 0x08
    5304:	41 96       	adiw	r24, 0x11	; 17
    5306:	2b 85       	ldd	r18, Y+11	; 0x0b
    5308:	3c 85       	ldd	r19, Y+12	; 0x0c
    530a:	b9 01       	movw	r22, r18
    530c:	0e 94 1b 30 	call	0x6036	; 0x6036 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    5310:	8f 81       	ldd	r24, Y+7	; 0x07
    5312:	98 85       	ldd	r25, Y+8	; 0x08
    5314:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    5318:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    531c:	88 23       	and	r24, r24
    531e:	09 f0       	breq	.+2      	; 0x5322 <xQueueGenericReceive+0x14a>
    5320:	6d cf       	rjmp	.-294    	; 0x51fc <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    5322:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
    5326:	6a cf       	rjmp	.-300    	; 0x51fc <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    5328:	8f 81       	ldd	r24, Y+7	; 0x07
    532a:	98 85       	ldd	r25, Y+8	; 0x08
    532c:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    5330:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    5334:	63 cf       	rjmp	.-314    	; 0x51fc <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    5336:	8f 81       	ldd	r24, Y+7	; 0x07
    5338:	98 85       	ldd	r25, Y+8	; 0x08
    533a:	0e 94 19 2b 	call	0x5632	; 0x5632 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    533e:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    5342:	1e 86       	std	Y+14, r1	; 0x0e
    5344:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    5346:	2e 96       	adiw	r28, 0x0e	; 14
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	f8 94       	cli
    534c:	de bf       	out	0x3e, r29	; 62
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	cd bf       	out	0x3d, r28	; 61
    5352:	cf 91       	pop	r28
    5354:	df 91       	pop	r29
    5356:	08 95       	ret

00005358 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    5358:	df 93       	push	r29
    535a:	cf 93       	push	r28
    535c:	cd b7       	in	r28, 0x3d	; 61
    535e:	de b7       	in	r29, 0x3e	; 62
    5360:	28 97       	sbiw	r28, 0x08	; 8
    5362:	0f b6       	in	r0, 0x3f	; 63
    5364:	f8 94       	cli
    5366:	de bf       	out	0x3e, r29	; 62
    5368:	0f be       	out	0x3f, r0	; 63
    536a:	cd bf       	out	0x3d, r28	; 61
    536c:	9c 83       	std	Y+4, r25	; 0x04
    536e:	8b 83       	std	Y+3, r24	; 0x03
    5370:	7e 83       	std	Y+6, r23	; 0x06
    5372:	6d 83       	std	Y+5, r22	; 0x05
    5374:	58 87       	std	Y+8, r21	; 0x08
    5376:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5378:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    537a:	eb 81       	ldd	r30, Y+3	; 0x03
    537c:	fc 81       	ldd	r31, Y+4	; 0x04
    537e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5380:	88 23       	and	r24, r24
    5382:	71 f1       	breq	.+92     	; 0x53e0 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    5384:	8b 81       	ldd	r24, Y+3	; 0x03
    5386:	9c 81       	ldd	r25, Y+4	; 0x04
    5388:	2d 81       	ldd	r18, Y+5	; 0x05
    538a:	3e 81       	ldd	r19, Y+6	; 0x06
    538c:	b9 01       	movw	r22, r18
    538e:	0e 94 d1 2a 	call	0x55a2	; 0x55a2 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    5392:	eb 81       	ldd	r30, Y+3	; 0x03
    5394:	fc 81       	ldd	r31, Y+4	; 0x04
    5396:	82 8d       	ldd	r24, Z+26	; 0x1a
    5398:	81 50       	subi	r24, 0x01	; 1
    539a:	eb 81       	ldd	r30, Y+3	; 0x03
    539c:	fc 81       	ldd	r31, Y+4	; 0x04
    539e:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    53a0:	eb 81       	ldd	r30, Y+3	; 0x03
    53a2:	fc 81       	ldd	r31, Y+4	; 0x04
    53a4:	85 8d       	ldd	r24, Z+29	; 0x1d
    53a6:	8f 3f       	cpi	r24, 0xFF	; 255
    53a8:	89 f4       	brne	.+34     	; 0x53cc <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    53aa:	eb 81       	ldd	r30, Y+3	; 0x03
    53ac:	fc 81       	ldd	r31, Y+4	; 0x04
    53ae:	80 85       	ldd	r24, Z+8	; 0x08
    53b0:	88 23       	and	r24, r24
    53b2:	99 f0       	breq	.+38     	; 0x53da <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    53b4:	8b 81       	ldd	r24, Y+3	; 0x03
    53b6:	9c 81       	ldd	r25, Y+4	; 0x04
    53b8:	08 96       	adiw	r24, 0x08	; 8
    53ba:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    53be:	88 23       	and	r24, r24
    53c0:	61 f0       	breq	.+24     	; 0x53da <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    53c2:	ef 81       	ldd	r30, Y+7	; 0x07
    53c4:	f8 85       	ldd	r31, Y+8	; 0x08
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	80 83       	st	Z, r24
    53ca:	07 c0       	rjmp	.+14     	; 0x53da <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    53cc:	eb 81       	ldd	r30, Y+3	; 0x03
    53ce:	fc 81       	ldd	r31, Y+4	; 0x04
    53d0:	85 8d       	ldd	r24, Z+29	; 0x1d
    53d2:	8f 5f       	subi	r24, 0xFF	; 255
    53d4:	eb 81       	ldd	r30, Y+3	; 0x03
    53d6:	fc 81       	ldd	r31, Y+4	; 0x04
    53d8:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	8a 83       	std	Y+2, r24	; 0x02
    53de:	01 c0       	rjmp	.+2      	; 0x53e2 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    53e0:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    53e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53e4:	28 96       	adiw	r28, 0x08	; 8
    53e6:	0f b6       	in	r0, 0x3f	; 63
    53e8:	f8 94       	cli
    53ea:	de bf       	out	0x3e, r29	; 62
    53ec:	0f be       	out	0x3f, r0	; 63
    53ee:	cd bf       	out	0x3d, r28	; 61
    53f0:	cf 91       	pop	r28
    53f2:	df 91       	pop	r29
    53f4:	08 95       	ret

000053f6 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    53f6:	df 93       	push	r29
    53f8:	cf 93       	push	r28
    53fa:	00 d0       	rcall	.+0      	; 0x53fc <uxQueueMessagesWaiting+0x6>
    53fc:	0f 92       	push	r0
    53fe:	cd b7       	in	r28, 0x3d	; 61
    5400:	de b7       	in	r29, 0x3e	; 62
    5402:	9b 83       	std	Y+3, r25	; 0x03
    5404:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    5406:	0f b6       	in	r0, 0x3f	; 63
    5408:	f8 94       	cli
    540a:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    540c:	ea 81       	ldd	r30, Y+2	; 0x02
    540e:	fb 81       	ldd	r31, Y+3	; 0x03
    5410:	82 8d       	ldd	r24, Z+26	; 0x1a
    5412:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    5414:	0f 90       	pop	r0
    5416:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    5418:	89 81       	ldd	r24, Y+1	; 0x01
}
    541a:	0f 90       	pop	r0
    541c:	0f 90       	pop	r0
    541e:	0f 90       	pop	r0
    5420:	cf 91       	pop	r28
    5422:	df 91       	pop	r29
    5424:	08 95       	ret

00005426 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    5426:	df 93       	push	r29
    5428:	cf 93       	push	r28
    542a:	00 d0       	rcall	.+0      	; 0x542c <uxQueueMessagesWaitingFromISR+0x6>
    542c:	0f 92       	push	r0
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
    5432:	9b 83       	std	Y+3, r25	; 0x03
    5434:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    5436:	ea 81       	ldd	r30, Y+2	; 0x02
    5438:	fb 81       	ldd	r31, Y+3	; 0x03
    543a:	82 8d       	ldd	r24, Z+26	; 0x1a
    543c:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    543e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5440:	0f 90       	pop	r0
    5442:	0f 90       	pop	r0
    5444:	0f 90       	pop	r0
    5446:	cf 91       	pop	r28
    5448:	df 91       	pop	r29
    544a:	08 95       	ret

0000544c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    544c:	df 93       	push	r29
    544e:	cf 93       	push	r28
    5450:	00 d0       	rcall	.+0      	; 0x5452 <vQueueDelete+0x6>
    5452:	cd b7       	in	r28, 0x3d	; 61
    5454:	de b7       	in	r29, 0x3e	; 62
    5456:	9a 83       	std	Y+2, r25	; 0x02
    5458:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    545a:	e9 81       	ldd	r30, Y+1	; 0x01
    545c:	fa 81       	ldd	r31, Y+2	; 0x02
    545e:	80 81       	ld	r24, Z
    5460:	91 81       	ldd	r25, Z+1	; 0x01
    5462:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
	vPortFree( pxQueue );
    5466:	89 81       	ldd	r24, Y+1	; 0x01
    5468:	9a 81       	ldd	r25, Y+2	; 0x02
    546a:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
}
    546e:	0f 90       	pop	r0
    5470:	0f 90       	pop	r0
    5472:	cf 91       	pop	r28
    5474:	df 91       	pop	r29
    5476:	08 95       	ret

00005478 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    5478:	df 93       	push	r29
    547a:	cf 93       	push	r28
    547c:	00 d0       	rcall	.+0      	; 0x547e <prvCopyDataToQueue+0x6>
    547e:	00 d0       	rcall	.+0      	; 0x5480 <prvCopyDataToQueue+0x8>
    5480:	0f 92       	push	r0
    5482:	cd b7       	in	r28, 0x3d	; 61
    5484:	de b7       	in	r29, 0x3e	; 62
    5486:	9a 83       	std	Y+2, r25	; 0x02
    5488:	89 83       	std	Y+1, r24	; 0x01
    548a:	7c 83       	std	Y+4, r23	; 0x04
    548c:	6b 83       	std	Y+3, r22	; 0x03
    548e:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    5490:	e9 81       	ldd	r30, Y+1	; 0x01
    5492:	fa 81       	ldd	r31, Y+2	; 0x02
    5494:	84 8d       	ldd	r24, Z+28	; 0x1c
    5496:	88 23       	and	r24, r24
    5498:	09 f4       	brne	.+2      	; 0x549c <prvCopyDataToQueue+0x24>
    549a:	74 c0       	rjmp	.+232    	; 0x5584 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    549c:	8d 81       	ldd	r24, Y+5	; 0x05
    549e:	88 23       	and	r24, r24
    54a0:	99 f5       	brne	.+102    	; 0x5508 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    54a2:	e9 81       	ldd	r30, Y+1	; 0x01
    54a4:	fa 81       	ldd	r31, Y+2	; 0x02
    54a6:	64 81       	ldd	r22, Z+4	; 0x04
    54a8:	75 81       	ldd	r23, Z+5	; 0x05
    54aa:	e9 81       	ldd	r30, Y+1	; 0x01
    54ac:	fa 81       	ldd	r31, Y+2	; 0x02
    54ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    54b0:	48 2f       	mov	r20, r24
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	2b 81       	ldd	r18, Y+3	; 0x03
    54b6:	3c 81       	ldd	r19, Y+4	; 0x04
    54b8:	cb 01       	movw	r24, r22
    54ba:	b9 01       	movw	r22, r18
    54bc:	0e 94 89 38 	call	0x7112	; 0x7112 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    54c0:	e9 81       	ldd	r30, Y+1	; 0x01
    54c2:	fa 81       	ldd	r31, Y+2	; 0x02
    54c4:	24 81       	ldd	r18, Z+4	; 0x04
    54c6:	35 81       	ldd	r19, Z+5	; 0x05
    54c8:	e9 81       	ldd	r30, Y+1	; 0x01
    54ca:	fa 81       	ldd	r31, Y+2	; 0x02
    54cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    54ce:	88 2f       	mov	r24, r24
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	82 0f       	add	r24, r18
    54d4:	93 1f       	adc	r25, r19
    54d6:	e9 81       	ldd	r30, Y+1	; 0x01
    54d8:	fa 81       	ldd	r31, Y+2	; 0x02
    54da:	95 83       	std	Z+5, r25	; 0x05
    54dc:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    54de:	e9 81       	ldd	r30, Y+1	; 0x01
    54e0:	fa 81       	ldd	r31, Y+2	; 0x02
    54e2:	24 81       	ldd	r18, Z+4	; 0x04
    54e4:	35 81       	ldd	r19, Z+5	; 0x05
    54e6:	e9 81       	ldd	r30, Y+1	; 0x01
    54e8:	fa 81       	ldd	r31, Y+2	; 0x02
    54ea:	82 81       	ldd	r24, Z+2	; 0x02
    54ec:	93 81       	ldd	r25, Z+3	; 0x03
    54ee:	28 17       	cp	r18, r24
    54f0:	39 07       	cpc	r19, r25
    54f2:	08 f4       	brcc	.+2      	; 0x54f6 <prvCopyDataToQueue+0x7e>
    54f4:	47 c0       	rjmp	.+142    	; 0x5584 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    54f6:	e9 81       	ldd	r30, Y+1	; 0x01
    54f8:	fa 81       	ldd	r31, Y+2	; 0x02
    54fa:	80 81       	ld	r24, Z
    54fc:	91 81       	ldd	r25, Z+1	; 0x01
    54fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5500:	fa 81       	ldd	r31, Y+2	; 0x02
    5502:	95 83       	std	Z+5, r25	; 0x05
    5504:	84 83       	std	Z+4, r24	; 0x04
    5506:	3e c0       	rjmp	.+124    	; 0x5584 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    5508:	e9 81       	ldd	r30, Y+1	; 0x01
    550a:	fa 81       	ldd	r31, Y+2	; 0x02
    550c:	66 81       	ldd	r22, Z+6	; 0x06
    550e:	77 81       	ldd	r23, Z+7	; 0x07
    5510:	e9 81       	ldd	r30, Y+1	; 0x01
    5512:	fa 81       	ldd	r31, Y+2	; 0x02
    5514:	84 8d       	ldd	r24, Z+28	; 0x1c
    5516:	48 2f       	mov	r20, r24
    5518:	50 e0       	ldi	r21, 0x00	; 0
    551a:	2b 81       	ldd	r18, Y+3	; 0x03
    551c:	3c 81       	ldd	r19, Y+4	; 0x04
    551e:	cb 01       	movw	r24, r22
    5520:	b9 01       	movw	r22, r18
    5522:	0e 94 89 38 	call	0x7112	; 0x7112 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    5526:	e9 81       	ldd	r30, Y+1	; 0x01
    5528:	fa 81       	ldd	r31, Y+2	; 0x02
    552a:	26 81       	ldd	r18, Z+6	; 0x06
    552c:	37 81       	ldd	r19, Z+7	; 0x07
    552e:	e9 81       	ldd	r30, Y+1	; 0x01
    5530:	fa 81       	ldd	r31, Y+2	; 0x02
    5532:	84 8d       	ldd	r24, Z+28	; 0x1c
    5534:	88 2f       	mov	r24, r24
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	90 95       	com	r25
    553a:	81 95       	neg	r24
    553c:	9f 4f       	sbci	r25, 0xFF	; 255
    553e:	82 0f       	add	r24, r18
    5540:	93 1f       	adc	r25, r19
    5542:	e9 81       	ldd	r30, Y+1	; 0x01
    5544:	fa 81       	ldd	r31, Y+2	; 0x02
    5546:	97 83       	std	Z+7, r25	; 0x07
    5548:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    554a:	e9 81       	ldd	r30, Y+1	; 0x01
    554c:	fa 81       	ldd	r31, Y+2	; 0x02
    554e:	26 81       	ldd	r18, Z+6	; 0x06
    5550:	37 81       	ldd	r19, Z+7	; 0x07
    5552:	e9 81       	ldd	r30, Y+1	; 0x01
    5554:	fa 81       	ldd	r31, Y+2	; 0x02
    5556:	80 81       	ld	r24, Z
    5558:	91 81       	ldd	r25, Z+1	; 0x01
    555a:	28 17       	cp	r18, r24
    555c:	39 07       	cpc	r19, r25
    555e:	90 f4       	brcc	.+36     	; 0x5584 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    5560:	e9 81       	ldd	r30, Y+1	; 0x01
    5562:	fa 81       	ldd	r31, Y+2	; 0x02
    5564:	22 81       	ldd	r18, Z+2	; 0x02
    5566:	33 81       	ldd	r19, Z+3	; 0x03
    5568:	e9 81       	ldd	r30, Y+1	; 0x01
    556a:	fa 81       	ldd	r31, Y+2	; 0x02
    556c:	84 8d       	ldd	r24, Z+28	; 0x1c
    556e:	88 2f       	mov	r24, r24
    5570:	90 e0       	ldi	r25, 0x00	; 0
    5572:	90 95       	com	r25
    5574:	81 95       	neg	r24
    5576:	9f 4f       	sbci	r25, 0xFF	; 255
    5578:	82 0f       	add	r24, r18
    557a:	93 1f       	adc	r25, r19
    557c:	e9 81       	ldd	r30, Y+1	; 0x01
    557e:	fa 81       	ldd	r31, Y+2	; 0x02
    5580:	97 83       	std	Z+7, r25	; 0x07
    5582:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    5584:	e9 81       	ldd	r30, Y+1	; 0x01
    5586:	fa 81       	ldd	r31, Y+2	; 0x02
    5588:	82 8d       	ldd	r24, Z+26	; 0x1a
    558a:	8f 5f       	subi	r24, 0xFF	; 255
    558c:	e9 81       	ldd	r30, Y+1	; 0x01
    558e:	fa 81       	ldd	r31, Y+2	; 0x02
    5590:	82 8f       	std	Z+26, r24	; 0x1a
}
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	0f 90       	pop	r0
    5598:	0f 90       	pop	r0
    559a:	0f 90       	pop	r0
    559c:	cf 91       	pop	r28
    559e:	df 91       	pop	r29
    55a0:	08 95       	ret

000055a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    55a2:	df 93       	push	r29
    55a4:	cf 93       	push	r28
    55a6:	00 d0       	rcall	.+0      	; 0x55a8 <prvCopyDataFromQueue+0x6>
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <prvCopyDataFromQueue+0x8>
    55aa:	cd b7       	in	r28, 0x3d	; 61
    55ac:	de b7       	in	r29, 0x3e	; 62
    55ae:	9a 83       	std	Y+2, r25	; 0x02
    55b0:	89 83       	std	Y+1, r24	; 0x01
    55b2:	7c 83       	std	Y+4, r23	; 0x04
    55b4:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    55b6:	e9 81       	ldd	r30, Y+1	; 0x01
    55b8:	fa 81       	ldd	r31, Y+2	; 0x02
    55ba:	80 81       	ld	r24, Z
    55bc:	91 81       	ldd	r25, Z+1	; 0x01
    55be:	00 97       	sbiw	r24, 0x00	; 0
    55c0:	89 f1       	breq	.+98     	; 0x5624 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    55c2:	e9 81       	ldd	r30, Y+1	; 0x01
    55c4:	fa 81       	ldd	r31, Y+2	; 0x02
    55c6:	26 81       	ldd	r18, Z+6	; 0x06
    55c8:	37 81       	ldd	r19, Z+7	; 0x07
    55ca:	e9 81       	ldd	r30, Y+1	; 0x01
    55cc:	fa 81       	ldd	r31, Y+2	; 0x02
    55ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    55d0:	88 2f       	mov	r24, r24
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	82 0f       	add	r24, r18
    55d6:	93 1f       	adc	r25, r19
    55d8:	e9 81       	ldd	r30, Y+1	; 0x01
    55da:	fa 81       	ldd	r31, Y+2	; 0x02
    55dc:	97 83       	std	Z+7, r25	; 0x07
    55de:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    55e0:	e9 81       	ldd	r30, Y+1	; 0x01
    55e2:	fa 81       	ldd	r31, Y+2	; 0x02
    55e4:	26 81       	ldd	r18, Z+6	; 0x06
    55e6:	37 81       	ldd	r19, Z+7	; 0x07
    55e8:	e9 81       	ldd	r30, Y+1	; 0x01
    55ea:	fa 81       	ldd	r31, Y+2	; 0x02
    55ec:	82 81       	ldd	r24, Z+2	; 0x02
    55ee:	93 81       	ldd	r25, Z+3	; 0x03
    55f0:	28 17       	cp	r18, r24
    55f2:	39 07       	cpc	r19, r25
    55f4:	40 f0       	brcs	.+16     	; 0x5606 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    55f6:	e9 81       	ldd	r30, Y+1	; 0x01
    55f8:	fa 81       	ldd	r31, Y+2	; 0x02
    55fa:	80 81       	ld	r24, Z
    55fc:	91 81       	ldd	r25, Z+1	; 0x01
    55fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5600:	fa 81       	ldd	r31, Y+2	; 0x02
    5602:	97 83       	std	Z+7, r25	; 0x07
    5604:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    5606:	e9 81       	ldd	r30, Y+1	; 0x01
    5608:	fa 81       	ldd	r31, Y+2	; 0x02
    560a:	46 81       	ldd	r20, Z+6	; 0x06
    560c:	57 81       	ldd	r21, Z+7	; 0x07
    560e:	e9 81       	ldd	r30, Y+1	; 0x01
    5610:	fa 81       	ldd	r31, Y+2	; 0x02
    5612:	84 8d       	ldd	r24, Z+28	; 0x1c
    5614:	28 2f       	mov	r18, r24
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	8b 81       	ldd	r24, Y+3	; 0x03
    561a:	9c 81       	ldd	r25, Y+4	; 0x04
    561c:	ba 01       	movw	r22, r20
    561e:	a9 01       	movw	r20, r18
    5620:	0e 94 89 38 	call	0x7112	; 0x7112 <memcpy>
	}
}
    5624:	0f 90       	pop	r0
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	cf 91       	pop	r28
    562e:	df 91       	pop	r29
    5630:	08 95       	ret

00005632 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    5632:	df 93       	push	r29
    5634:	cf 93       	push	r28
    5636:	00 d0       	rcall	.+0      	; 0x5638 <prvUnlockQueue+0x6>
    5638:	cd b7       	in	r28, 0x3d	; 61
    563a:	de b7       	in	r29, 0x3e	; 62
    563c:	9a 83       	std	Y+2, r25	; 0x02
    563e:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    5640:	0f b6       	in	r0, 0x3f	; 63
    5642:	f8 94       	cli
    5644:	0f 92       	push	r0
    5646:	15 c0       	rjmp	.+42     	; 0x5672 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    5648:	e9 81       	ldd	r30, Y+1	; 0x01
    564a:	fa 81       	ldd	r31, Y+2	; 0x02
    564c:	81 89       	ldd	r24, Z+17	; 0x11
    564e:	88 23       	and	r24, r24
    5650:	a9 f0       	breq	.+42     	; 0x567c <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    5652:	89 81       	ldd	r24, Y+1	; 0x01
    5654:	9a 81       	ldd	r25, Y+2	; 0x02
    5656:	41 96       	adiw	r24, 0x11	; 17
    5658:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    565c:	88 23       	and	r24, r24
    565e:	11 f0       	breq	.+4      	; 0x5664 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    5660:	0e 94 2f 31 	call	0x625e	; 0x625e <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    5664:	e9 81       	ldd	r30, Y+1	; 0x01
    5666:	fa 81       	ldd	r31, Y+2	; 0x02
    5668:	86 8d       	ldd	r24, Z+30	; 0x1e
    566a:	81 50       	subi	r24, 0x01	; 1
    566c:	e9 81       	ldd	r30, Y+1	; 0x01
    566e:	fa 81       	ldd	r31, Y+2	; 0x02
    5670:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    5672:	e9 81       	ldd	r30, Y+1	; 0x01
    5674:	fa 81       	ldd	r31, Y+2	; 0x02
    5676:	86 8d       	ldd	r24, Z+30	; 0x1e
    5678:	18 16       	cp	r1, r24
    567a:	34 f3       	brlt	.-52     	; 0x5648 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    567c:	e9 81       	ldd	r30, Y+1	; 0x01
    567e:	fa 81       	ldd	r31, Y+2	; 0x02
    5680:	8f ef       	ldi	r24, 0xFF	; 255
    5682:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    5684:	0f 90       	pop	r0
    5686:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	f8 94       	cli
    568c:	0f 92       	push	r0
    568e:	15 c0       	rjmp	.+42     	; 0x56ba <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    5690:	e9 81       	ldd	r30, Y+1	; 0x01
    5692:	fa 81       	ldd	r31, Y+2	; 0x02
    5694:	80 85       	ldd	r24, Z+8	; 0x08
    5696:	88 23       	and	r24, r24
    5698:	a9 f0       	breq	.+42     	; 0x56c4 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    569a:	89 81       	ldd	r24, Y+1	; 0x01
    569c:	9a 81       	ldd	r25, Y+2	; 0x02
    569e:	08 96       	adiw	r24, 0x08	; 8
    56a0:	0e 94 51 30 	call	0x60a2	; 0x60a2 <xTaskRemoveFromEventList>
    56a4:	88 23       	and	r24, r24
    56a6:	11 f0       	breq	.+4      	; 0x56ac <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    56a8:	0e 94 2f 31 	call	0x625e	; 0x625e <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    56ac:	e9 81       	ldd	r30, Y+1	; 0x01
    56ae:	fa 81       	ldd	r31, Y+2	; 0x02
    56b0:	85 8d       	ldd	r24, Z+29	; 0x1d
    56b2:	81 50       	subi	r24, 0x01	; 1
    56b4:	e9 81       	ldd	r30, Y+1	; 0x01
    56b6:	fa 81       	ldd	r31, Y+2	; 0x02
    56b8:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    56ba:	e9 81       	ldd	r30, Y+1	; 0x01
    56bc:	fa 81       	ldd	r31, Y+2	; 0x02
    56be:	85 8d       	ldd	r24, Z+29	; 0x1d
    56c0:	18 16       	cp	r1, r24
    56c2:	34 f3       	brlt	.-52     	; 0x5690 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    56c4:	e9 81       	ldd	r30, Y+1	; 0x01
    56c6:	fa 81       	ldd	r31, Y+2	; 0x02
    56c8:	8f ef       	ldi	r24, 0xFF	; 255
    56ca:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    56cc:	0f 90       	pop	r0
    56ce:	0f be       	out	0x3f, r0	; 63
}
    56d0:	0f 90       	pop	r0
    56d2:	0f 90       	pop	r0
    56d4:	cf 91       	pop	r28
    56d6:	df 91       	pop	r29
    56d8:	08 95       	ret

000056da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    56da:	df 93       	push	r29
    56dc:	cf 93       	push	r28
    56de:	00 d0       	rcall	.+0      	; 0x56e0 <prvIsQueueEmpty+0x6>
    56e0:	0f 92       	push	r0
    56e2:	cd b7       	in	r28, 0x3d	; 61
    56e4:	de b7       	in	r29, 0x3e	; 62
    56e6:	9b 83       	std	Y+3, r25	; 0x03
    56e8:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    56ea:	0f b6       	in	r0, 0x3f	; 63
    56ec:	f8 94       	cli
    56ee:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    56f0:	ea 81       	ldd	r30, Y+2	; 0x02
    56f2:	fb 81       	ldd	r31, Y+3	; 0x03
    56f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    56f6:	19 82       	std	Y+1, r1	; 0x01
    56f8:	88 23       	and	r24, r24
    56fa:	11 f4       	brne	.+4      	; 0x5700 <prvIsQueueEmpty+0x26>
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    5700:	0f 90       	pop	r0
    5702:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5704:	89 81       	ldd	r24, Y+1	; 0x01
}
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	0f 90       	pop	r0
    570c:	cf 91       	pop	r28
    570e:	df 91       	pop	r29
    5710:	08 95       	ret

00005712 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    5712:	df 93       	push	r29
    5714:	cf 93       	push	r28
    5716:	00 d0       	rcall	.+0      	; 0x5718 <xQueueIsQueueEmptyFromISR+0x6>
    5718:	0f 92       	push	r0
    571a:	cd b7       	in	r28, 0x3d	; 61
    571c:	de b7       	in	r29, 0x3e	; 62
    571e:	9b 83       	std	Y+3, r25	; 0x03
    5720:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    5722:	ea 81       	ldd	r30, Y+2	; 0x02
    5724:	fb 81       	ldd	r31, Y+3	; 0x03
    5726:	82 8d       	ldd	r24, Z+26	; 0x1a
    5728:	19 82       	std	Y+1, r1	; 0x01
    572a:	88 23       	and	r24, r24
    572c:	11 f4       	brne	.+4      	; 0x5732 <xQueueIsQueueEmptyFromISR+0x20>
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    5732:	89 81       	ldd	r24, Y+1	; 0x01
}
    5734:	0f 90       	pop	r0
    5736:	0f 90       	pop	r0
    5738:	0f 90       	pop	r0
    573a:	cf 91       	pop	r28
    573c:	df 91       	pop	r29
    573e:	08 95       	ret

00005740 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    5740:	df 93       	push	r29
    5742:	cf 93       	push	r28
    5744:	00 d0       	rcall	.+0      	; 0x5746 <prvIsQueueFull+0x6>
    5746:	0f 92       	push	r0
    5748:	cd b7       	in	r28, 0x3d	; 61
    574a:	de b7       	in	r29, 0x3e	; 62
    574c:	9b 83       	std	Y+3, r25	; 0x03
    574e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    5750:	0f b6       	in	r0, 0x3f	; 63
    5752:	f8 94       	cli
    5754:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    5756:	ea 81       	ldd	r30, Y+2	; 0x02
    5758:	fb 81       	ldd	r31, Y+3	; 0x03
    575a:	92 8d       	ldd	r25, Z+26	; 0x1a
    575c:	ea 81       	ldd	r30, Y+2	; 0x02
    575e:	fb 81       	ldd	r31, Y+3	; 0x03
    5760:	83 8d       	ldd	r24, Z+27	; 0x1b
    5762:	19 82       	std	Y+1, r1	; 0x01
    5764:	98 17       	cp	r25, r24
    5766:	11 f4       	brne	.+4      	; 0x576c <prvIsQueueFull+0x2c>
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    576c:	0f 90       	pop	r0
    576e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    5770:	89 81       	ldd	r24, Y+1	; 0x01
}
    5772:	0f 90       	pop	r0
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	cf 91       	pop	r28
    577a:	df 91       	pop	r29
    577c:	08 95       	ret

0000577e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    577e:	df 93       	push	r29
    5780:	cf 93       	push	r28
    5782:	00 d0       	rcall	.+0      	; 0x5784 <xQueueIsQueueFullFromISR+0x6>
    5784:	0f 92       	push	r0
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	9b 83       	std	Y+3, r25	; 0x03
    578c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    578e:	ea 81       	ldd	r30, Y+2	; 0x02
    5790:	fb 81       	ldd	r31, Y+3	; 0x03
    5792:	92 8d       	ldd	r25, Z+26	; 0x1a
    5794:	ea 81       	ldd	r30, Y+2	; 0x02
    5796:	fb 81       	ldd	r31, Y+3	; 0x03
    5798:	83 8d       	ldd	r24, Z+27	; 0x1b
    579a:	19 82       	std	Y+1, r1	; 0x01
    579c:	98 17       	cp	r25, r24
    579e:	11 f4       	brne	.+4      	; 0x57a4 <xQueueIsQueueFullFromISR+0x26>
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    57a6:	0f 90       	pop	r0
    57a8:	0f 90       	pop	r0
    57aa:	0f 90       	pop	r0
    57ac:	cf 91       	pop	r28
    57ae:	df 91       	pop	r29
    57b0:	08 95       	ret

000057b2 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    57b2:	af 92       	push	r10
    57b4:	bf 92       	push	r11
    57b6:	cf 92       	push	r12
    57b8:	df 92       	push	r13
    57ba:	ef 92       	push	r14
    57bc:	ff 92       	push	r15
    57be:	0f 93       	push	r16
    57c0:	1f 93       	push	r17
    57c2:	df 93       	push	r29
    57c4:	cf 93       	push	r28
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	64 97       	sbiw	r28, 0x14	; 20
    57cc:	0f b6       	in	r0, 0x3f	; 63
    57ce:	f8 94       	cli
    57d0:	de bf       	out	0x3e, r29	; 62
    57d2:	0f be       	out	0x3f, r0	; 63
    57d4:	cd bf       	out	0x3d, r28	; 61
    57d6:	9f 83       	std	Y+7, r25	; 0x07
    57d8:	8e 83       	std	Y+6, r24	; 0x06
    57da:	79 87       	std	Y+9, r23	; 0x09
    57dc:	68 87       	std	Y+8, r22	; 0x08
    57de:	5b 87       	std	Y+11, r21	; 0x0b
    57e0:	4a 87       	std	Y+10, r20	; 0x0a
    57e2:	3d 87       	std	Y+13, r19	; 0x0d
    57e4:	2c 87       	std	Y+12, r18	; 0x0c
    57e6:	0e 87       	std	Y+14, r16	; 0x0e
    57e8:	f8 8a       	std	Y+16, r15	; 0x10
    57ea:	ef 86       	std	Y+15, r14	; 0x0f
    57ec:	da 8a       	std	Y+18, r13	; 0x12
    57ee:	c9 8a       	std	Y+17, r12	; 0x11
    57f0:	bc 8a       	std	Y+20, r11	; 0x14
    57f2:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    57f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    57f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    57f8:	29 89       	ldd	r18, Y+17	; 0x11
    57fa:	3a 89       	ldd	r19, Y+18	; 0x12
    57fc:	b9 01       	movw	r22, r18
    57fe:	0e 94 5e 32 	call	0x64bc	; 0x64bc <prvAllocateTCBAndStack>
    5802:	9c 83       	std	Y+4, r25	; 0x04
    5804:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    5806:	8b 81       	ldd	r24, Y+3	; 0x03
    5808:	9c 81       	ldd	r25, Y+4	; 0x04
    580a:	00 97       	sbiw	r24, 0x00	; 0
    580c:	09 f4       	brne	.+2      	; 0x5810 <xTaskGenericCreate+0x5e>
    580e:	99 c0       	rjmp	.+306    	; 0x5942 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    5810:	eb 81       	ldd	r30, Y+3	; 0x03
    5812:	fc 81       	ldd	r31, Y+4	; 0x04
    5814:	27 89       	ldd	r18, Z+23	; 0x17
    5816:	30 8d       	ldd	r19, Z+24	; 0x18
    5818:	8a 85       	ldd	r24, Y+10	; 0x0a
    581a:	9b 85       	ldd	r25, Y+11	; 0x0b
    581c:	01 97       	sbiw	r24, 0x01	; 1
    581e:	82 0f       	add	r24, r18
    5820:	93 1f       	adc	r25, r19
    5822:	9a 83       	std	Y+2, r25	; 0x02
    5824:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    5826:	8b 81       	ldd	r24, Y+3	; 0x03
    5828:	9c 81       	ldd	r25, Y+4	; 0x04
    582a:	28 85       	ldd	r18, Y+8	; 0x08
    582c:	39 85       	ldd	r19, Y+9	; 0x09
    582e:	eb 89       	ldd	r30, Y+19	; 0x13
    5830:	fc 89       	ldd	r31, Y+20	; 0x14
    5832:	aa 85       	ldd	r26, Y+10	; 0x0a
    5834:	bb 85       	ldd	r27, Y+11	; 0x0b
    5836:	b9 01       	movw	r22, r18
    5838:	4e 85       	ldd	r20, Y+14	; 0x0e
    583a:	9f 01       	movw	r18, r30
    583c:	8d 01       	movw	r16, r26
    583e:	0e 94 43 31 	call	0x6286	; 0x6286 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    5842:	89 81       	ldd	r24, Y+1	; 0x01
    5844:	9a 81       	ldd	r25, Y+2	; 0x02
    5846:	2e 81       	ldd	r18, Y+6	; 0x06
    5848:	3f 81       	ldd	r19, Y+7	; 0x07
    584a:	4c 85       	ldd	r20, Y+12	; 0x0c
    584c:	5d 85       	ldd	r21, Y+13	; 0x0d
    584e:	b9 01       	movw	r22, r18
    5850:	0e 94 86 24 	call	0x490c	; 0x490c <pxPortInitialiseStack>
    5854:	eb 81       	ldd	r30, Y+3	; 0x03
    5856:	fc 81       	ldd	r31, Y+4	; 0x04
    5858:	91 83       	std	Z+1, r25	; 0x01
    585a:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    585c:	8f 85       	ldd	r24, Y+15	; 0x0f
    585e:	98 89       	ldd	r25, Y+16	; 0x10
    5860:	00 97       	sbiw	r24, 0x00	; 0
    5862:	31 f0       	breq	.+12     	; 0x5870 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    5864:	ef 85       	ldd	r30, Y+15	; 0x0f
    5866:	f8 89       	ldd	r31, Y+16	; 0x10
    5868:	8b 81       	ldd	r24, Y+3	; 0x03
    586a:	9c 81       	ldd	r25, Y+4	; 0x04
    586c:	91 83       	std	Z+1, r25	; 0x01
    586e:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    5870:	0f b6       	in	r0, 0x3f	; 63
    5872:	f8 94       	cli
    5874:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    5876:	80 91 4a 04 	lds	r24, 0x044A
    587a:	8f 5f       	subi	r24, 0xFF	; 255
    587c:	80 93 4a 04 	sts	0x044A, r24
			if( pxCurrentTCB == NULL )
    5880:	80 91 47 04 	lds	r24, 0x0447
    5884:	90 91 48 04 	lds	r25, 0x0448
    5888:	00 97       	sbiw	r24, 0x00	; 0
    588a:	69 f4       	brne	.+26     	; 0x58a6 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    588c:	8b 81       	ldd	r24, Y+3	; 0x03
    588e:	9c 81       	ldd	r25, Y+4	; 0x04
    5890:	90 93 48 04 	sts	0x0448, r25
    5894:	80 93 47 04 	sts	0x0447, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    5898:	80 91 4a 04 	lds	r24, 0x044A
    589c:	81 30       	cpi	r24, 0x01	; 1
    589e:	a9 f4       	brne	.+42     	; 0x58ca <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    58a0:	0e 94 9a 31 	call	0x6334	; 0x6334 <prvInitialiseTaskLists>
    58a4:	12 c0       	rjmp	.+36     	; 0x58ca <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    58a6:	80 91 4f 04 	lds	r24, 0x044F
    58aa:	88 23       	and	r24, r24
    58ac:	71 f4       	brne	.+28     	; 0x58ca <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    58ae:	e0 91 47 04 	lds	r30, 0x0447
    58b2:	f0 91 48 04 	lds	r31, 0x0448
    58b6:	96 89       	ldd	r25, Z+22	; 0x16
    58b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    58ba:	89 17       	cp	r24, r25
    58bc:	30 f0       	brcs	.+12     	; 0x58ca <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    58be:	8b 81       	ldd	r24, Y+3	; 0x03
    58c0:	9c 81       	ldd	r25, Y+4	; 0x04
    58c2:	90 93 48 04 	sts	0x0448, r25
    58c6:	80 93 47 04 	sts	0x0447, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    58ca:	eb 81       	ldd	r30, Y+3	; 0x03
    58cc:	fc 81       	ldd	r31, Y+4	; 0x04
    58ce:	96 89       	ldd	r25, Z+22	; 0x16
    58d0:	80 91 4d 04 	lds	r24, 0x044D
    58d4:	89 17       	cp	r24, r25
    58d6:	28 f4       	brcc	.+10     	; 0x58e2 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    58d8:	eb 81       	ldd	r30, Y+3	; 0x03
    58da:	fc 81       	ldd	r31, Y+4	; 0x04
    58dc:	86 89       	ldd	r24, Z+22	; 0x16
    58de:	80 93 4d 04 	sts	0x044D, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    58e2:	80 91 54 04 	lds	r24, 0x0454
    58e6:	8f 5f       	subi	r24, 0xFF	; 255
    58e8:	80 93 54 04 	sts	0x0454, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    58ec:	eb 81       	ldd	r30, Y+3	; 0x03
    58ee:	fc 81       	ldd	r31, Y+4	; 0x04
    58f0:	96 89       	ldd	r25, Z+22	; 0x16
    58f2:	80 91 4e 04 	lds	r24, 0x044E
    58f6:	89 17       	cp	r24, r25
    58f8:	28 f4       	brcc	.+10     	; 0x5904 <xTaskGenericCreate+0x152>
    58fa:	eb 81       	ldd	r30, Y+3	; 0x03
    58fc:	fc 81       	ldd	r31, Y+4	; 0x04
    58fe:	86 89       	ldd	r24, Z+22	; 0x16
    5900:	80 93 4e 04 	sts	0x044E, r24
    5904:	eb 81       	ldd	r30, Y+3	; 0x03
    5906:	fc 81       	ldd	r31, Y+4	; 0x04
    5908:	86 89       	ldd	r24, Z+22	; 0x16
    590a:	28 2f       	mov	r18, r24
    590c:	30 e0       	ldi	r19, 0x00	; 0
    590e:	c9 01       	movw	r24, r18
    5910:	88 0f       	add	r24, r24
    5912:	99 1f       	adc	r25, r25
    5914:	88 0f       	add	r24, r24
    5916:	99 1f       	adc	r25, r25
    5918:	88 0f       	add	r24, r24
    591a:	99 1f       	adc	r25, r25
    591c:	82 0f       	add	r24, r18
    591e:	93 1f       	adc	r25, r19
    5920:	ac 01       	movw	r20, r24
    5922:	4b 5a       	subi	r20, 0xAB	; 171
    5924:	5b 4f       	sbci	r21, 0xFB	; 251
    5926:	8b 81       	ldd	r24, Y+3	; 0x03
    5928:	9c 81       	ldd	r25, Y+4	; 0x04
    592a:	9c 01       	movw	r18, r24
    592c:	2e 5f       	subi	r18, 0xFE	; 254
    592e:	3f 4f       	sbci	r19, 0xFF	; 255
    5930:	ca 01       	movw	r24, r20
    5932:	b9 01       	movw	r22, r18
    5934:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>

			xReturn = pdPASS;
    5938:	81 e0       	ldi	r24, 0x01	; 1
    593a:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    593c:	0f 90       	pop	r0
    593e:	0f be       	out	0x3f, r0	; 63
    5940:	02 c0       	rjmp	.+4      	; 0x5946 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5942:	8f ef       	ldi	r24, 0xFF	; 255
    5944:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    5946:	8d 81       	ldd	r24, Y+5	; 0x05
    5948:	81 30       	cpi	r24, 0x01	; 1
    594a:	71 f4       	brne	.+28     	; 0x5968 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    594c:	80 91 4f 04 	lds	r24, 0x044F
    5950:	88 23       	and	r24, r24
    5952:	51 f0       	breq	.+20     	; 0x5968 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    5954:	e0 91 47 04 	lds	r30, 0x0447
    5958:	f0 91 48 04 	lds	r31, 0x0448
    595c:	96 89       	ldd	r25, Z+22	; 0x16
    595e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5960:	98 17       	cp	r25, r24
    5962:	10 f4       	brcc	.+4      	; 0x5968 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    5964:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
			}
		}
	}

	return xReturn;
    5968:	8d 81       	ldd	r24, Y+5	; 0x05
}
    596a:	64 96       	adiw	r28, 0x14	; 20
    596c:	0f b6       	in	r0, 0x3f	; 63
    596e:	f8 94       	cli
    5970:	de bf       	out	0x3e, r29	; 62
    5972:	0f be       	out	0x3f, r0	; 63
    5974:	cd bf       	out	0x3d, r28	; 61
    5976:	cf 91       	pop	r28
    5978:	df 91       	pop	r29
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	ff 90       	pop	r15
    5980:	ef 90       	pop	r14
    5982:	df 90       	pop	r13
    5984:	cf 90       	pop	r12
    5986:	bf 90       	pop	r11
    5988:	af 90       	pop	r10
    598a:	08 95       	ret

0000598c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    598c:	df 93       	push	r29
    598e:	cf 93       	push	r28
    5990:	00 d0       	rcall	.+0      	; 0x5992 <vTaskDelete+0x6>
    5992:	00 d0       	rcall	.+0      	; 0x5994 <vTaskDelete+0x8>
    5994:	00 d0       	rcall	.+0      	; 0x5996 <vTaskDelete+0xa>
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
    599a:	9c 83       	std	Y+4, r25	; 0x04
    599c:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    599e:	0f b6       	in	r0, 0x3f	; 63
    59a0:	f8 94       	cli
    59a2:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    59a4:	20 91 47 04 	lds	r18, 0x0447
    59a8:	30 91 48 04 	lds	r19, 0x0448
    59ac:	8b 81       	ldd	r24, Y+3	; 0x03
    59ae:	9c 81       	ldd	r25, Y+4	; 0x04
    59b0:	82 17       	cp	r24, r18
    59b2:	93 07       	cpc	r25, r19
    59b4:	11 f4       	brne	.+4      	; 0x59ba <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    59b6:	1c 82       	std	Y+4, r1	; 0x04
    59b8:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    59ba:	8b 81       	ldd	r24, Y+3	; 0x03
    59bc:	9c 81       	ldd	r25, Y+4	; 0x04
    59be:	00 97       	sbiw	r24, 0x00	; 0
    59c0:	39 f4       	brne	.+14     	; 0x59d0 <vTaskDelete+0x44>
    59c2:	80 91 47 04 	lds	r24, 0x0447
    59c6:	90 91 48 04 	lds	r25, 0x0448
    59ca:	9e 83       	std	Y+6, r25	; 0x06
    59cc:	8d 83       	std	Y+5, r24	; 0x05
    59ce:	04 c0       	rjmp	.+8      	; 0x59d8 <vTaskDelete+0x4c>
    59d0:	8b 81       	ldd	r24, Y+3	; 0x03
    59d2:	9c 81       	ldd	r25, Y+4	; 0x04
    59d4:	9e 83       	std	Y+6, r25	; 0x06
    59d6:	8d 83       	std	Y+5, r24	; 0x05
    59d8:	8d 81       	ldd	r24, Y+5	; 0x05
    59da:	9e 81       	ldd	r25, Y+6	; 0x06
    59dc:	9a 83       	std	Y+2, r25	; 0x02
    59de:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    59e0:	89 81       	ldd	r24, Y+1	; 0x01
    59e2:	9a 81       	ldd	r25, Y+2	; 0x02
    59e4:	02 96       	adiw	r24, 0x02	; 2
    59e6:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    59ea:	e9 81       	ldd	r30, Y+1	; 0x01
    59ec:	fa 81       	ldd	r31, Y+2	; 0x02
    59ee:	84 89       	ldd	r24, Z+20	; 0x14
    59f0:	95 89       	ldd	r25, Z+21	; 0x15
    59f2:	00 97       	sbiw	r24, 0x00	; 0
    59f4:	29 f0       	breq	.+10     	; 0x5a00 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    59f6:	89 81       	ldd	r24, Y+1	; 0x01
    59f8:	9a 81       	ldd	r25, Y+2	; 0x02
    59fa:	0c 96       	adiw	r24, 0x0c	; 12
    59fc:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    5a00:	89 81       	ldd	r24, Y+1	; 0x01
    5a02:	9a 81       	ldd	r25, Y+2	; 0x02
    5a04:	9c 01       	movw	r18, r24
    5a06:	2e 5f       	subi	r18, 0xFE	; 254
    5a08:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0a:	81 ea       	ldi	r24, 0xA1	; 161
    5a0c:	94 e0       	ldi	r25, 0x04	; 4
    5a0e:	b9 01       	movw	r22, r18
    5a10:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    5a14:	80 91 49 04 	lds	r24, 0x0449
    5a18:	8f 5f       	subi	r24, 0xFF	; 255
    5a1a:	80 93 49 04 	sts	0x0449, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    5a1e:	80 91 54 04 	lds	r24, 0x0454
    5a22:	8f 5f       	subi	r24, 0xFF	; 255
    5a24:	80 93 54 04 	sts	0x0454, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    5a28:	0f 90       	pop	r0
    5a2a:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    5a2c:	80 91 4f 04 	lds	r24, 0x044F
    5a30:	88 23       	and	r24, r24
    5a32:	31 f0       	breq	.+12     	; 0x5a40 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    5a34:	8b 81       	ldd	r24, Y+3	; 0x03
    5a36:	9c 81       	ldd	r25, Y+4	; 0x04
    5a38:	00 97       	sbiw	r24, 0x00	; 0
    5a3a:	11 f4       	brne	.+4      	; 0x5a40 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    5a3c:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
			}
		}
	}
    5a40:	26 96       	adiw	r28, 0x06	; 6
    5a42:	0f b6       	in	r0, 0x3f	; 63
    5a44:	f8 94       	cli
    5a46:	de bf       	out	0x3e, r29	; 62
    5a48:	0f be       	out	0x3f, r0	; 63
    5a4a:	cd bf       	out	0x3d, r28	; 61
    5a4c:	cf 91       	pop	r28
    5a4e:	df 91       	pop	r29
    5a50:	08 95       	ret

00005a52 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    5a52:	df 93       	push	r29
    5a54:	cf 93       	push	r28
    5a56:	cd b7       	in	r28, 0x3d	; 61
    5a58:	de b7       	in	r29, 0x3e	; 62
    5a5a:	28 97       	sbiw	r28, 0x08	; 8
    5a5c:	0f b6       	in	r0, 0x3f	; 63
    5a5e:	f8 94       	cli
    5a60:	de bf       	out	0x3e, r29	; 62
    5a62:	0f be       	out	0x3f, r0	; 63
    5a64:	cd bf       	out	0x3d, r28	; 61
    5a66:	9e 83       	std	Y+6, r25	; 0x06
    5a68:	8d 83       	std	Y+5, r24	; 0x05
    5a6a:	78 87       	std	Y+8, r23	; 0x08
    5a6c:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    5a6e:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    5a70:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    5a74:	ed 81       	ldd	r30, Y+5	; 0x05
    5a76:	fe 81       	ldd	r31, Y+6	; 0x06
    5a78:	20 81       	ld	r18, Z
    5a7a:	31 81       	ldd	r19, Z+1	; 0x01
    5a7c:	8f 81       	ldd	r24, Y+7	; 0x07
    5a7e:	98 85       	ldd	r25, Y+8	; 0x08
    5a80:	82 0f       	add	r24, r18
    5a82:	93 1f       	adc	r25, r19
    5a84:	9c 83       	std	Y+4, r25	; 0x04
    5a86:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    5a88:	ed 81       	ldd	r30, Y+5	; 0x05
    5a8a:	fe 81       	ldd	r31, Y+6	; 0x06
    5a8c:	20 81       	ld	r18, Z
    5a8e:	31 81       	ldd	r19, Z+1	; 0x01
    5a90:	80 91 4b 04 	lds	r24, 0x044B
    5a94:	90 91 4c 04 	lds	r25, 0x044C
    5a98:	82 17       	cp	r24, r18
    5a9a:	93 07       	cpc	r25, r19
    5a9c:	a8 f4       	brcc	.+42     	; 0x5ac8 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    5a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    5aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    5aa2:	20 81       	ld	r18, Z
    5aa4:	31 81       	ldd	r19, Z+1	; 0x01
    5aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    5aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    5aaa:	82 17       	cp	r24, r18
    5aac:	93 07       	cpc	r25, r19
    5aae:	00 f5       	brcc	.+64     	; 0x5af0 <vTaskDelayUntil+0x9e>
    5ab0:	20 91 4b 04 	lds	r18, 0x044B
    5ab4:	30 91 4c 04 	lds	r19, 0x044C
    5ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    5aba:	9c 81       	ldd	r25, Y+4	; 0x04
    5abc:	28 17       	cp	r18, r24
    5abe:	39 07       	cpc	r19, r25
    5ac0:	b8 f4       	brcc	.+46     	; 0x5af0 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	89 83       	std	Y+1, r24	; 0x01
    5ac6:	14 c0       	rjmp	.+40     	; 0x5af0 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    5ac8:	ed 81       	ldd	r30, Y+5	; 0x05
    5aca:	fe 81       	ldd	r31, Y+6	; 0x06
    5acc:	20 81       	ld	r18, Z
    5ace:	31 81       	ldd	r19, Z+1	; 0x01
    5ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad4:	82 17       	cp	r24, r18
    5ad6:	93 07       	cpc	r25, r19
    5ad8:	48 f0       	brcs	.+18     	; 0x5aec <vTaskDelayUntil+0x9a>
    5ada:	20 91 4b 04 	lds	r18, 0x044B
    5ade:	30 91 4c 04 	lds	r19, 0x044C
    5ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    5ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae6:	28 17       	cp	r18, r24
    5ae8:	39 07       	cpc	r19, r25
    5aea:	10 f4       	brcc	.+4      	; 0x5af0 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    5af0:	ed 81       	ldd	r30, Y+5	; 0x05
    5af2:	fe 81       	ldd	r31, Y+6	; 0x06
    5af4:	8b 81       	ldd	r24, Y+3	; 0x03
    5af6:	9c 81       	ldd	r25, Y+4	; 0x04
    5af8:	91 83       	std	Z+1, r25	; 0x01
    5afa:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    5afc:	89 81       	ldd	r24, Y+1	; 0x01
    5afe:	88 23       	and	r24, r24
    5b00:	59 f0       	breq	.+22     	; 0x5b18 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5b02:	80 91 47 04 	lds	r24, 0x0447
    5b06:	90 91 48 04 	lds	r25, 0x0448
    5b0a:	02 96       	adiw	r24, 0x02	; 2
    5b0c:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    5b10:	8b 81       	ldd	r24, Y+3	; 0x03
    5b12:	9c 81       	ldd	r25, Y+4	; 0x04
    5b14:	0e 94 15 32 	call	0x642a	; 0x642a <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    5b18:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    5b1c:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    5b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5b20:	88 23       	and	r24, r24
    5b22:	11 f4       	brne	.+4      	; 0x5b28 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    5b24:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
		}
	}
    5b28:	28 96       	adiw	r28, 0x08	; 8
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	f8 94       	cli
    5b2e:	de bf       	out	0x3e, r29	; 62
    5b30:	0f be       	out	0x3f, r0	; 63
    5b32:	cd bf       	out	0x3d, r28	; 61
    5b34:	cf 91       	pop	r28
    5b36:	df 91       	pop	r29
    5b38:	08 95       	ret

00005b3a <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    5b3a:	df 93       	push	r29
    5b3c:	cf 93       	push	r28
    5b3e:	00 d0       	rcall	.+0      	; 0x5b40 <vTaskDelay+0x6>
    5b40:	00 d0       	rcall	.+0      	; 0x5b42 <vTaskDelay+0x8>
    5b42:	0f 92       	push	r0
    5b44:	cd b7       	in	r28, 0x3d	; 61
    5b46:	de b7       	in	r29, 0x3e	; 62
    5b48:	9d 83       	std	Y+5, r25	; 0x05
    5b4a:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5b4c:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    5b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    5b50:	9d 81       	ldd	r25, Y+5	; 0x05
    5b52:	00 97       	sbiw	r24, 0x00	; 0
    5b54:	d1 f0       	breq	.+52     	; 0x5b8a <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    5b56:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    5b5a:	20 91 4b 04 	lds	r18, 0x044B
    5b5e:	30 91 4c 04 	lds	r19, 0x044C
    5b62:	8c 81       	ldd	r24, Y+4	; 0x04
    5b64:	9d 81       	ldd	r25, Y+5	; 0x05
    5b66:	82 0f       	add	r24, r18
    5b68:	93 1f       	adc	r25, r19
    5b6a:	9b 83       	std	Y+3, r25	; 0x03
    5b6c:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    5b6e:	80 91 47 04 	lds	r24, 0x0447
    5b72:	90 91 48 04 	lds	r25, 0x0448
    5b76:	02 96       	adiw	r24, 0x02	; 2
    5b78:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    5b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    5b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    5b80:	0e 94 15 32 	call	0x642a	; 0x642a <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    5b84:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>
    5b88:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    5b8a:	89 81       	ldd	r24, Y+1	; 0x01
    5b8c:	88 23       	and	r24, r24
    5b8e:	11 f4       	brne	.+4      	; 0x5b94 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    5b90:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
		}
	}
    5b94:	0f 90       	pop	r0
    5b96:	0f 90       	pop	r0
    5b98:	0f 90       	pop	r0
    5b9a:	0f 90       	pop	r0
    5b9c:	0f 90       	pop	r0
    5b9e:	cf 91       	pop	r28
    5ba0:	df 91       	pop	r29
    5ba2:	08 95       	ret

00005ba4 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    5ba4:	af 92       	push	r10
    5ba6:	bf 92       	push	r11
    5ba8:	cf 92       	push	r12
    5baa:	df 92       	push	r13
    5bac:	ef 92       	push	r14
    5bae:	ff 92       	push	r15
    5bb0:	0f 93       	push	r16
    5bb2:	df 93       	push	r29
    5bb4:	cf 93       	push	r28
    5bb6:	0f 92       	push	r0
    5bb8:	cd b7       	in	r28, 0x3d	; 61
    5bba:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    5bbc:	20 e6       	ldi	r18, 0x60	; 96
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	89 e3       	ldi	r24, 0x39	; 57
    5bc2:	91 e3       	ldi	r25, 0x31	; 49
    5bc4:	b9 01       	movw	r22, r18
    5bc6:	45 e5       	ldi	r20, 0x55	; 85
    5bc8:	50 e0       	ldi	r21, 0x00	; 0
    5bca:	20 e0       	ldi	r18, 0x00	; 0
    5bcc:	30 e0       	ldi	r19, 0x00	; 0
    5bce:	00 e0       	ldi	r16, 0x00	; 0
    5bd0:	ee 24       	eor	r14, r14
    5bd2:	ff 24       	eor	r15, r15
    5bd4:	cc 24       	eor	r12, r12
    5bd6:	dd 24       	eor	r13, r13
    5bd8:	aa 24       	eor	r10, r10
    5bda:	bb 24       	eor	r11, r11
    5bdc:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <xTaskGenericCreate>
    5be0:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    5be2:	89 81       	ldd	r24, Y+1	; 0x01
    5be4:	81 30       	cpi	r24, 0x01	; 1
    5be6:	51 f4       	brne	.+20     	; 0x5bfc <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    5be8:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    5bea:	81 e0       	ldi	r24, 0x01	; 1
    5bec:	80 93 4f 04 	sts	0x044F, r24
		xTickCount = ( portTickType ) 0U;
    5bf0:	10 92 4c 04 	sts	0x044C, r1
    5bf4:	10 92 4b 04 	sts	0x044B, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    5bf8:	0e 94 09 26 	call	0x4c12	; 0x4c12 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    5bfc:	0f 90       	pop	r0
    5bfe:	cf 91       	pop	r28
    5c00:	df 91       	pop	r29
    5c02:	0f 91       	pop	r16
    5c04:	ff 90       	pop	r15
    5c06:	ef 90       	pop	r14
    5c08:	df 90       	pop	r13
    5c0a:	cf 90       	pop	r12
    5c0c:	bf 90       	pop	r11
    5c0e:	af 90       	pop	r10
    5c10:	08 95       	ret

00005c12 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    5c12:	df 93       	push	r29
    5c14:	cf 93       	push	r28
    5c16:	cd b7       	in	r28, 0x3d	; 61
    5c18:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    5c1a:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    5c1c:	10 92 4f 04 	sts	0x044F, r1
	vPortEndScheduler();
    5c20:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <vPortEndScheduler>
}
    5c24:	cf 91       	pop	r28
    5c26:	df 91       	pop	r29
    5c28:	08 95       	ret

00005c2a <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    5c2a:	df 93       	push	r29
    5c2c:	cf 93       	push	r28
    5c2e:	cd b7       	in	r28, 0x3d	; 61
    5c30:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    5c32:	80 91 50 04 	lds	r24, 0x0450
    5c36:	8f 5f       	subi	r24, 0xFF	; 255
    5c38:	80 93 50 04 	sts	0x0450, r24
}
    5c3c:	cf 91       	pop	r28
    5c3e:	df 91       	pop	r29
    5c40:	08 95       	ret

00005c42 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    5c42:	df 93       	push	r29
    5c44:	cf 93       	push	r28
    5c46:	00 d0       	rcall	.+0      	; 0x5c48 <xTaskResumeAll+0x6>
    5c48:	00 d0       	rcall	.+0      	; 0x5c4a <xTaskResumeAll+0x8>
    5c4a:	cd b7       	in	r28, 0x3d	; 61
    5c4c:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    5c4e:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    5c50:	0f b6       	in	r0, 0x3f	; 63
    5c52:	f8 94       	cli
    5c54:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    5c56:	80 91 50 04 	lds	r24, 0x0450
    5c5a:	81 50       	subi	r24, 0x01	; 1
    5c5c:	80 93 50 04 	sts	0x0450, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5c60:	80 91 50 04 	lds	r24, 0x0450
    5c64:	88 23       	and	r24, r24
    5c66:	09 f0       	breq	.+2      	; 0x5c6a <xTaskResumeAll+0x28>
    5c68:	6c c0       	rjmp	.+216    	; 0x5d42 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    5c6a:	80 91 4a 04 	lds	r24, 0x044A
    5c6e:	88 23       	and	r24, r24
    5c70:	09 f4       	brne	.+2      	; 0x5c74 <xTaskResumeAll+0x32>
    5c72:	67 c0       	rjmp	.+206    	; 0x5d42 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    5c74:	19 82       	std	Y+1, r1	; 0x01
    5c76:	41 c0       	rjmp	.+130    	; 0x5cfa <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    5c78:	e0 91 9d 04 	lds	r30, 0x049D
    5c7c:	f0 91 9e 04 	lds	r31, 0x049E
    5c80:	86 81       	ldd	r24, Z+6	; 0x06
    5c82:	97 81       	ldd	r25, Z+7	; 0x07
    5c84:	9c 83       	std	Y+4, r25	; 0x04
    5c86:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    5c88:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    5c8c:	0c 96       	adiw	r24, 0x0c	; 12
    5c8e:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    5c92:	8b 81       	ldd	r24, Y+3	; 0x03
    5c94:	9c 81       	ldd	r25, Y+4	; 0x04
    5c96:	02 96       	adiw	r24, 0x02	; 2
    5c98:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    5c9c:	eb 81       	ldd	r30, Y+3	; 0x03
    5c9e:	fc 81       	ldd	r31, Y+4	; 0x04
    5ca0:	96 89       	ldd	r25, Z+22	; 0x16
    5ca2:	80 91 4e 04 	lds	r24, 0x044E
    5ca6:	89 17       	cp	r24, r25
    5ca8:	28 f4       	brcc	.+10     	; 0x5cb4 <xTaskResumeAll+0x72>
    5caa:	eb 81       	ldd	r30, Y+3	; 0x03
    5cac:	fc 81       	ldd	r31, Y+4	; 0x04
    5cae:	86 89       	ldd	r24, Z+22	; 0x16
    5cb0:	80 93 4e 04 	sts	0x044E, r24
    5cb4:	eb 81       	ldd	r30, Y+3	; 0x03
    5cb6:	fc 81       	ldd	r31, Y+4	; 0x04
    5cb8:	86 89       	ldd	r24, Z+22	; 0x16
    5cba:	28 2f       	mov	r18, r24
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	c9 01       	movw	r24, r18
    5cc0:	88 0f       	add	r24, r24
    5cc2:	99 1f       	adc	r25, r25
    5cc4:	88 0f       	add	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	88 0f       	add	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	82 0f       	add	r24, r18
    5cce:	93 1f       	adc	r25, r19
    5cd0:	8b 5a       	subi	r24, 0xAB	; 171
    5cd2:	9b 4f       	sbci	r25, 0xFB	; 251
    5cd4:	2b 81       	ldd	r18, Y+3	; 0x03
    5cd6:	3c 81       	ldd	r19, Y+4	; 0x04
    5cd8:	2e 5f       	subi	r18, 0xFE	; 254
    5cda:	3f 4f       	sbci	r19, 0xFF	; 255
    5cdc:	b9 01       	movw	r22, r18
    5cde:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    5ce2:	eb 81       	ldd	r30, Y+3	; 0x03
    5ce4:	fc 81       	ldd	r31, Y+4	; 0x04
    5ce6:	96 89       	ldd	r25, Z+22	; 0x16
    5ce8:	e0 91 47 04 	lds	r30, 0x0447
    5cec:	f0 91 48 04 	lds	r31, 0x0448
    5cf0:	86 89       	ldd	r24, Z+22	; 0x16
    5cf2:	98 17       	cp	r25, r24
    5cf4:	10 f0       	brcs	.+4      	; 0x5cfa <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    5cf6:	81 e0       	ldi	r24, 0x01	; 1
    5cf8:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    5cfa:	80 91 98 04 	lds	r24, 0x0498
    5cfe:	88 23       	and	r24, r24
    5d00:	09 f0       	breq	.+2      	; 0x5d04 <xTaskResumeAll+0xc2>
    5d02:	ba cf       	rjmp	.-140    	; 0x5c78 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5d04:	80 91 51 04 	lds	r24, 0x0451
    5d08:	88 23       	and	r24, r24
    5d0a:	71 f0       	breq	.+28     	; 0x5d28 <xTaskResumeAll+0xe6>
    5d0c:	07 c0       	rjmp	.+14     	; 0x5d1c <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    5d0e:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <vTaskIncrementTick>
						--uxMissedTicks;
    5d12:	80 91 51 04 	lds	r24, 0x0451
    5d16:	81 50       	subi	r24, 0x01	; 1
    5d18:	80 93 51 04 	sts	0x0451, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    5d1c:	80 91 51 04 	lds	r24, 0x0451
    5d20:	88 23       	and	r24, r24
    5d22:	a9 f7       	brne	.-22     	; 0x5d0e <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    5d24:	81 e0       	ldi	r24, 0x01	; 1
    5d26:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	81 30       	cpi	r24, 0x01	; 1
    5d2c:	21 f0       	breq	.+8      	; 0x5d36 <xTaskResumeAll+0xf4>
    5d2e:	80 91 52 04 	lds	r24, 0x0452
    5d32:	81 30       	cpi	r24, 0x01	; 1
    5d34:	31 f4       	brne	.+12     	; 0x5d42 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    5d36:	81 e0       	ldi	r24, 0x01	; 1
    5d38:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    5d3a:	10 92 52 04 	sts	0x0452, r1
					portYIELD_WITHIN_API();
    5d3e:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    5d42:	0f 90       	pop	r0
    5d44:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    5d46:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5d48:	0f 90       	pop	r0
    5d4a:	0f 90       	pop	r0
    5d4c:	0f 90       	pop	r0
    5d4e:	0f 90       	pop	r0
    5d50:	cf 91       	pop	r28
    5d52:	df 91       	pop	r29
    5d54:	08 95       	ret

00005d56 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    5d56:	df 93       	push	r29
    5d58:	cf 93       	push	r28
    5d5a:	00 d0       	rcall	.+0      	; 0x5d5c <xTaskGetTickCount+0x6>
    5d5c:	cd b7       	in	r28, 0x3d	; 61
    5d5e:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    5d60:	0f b6       	in	r0, 0x3f	; 63
    5d62:	f8 94       	cli
    5d64:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    5d66:	80 91 4b 04 	lds	r24, 0x044B
    5d6a:	90 91 4c 04 	lds	r25, 0x044C
    5d6e:	9a 83       	std	Y+2, r25	; 0x02
    5d70:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    5d72:	0f 90       	pop	r0
    5d74:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    5d76:	89 81       	ldd	r24, Y+1	; 0x01
    5d78:	9a 81       	ldd	r25, Y+2	; 0x02
}
    5d7a:	0f 90       	pop	r0
    5d7c:	0f 90       	pop	r0
    5d7e:	cf 91       	pop	r28
    5d80:	df 91       	pop	r29
    5d82:	08 95       	ret

00005d84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    5d84:	df 93       	push	r29
    5d86:	cf 93       	push	r28
    5d88:	00 d0       	rcall	.+0      	; 0x5d8a <xTaskGetTickCountFromISR+0x6>
    5d8a:	0f 92       	push	r0
    5d8c:	cd b7       	in	r28, 0x3d	; 61
    5d8e:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    5d90:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    5d92:	80 91 4b 04 	lds	r24, 0x044B
    5d96:	90 91 4c 04 	lds	r25, 0x044C
    5d9a:	9b 83       	std	Y+3, r25	; 0x03
    5d9c:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    5d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5da0:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5da2:	0f 90       	pop	r0
    5da4:	0f 90       	pop	r0
    5da6:	0f 90       	pop	r0
    5da8:	cf 91       	pop	r28
    5daa:	df 91       	pop	r29
    5dac:	08 95       	ret

00005dae <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    5dae:	df 93       	push	r29
    5db0:	cf 93       	push	r28
    5db2:	cd b7       	in	r28, 0x3d	; 61
    5db4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    5db6:	80 91 4a 04 	lds	r24, 0x044A
}
    5dba:	cf 91       	pop	r28
    5dbc:	df 91       	pop	r29
    5dbe:	08 95       	ret

00005dc0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    5dc0:	df 93       	push	r29
    5dc2:	cf 93       	push	r28
    5dc4:	00 d0       	rcall	.+0      	; 0x5dc6 <vTaskIncrementTick+0x6>
    5dc6:	00 d0       	rcall	.+0      	; 0x5dc8 <vTaskIncrementTick+0x8>
    5dc8:	00 d0       	rcall	.+0      	; 0x5dca <vTaskIncrementTick+0xa>
    5dca:	cd b7       	in	r28, 0x3d	; 61
    5dcc:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    5dce:	80 91 50 04 	lds	r24, 0x0450
    5dd2:	88 23       	and	r24, r24
    5dd4:	09 f0       	breq	.+2      	; 0x5dd8 <vTaskIncrementTick+0x18>
    5dd6:	bb c0       	rjmp	.+374    	; 0x5f4e <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    5dd8:	80 91 4b 04 	lds	r24, 0x044B
    5ddc:	90 91 4c 04 	lds	r25, 0x044C
    5de0:	01 96       	adiw	r24, 0x01	; 1
    5de2:	90 93 4c 04 	sts	0x044C, r25
    5de6:	80 93 4b 04 	sts	0x044B, r24
		if( xTickCount == ( portTickType ) 0U )
    5dea:	80 91 4b 04 	lds	r24, 0x044B
    5dee:	90 91 4c 04 	lds	r25, 0x044C
    5df2:	00 97       	sbiw	r24, 0x00	; 0
    5df4:	d1 f5       	brne	.+116    	; 0x5e6a <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    5df6:	80 91 94 04 	lds	r24, 0x0494
    5dfa:	90 91 95 04 	lds	r25, 0x0495
    5dfe:	9c 83       	std	Y+4, r25	; 0x04
    5e00:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    5e02:	80 91 96 04 	lds	r24, 0x0496
    5e06:	90 91 97 04 	lds	r25, 0x0497
    5e0a:	90 93 95 04 	sts	0x0495, r25
    5e0e:	80 93 94 04 	sts	0x0494, r24
			pxOverflowDelayedTaskList = pxTemp;
    5e12:	8b 81       	ldd	r24, Y+3	; 0x03
    5e14:	9c 81       	ldd	r25, Y+4	; 0x04
    5e16:	90 93 97 04 	sts	0x0497, r25
    5e1a:	80 93 96 04 	sts	0x0496, r24
			xNumOfOverflows++;
    5e1e:	80 91 53 04 	lds	r24, 0x0453
    5e22:	8f 5f       	subi	r24, 0xFF	; 255
    5e24:	80 93 53 04 	sts	0x0453, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    5e28:	e0 91 94 04 	lds	r30, 0x0494
    5e2c:	f0 91 95 04 	lds	r31, 0x0495
    5e30:	80 81       	ld	r24, Z
    5e32:	88 23       	and	r24, r24
    5e34:	39 f4       	brne	.+14     	; 0x5e44 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    5e36:	8f ef       	ldi	r24, 0xFF	; 255
    5e38:	9f ef       	ldi	r25, 0xFF	; 255
    5e3a:	90 93 6f 01 	sts	0x016F, r25
    5e3e:	80 93 6e 01 	sts	0x016E, r24
    5e42:	13 c0       	rjmp	.+38     	; 0x5e6a <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    5e44:	e0 91 94 04 	lds	r30, 0x0494
    5e48:	f0 91 95 04 	lds	r31, 0x0495
    5e4c:	05 80       	ldd	r0, Z+5	; 0x05
    5e4e:	f6 81       	ldd	r31, Z+6	; 0x06
    5e50:	e0 2d       	mov	r30, r0
    5e52:	86 81       	ldd	r24, Z+6	; 0x06
    5e54:	97 81       	ldd	r25, Z+7	; 0x07
    5e56:	9e 83       	std	Y+6, r25	; 0x06
    5e58:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    5e5a:	ed 81       	ldd	r30, Y+5	; 0x05
    5e5c:	fe 81       	ldd	r31, Y+6	; 0x06
    5e5e:	82 81       	ldd	r24, Z+2	; 0x02
    5e60:	93 81       	ldd	r25, Z+3	; 0x03
    5e62:	90 93 6f 01 	sts	0x016F, r25
    5e66:	80 93 6e 01 	sts	0x016E, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    5e6a:	20 91 4b 04 	lds	r18, 0x044B
    5e6e:	30 91 4c 04 	lds	r19, 0x044C
    5e72:	80 91 6e 01 	lds	r24, 0x016E
    5e76:	90 91 6f 01 	lds	r25, 0x016F
    5e7a:	28 17       	cp	r18, r24
    5e7c:	39 07       	cpc	r19, r25
    5e7e:	08 f4       	brcc	.+2      	; 0x5e82 <vTaskIncrementTick+0xc2>
    5e80:	6b c0       	rjmp	.+214    	; 0x5f58 <vTaskIncrementTick+0x198>
    5e82:	e0 91 94 04 	lds	r30, 0x0494
    5e86:	f0 91 95 04 	lds	r31, 0x0495
    5e8a:	80 81       	ld	r24, Z
    5e8c:	88 23       	and	r24, r24
    5e8e:	39 f4       	brne	.+14     	; 0x5e9e <vTaskIncrementTick+0xde>
    5e90:	8f ef       	ldi	r24, 0xFF	; 255
    5e92:	9f ef       	ldi	r25, 0xFF	; 255
    5e94:	90 93 6f 01 	sts	0x016F, r25
    5e98:	80 93 6e 01 	sts	0x016E, r24
    5e9c:	5d c0       	rjmp	.+186    	; 0x5f58 <vTaskIncrementTick+0x198>
    5e9e:	e0 91 94 04 	lds	r30, 0x0494
    5ea2:	f0 91 95 04 	lds	r31, 0x0495
    5ea6:	05 80       	ldd	r0, Z+5	; 0x05
    5ea8:	f6 81       	ldd	r31, Z+6	; 0x06
    5eaa:	e0 2d       	mov	r30, r0
    5eac:	86 81       	ldd	r24, Z+6	; 0x06
    5eae:	97 81       	ldd	r25, Z+7	; 0x07
    5eb0:	9e 83       	std	Y+6, r25	; 0x06
    5eb2:	8d 83       	std	Y+5, r24	; 0x05
    5eb4:	ed 81       	ldd	r30, Y+5	; 0x05
    5eb6:	fe 81       	ldd	r31, Y+6	; 0x06
    5eb8:	82 81       	ldd	r24, Z+2	; 0x02
    5eba:	93 81       	ldd	r25, Z+3	; 0x03
    5ebc:	9a 83       	std	Y+2, r25	; 0x02
    5ebe:	89 83       	std	Y+1, r24	; 0x01
    5ec0:	20 91 4b 04 	lds	r18, 0x044B
    5ec4:	30 91 4c 04 	lds	r19, 0x044C
    5ec8:	89 81       	ldd	r24, Y+1	; 0x01
    5eca:	9a 81       	ldd	r25, Y+2	; 0x02
    5ecc:	28 17       	cp	r18, r24
    5ece:	39 07       	cpc	r19, r25
    5ed0:	38 f4       	brcc	.+14     	; 0x5ee0 <vTaskIncrementTick+0x120>
    5ed2:	89 81       	ldd	r24, Y+1	; 0x01
    5ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed6:	90 93 6f 01 	sts	0x016F, r25
    5eda:	80 93 6e 01 	sts	0x016E, r24
    5ede:	3c c0       	rjmp	.+120    	; 0x5f58 <vTaskIncrementTick+0x198>
    5ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    5ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    5ee4:	02 96       	adiw	r24, 0x02	; 2
    5ee6:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
    5eea:	ed 81       	ldd	r30, Y+5	; 0x05
    5eec:	fe 81       	ldd	r31, Y+6	; 0x06
    5eee:	84 89       	ldd	r24, Z+20	; 0x14
    5ef0:	95 89       	ldd	r25, Z+21	; 0x15
    5ef2:	00 97       	sbiw	r24, 0x00	; 0
    5ef4:	29 f0       	breq	.+10     	; 0x5f00 <vTaskIncrementTick+0x140>
    5ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    5ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    5efa:	0c 96       	adiw	r24, 0x0c	; 12
    5efc:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
    5f00:	ed 81       	ldd	r30, Y+5	; 0x05
    5f02:	fe 81       	ldd	r31, Y+6	; 0x06
    5f04:	96 89       	ldd	r25, Z+22	; 0x16
    5f06:	80 91 4e 04 	lds	r24, 0x044E
    5f0a:	89 17       	cp	r24, r25
    5f0c:	28 f4       	brcc	.+10     	; 0x5f18 <vTaskIncrementTick+0x158>
    5f0e:	ed 81       	ldd	r30, Y+5	; 0x05
    5f10:	fe 81       	ldd	r31, Y+6	; 0x06
    5f12:	86 89       	ldd	r24, Z+22	; 0x16
    5f14:	80 93 4e 04 	sts	0x044E, r24
    5f18:	ed 81       	ldd	r30, Y+5	; 0x05
    5f1a:	fe 81       	ldd	r31, Y+6	; 0x06
    5f1c:	86 89       	ldd	r24, Z+22	; 0x16
    5f1e:	28 2f       	mov	r18, r24
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	c9 01       	movw	r24, r18
    5f24:	88 0f       	add	r24, r24
    5f26:	99 1f       	adc	r25, r25
    5f28:	88 0f       	add	r24, r24
    5f2a:	99 1f       	adc	r25, r25
    5f2c:	88 0f       	add	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	82 0f       	add	r24, r18
    5f32:	93 1f       	adc	r25, r19
    5f34:	ac 01       	movw	r20, r24
    5f36:	4b 5a       	subi	r20, 0xAB	; 171
    5f38:	5b 4f       	sbci	r21, 0xFB	; 251
    5f3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f3e:	9c 01       	movw	r18, r24
    5f40:	2e 5f       	subi	r18, 0xFE	; 254
    5f42:	3f 4f       	sbci	r19, 0xFF	; 255
    5f44:	ca 01       	movw	r24, r20
    5f46:	b9 01       	movw	r22, r18
    5f48:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>
    5f4c:	9a cf       	rjmp	.-204    	; 0x5e82 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    5f4e:	80 91 51 04 	lds	r24, 0x0451
    5f52:	8f 5f       	subi	r24, 0xFF	; 255
    5f54:	80 93 51 04 	sts	0x0451, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    5f58:	26 96       	adiw	r28, 0x06	; 6
    5f5a:	0f b6       	in	r0, 0x3f	; 63
    5f5c:	f8 94       	cli
    5f5e:	de bf       	out	0x3e, r29	; 62
    5f60:	0f be       	out	0x3f, r0	; 63
    5f62:	cd bf       	out	0x3d, r28	; 61
    5f64:	cf 91       	pop	r28
    5f66:	df 91       	pop	r29
    5f68:	08 95       	ret

00005f6a <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    5f6a:	df 93       	push	r29
    5f6c:	cf 93       	push	r28
    5f6e:	00 d0       	rcall	.+0      	; 0x5f70 <vTaskSwitchContext+0x6>
    5f70:	cd b7       	in	r28, 0x3d	; 61
    5f72:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    5f74:	80 91 50 04 	lds	r24, 0x0450
    5f78:	88 23       	and	r24, r24
    5f7a:	49 f0       	breq	.+18     	; 0x5f8e <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	80 93 52 04 	sts	0x0452, r24
    5f82:	54 c0       	rjmp	.+168    	; 0x602c <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    5f84:	80 91 4e 04 	lds	r24, 0x044E
    5f88:	81 50       	subi	r24, 0x01	; 1
    5f8a:	80 93 4e 04 	sts	0x044E, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    5f8e:	80 91 4e 04 	lds	r24, 0x044E
    5f92:	28 2f       	mov	r18, r24
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	c9 01       	movw	r24, r18
    5f98:	88 0f       	add	r24, r24
    5f9a:	99 1f       	adc	r25, r25
    5f9c:	88 0f       	add	r24, r24
    5f9e:	99 1f       	adc	r25, r25
    5fa0:	88 0f       	add	r24, r24
    5fa2:	99 1f       	adc	r25, r25
    5fa4:	82 0f       	add	r24, r18
    5fa6:	93 1f       	adc	r25, r19
    5fa8:	fc 01       	movw	r30, r24
    5faa:	eb 5a       	subi	r30, 0xAB	; 171
    5fac:	fb 4f       	sbci	r31, 0xFB	; 251
    5fae:	80 81       	ld	r24, Z
    5fb0:	88 23       	and	r24, r24
    5fb2:	41 f3       	breq	.-48     	; 0x5f84 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    5fb4:	80 91 4e 04 	lds	r24, 0x044E
    5fb8:	28 2f       	mov	r18, r24
    5fba:	30 e0       	ldi	r19, 0x00	; 0
    5fbc:	c9 01       	movw	r24, r18
    5fbe:	88 0f       	add	r24, r24
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	88 0f       	add	r24, r24
    5fc4:	99 1f       	adc	r25, r25
    5fc6:	88 0f       	add	r24, r24
    5fc8:	99 1f       	adc	r25, r25
    5fca:	82 0f       	add	r24, r18
    5fcc:	93 1f       	adc	r25, r19
    5fce:	8b 5a       	subi	r24, 0xAB	; 171
    5fd0:	9b 4f       	sbci	r25, 0xFB	; 251
    5fd2:	9a 83       	std	Y+2, r25	; 0x02
    5fd4:	89 83       	std	Y+1, r24	; 0x01
    5fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    5fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    5fda:	01 80       	ldd	r0, Z+1	; 0x01
    5fdc:	f2 81       	ldd	r31, Z+2	; 0x02
    5fde:	e0 2d       	mov	r30, r0
    5fe0:	82 81       	ldd	r24, Z+2	; 0x02
    5fe2:	93 81       	ldd	r25, Z+3	; 0x03
    5fe4:	e9 81       	ldd	r30, Y+1	; 0x01
    5fe6:	fa 81       	ldd	r31, Y+2	; 0x02
    5fe8:	92 83       	std	Z+2, r25	; 0x02
    5fea:	81 83       	std	Z+1, r24	; 0x01
    5fec:	e9 81       	ldd	r30, Y+1	; 0x01
    5fee:	fa 81       	ldd	r31, Y+2	; 0x02
    5ff0:	21 81       	ldd	r18, Z+1	; 0x01
    5ff2:	32 81       	ldd	r19, Z+2	; 0x02
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff8:	03 96       	adiw	r24, 0x03	; 3
    5ffa:	28 17       	cp	r18, r24
    5ffc:	39 07       	cpc	r19, r25
    5ffe:	59 f4       	brne	.+22     	; 0x6016 <vTaskSwitchContext+0xac>
    6000:	e9 81       	ldd	r30, Y+1	; 0x01
    6002:	fa 81       	ldd	r31, Y+2	; 0x02
    6004:	01 80       	ldd	r0, Z+1	; 0x01
    6006:	f2 81       	ldd	r31, Z+2	; 0x02
    6008:	e0 2d       	mov	r30, r0
    600a:	82 81       	ldd	r24, Z+2	; 0x02
    600c:	93 81       	ldd	r25, Z+3	; 0x03
    600e:	e9 81       	ldd	r30, Y+1	; 0x01
    6010:	fa 81       	ldd	r31, Y+2	; 0x02
    6012:	92 83       	std	Z+2, r25	; 0x02
    6014:	81 83       	std	Z+1, r24	; 0x01
    6016:	e9 81       	ldd	r30, Y+1	; 0x01
    6018:	fa 81       	ldd	r31, Y+2	; 0x02
    601a:	01 80       	ldd	r0, Z+1	; 0x01
    601c:	f2 81       	ldd	r31, Z+2	; 0x02
    601e:	e0 2d       	mov	r30, r0
    6020:	86 81       	ldd	r24, Z+6	; 0x06
    6022:	97 81       	ldd	r25, Z+7	; 0x07
    6024:	90 93 48 04 	sts	0x0448, r25
    6028:	80 93 47 04 	sts	0x0447, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    602c:	0f 90       	pop	r0
    602e:	0f 90       	pop	r0
    6030:	cf 91       	pop	r28
    6032:	df 91       	pop	r29
    6034:	08 95       	ret

00006036 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    6036:	df 93       	push	r29
    6038:	cf 93       	push	r28
    603a:	00 d0       	rcall	.+0      	; 0x603c <vTaskPlaceOnEventList+0x6>
    603c:	00 d0       	rcall	.+0      	; 0x603e <vTaskPlaceOnEventList+0x8>
    603e:	00 d0       	rcall	.+0      	; 0x6040 <vTaskPlaceOnEventList+0xa>
    6040:	cd b7       	in	r28, 0x3d	; 61
    6042:	de b7       	in	r29, 0x3e	; 62
    6044:	9c 83       	std	Y+4, r25	; 0x04
    6046:	8b 83       	std	Y+3, r24	; 0x03
    6048:	7e 83       	std	Y+6, r23	; 0x06
    604a:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    604c:	4b 81       	ldd	r20, Y+3	; 0x03
    604e:	5c 81       	ldd	r21, Y+4	; 0x04
    6050:	80 91 47 04 	lds	r24, 0x0447
    6054:	90 91 48 04 	lds	r25, 0x0448
    6058:	9c 01       	movw	r18, r24
    605a:	24 5f       	subi	r18, 0xF4	; 244
    605c:	3f 4f       	sbci	r19, 0xFF	; 255
    605e:	ca 01       	movw	r24, r20
    6060:	b9 01       	movw	r22, r18
    6062:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6066:	80 91 47 04 	lds	r24, 0x0447
    606a:	90 91 48 04 	lds	r25, 0x0448
    606e:	02 96       	adiw	r24, 0x02	; 2
    6070:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    6074:	20 91 4b 04 	lds	r18, 0x044B
    6078:	30 91 4c 04 	lds	r19, 0x044C
    607c:	8d 81       	ldd	r24, Y+5	; 0x05
    607e:	9e 81       	ldd	r25, Y+6	; 0x06
    6080:	82 0f       	add	r24, r18
    6082:	93 1f       	adc	r25, r19
    6084:	9a 83       	std	Y+2, r25	; 0x02
    6086:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    6088:	89 81       	ldd	r24, Y+1	; 0x01
    608a:	9a 81       	ldd	r25, Y+2	; 0x02
    608c:	0e 94 15 32 	call	0x642a	; 0x642a <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    6090:	26 96       	adiw	r28, 0x06	; 6
    6092:	0f b6       	in	r0, 0x3f	; 63
    6094:	f8 94       	cli
    6096:	de bf       	out	0x3e, r29	; 62
    6098:	0f be       	out	0x3f, r0	; 63
    609a:	cd bf       	out	0x3d, r28	; 61
    609c:	cf 91       	pop	r28
    609e:	df 91       	pop	r29
    60a0:	08 95       	ret

000060a2 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    60a2:	df 93       	push	r29
    60a4:	cf 93       	push	r28
    60a6:	00 d0       	rcall	.+0      	; 0x60a8 <xTaskRemoveFromEventList+0x6>
    60a8:	00 d0       	rcall	.+0      	; 0x60aa <xTaskRemoveFromEventList+0x8>
    60aa:	0f 92       	push	r0
    60ac:	cd b7       	in	r28, 0x3d	; 61
    60ae:	de b7       	in	r29, 0x3e	; 62
    60b0:	9d 83       	std	Y+5, r25	; 0x05
    60b2:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    60b4:	ec 81       	ldd	r30, Y+4	; 0x04
    60b6:	fd 81       	ldd	r31, Y+5	; 0x05
    60b8:	05 80       	ldd	r0, Z+5	; 0x05
    60ba:	f6 81       	ldd	r31, Z+6	; 0x06
    60bc:	e0 2d       	mov	r30, r0
    60be:	86 81       	ldd	r24, Z+6	; 0x06
    60c0:	97 81       	ldd	r25, Z+7	; 0x07
    60c2:	9b 83       	std	Y+3, r25	; 0x03
    60c4:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    60c6:	8a 81       	ldd	r24, Y+2	; 0x02
    60c8:	9b 81       	ldd	r25, Y+3	; 0x03
    60ca:	0c 96       	adiw	r24, 0x0c	; 12
    60cc:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    60d0:	80 91 50 04 	lds	r24, 0x0450
    60d4:	88 23       	and	r24, r24
    60d6:	61 f5       	brne	.+88     	; 0x6130 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    60d8:	8a 81       	ldd	r24, Y+2	; 0x02
    60da:	9b 81       	ldd	r25, Y+3	; 0x03
    60dc:	02 96       	adiw	r24, 0x02	; 2
    60de:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    60e2:	ea 81       	ldd	r30, Y+2	; 0x02
    60e4:	fb 81       	ldd	r31, Y+3	; 0x03
    60e6:	96 89       	ldd	r25, Z+22	; 0x16
    60e8:	80 91 4e 04 	lds	r24, 0x044E
    60ec:	89 17       	cp	r24, r25
    60ee:	28 f4       	brcc	.+10     	; 0x60fa <xTaskRemoveFromEventList+0x58>
    60f0:	ea 81       	ldd	r30, Y+2	; 0x02
    60f2:	fb 81       	ldd	r31, Y+3	; 0x03
    60f4:	86 89       	ldd	r24, Z+22	; 0x16
    60f6:	80 93 4e 04 	sts	0x044E, r24
    60fa:	ea 81       	ldd	r30, Y+2	; 0x02
    60fc:	fb 81       	ldd	r31, Y+3	; 0x03
    60fe:	86 89       	ldd	r24, Z+22	; 0x16
    6100:	28 2f       	mov	r18, r24
    6102:	30 e0       	ldi	r19, 0x00	; 0
    6104:	c9 01       	movw	r24, r18
    6106:	88 0f       	add	r24, r24
    6108:	99 1f       	adc	r25, r25
    610a:	88 0f       	add	r24, r24
    610c:	99 1f       	adc	r25, r25
    610e:	88 0f       	add	r24, r24
    6110:	99 1f       	adc	r25, r25
    6112:	82 0f       	add	r24, r18
    6114:	93 1f       	adc	r25, r19
    6116:	ac 01       	movw	r20, r24
    6118:	4b 5a       	subi	r20, 0xAB	; 171
    611a:	5b 4f       	sbci	r21, 0xFB	; 251
    611c:	8a 81       	ldd	r24, Y+2	; 0x02
    611e:	9b 81       	ldd	r25, Y+3	; 0x03
    6120:	9c 01       	movw	r18, r24
    6122:	2e 5f       	subi	r18, 0xFE	; 254
    6124:	3f 4f       	sbci	r19, 0xFF	; 255
    6126:	ca 01       	movw	r24, r20
    6128:	b9 01       	movw	r22, r18
    612a:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>
    612e:	0a c0       	rjmp	.+20     	; 0x6144 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    6130:	8a 81       	ldd	r24, Y+2	; 0x02
    6132:	9b 81       	ldd	r25, Y+3	; 0x03
    6134:	9c 01       	movw	r18, r24
    6136:	24 5f       	subi	r18, 0xF4	; 244
    6138:	3f 4f       	sbci	r19, 0xFF	; 255
    613a:	88 e9       	ldi	r24, 0x98	; 152
    613c:	94 e0       	ldi	r25, 0x04	; 4
    613e:	b9 01       	movw	r22, r18
    6140:	0e 94 85 23 	call	0x470a	; 0x470a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    6144:	ea 81       	ldd	r30, Y+2	; 0x02
    6146:	fb 81       	ldd	r31, Y+3	; 0x03
    6148:	96 89       	ldd	r25, Z+22	; 0x16
    614a:	e0 91 47 04 	lds	r30, 0x0447
    614e:	f0 91 48 04 	lds	r31, 0x0448
    6152:	86 89       	ldd	r24, Z+22	; 0x16
    6154:	98 17       	cp	r25, r24
    6156:	18 f0       	brcs	.+6      	; 0x615e <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    6158:	81 e0       	ldi	r24, 0x01	; 1
    615a:	89 83       	std	Y+1, r24	; 0x01
    615c:	01 c0       	rjmp	.+2      	; 0x6160 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    615e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    6160:	89 81       	ldd	r24, Y+1	; 0x01
}
    6162:	0f 90       	pop	r0
    6164:	0f 90       	pop	r0
    6166:	0f 90       	pop	r0
    6168:	0f 90       	pop	r0
    616a:	0f 90       	pop	r0
    616c:	cf 91       	pop	r28
    616e:	df 91       	pop	r29
    6170:	08 95       	ret

00006172 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    6172:	df 93       	push	r29
    6174:	cf 93       	push	r28
    6176:	00 d0       	rcall	.+0      	; 0x6178 <vTaskSetTimeOutState+0x6>
    6178:	cd b7       	in	r28, 0x3d	; 61
    617a:	de b7       	in	r29, 0x3e	; 62
    617c:	9a 83       	std	Y+2, r25	; 0x02
    617e:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    6180:	80 91 53 04 	lds	r24, 0x0453
    6184:	e9 81       	ldd	r30, Y+1	; 0x01
    6186:	fa 81       	ldd	r31, Y+2	; 0x02
    6188:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    618a:	80 91 4b 04 	lds	r24, 0x044B
    618e:	90 91 4c 04 	lds	r25, 0x044C
    6192:	e9 81       	ldd	r30, Y+1	; 0x01
    6194:	fa 81       	ldd	r31, Y+2	; 0x02
    6196:	92 83       	std	Z+2, r25	; 0x02
    6198:	81 83       	std	Z+1, r24	; 0x01
}
    619a:	0f 90       	pop	r0
    619c:	0f 90       	pop	r0
    619e:	cf 91       	pop	r28
    61a0:	df 91       	pop	r29
    61a2:	08 95       	ret

000061a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    61a4:	df 93       	push	r29
    61a6:	cf 93       	push	r28
    61a8:	00 d0       	rcall	.+0      	; 0x61aa <xTaskCheckForTimeOut+0x6>
    61aa:	00 d0       	rcall	.+0      	; 0x61ac <xTaskCheckForTimeOut+0x8>
    61ac:	0f 92       	push	r0
    61ae:	cd b7       	in	r28, 0x3d	; 61
    61b0:	de b7       	in	r29, 0x3e	; 62
    61b2:	9b 83       	std	Y+3, r25	; 0x03
    61b4:	8a 83       	std	Y+2, r24	; 0x02
    61b6:	7d 83       	std	Y+5, r23	; 0x05
    61b8:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    61ba:	0f b6       	in	r0, 0x3f	; 63
    61bc:	f8 94       	cli
    61be:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    61c0:	ea 81       	ldd	r30, Y+2	; 0x02
    61c2:	fb 81       	ldd	r31, Y+3	; 0x03
    61c4:	90 81       	ld	r25, Z
    61c6:	80 91 53 04 	lds	r24, 0x0453
    61ca:	98 17       	cp	r25, r24
    61cc:	71 f0       	breq	.+28     	; 0x61ea <xTaskCheckForTimeOut+0x46>
    61ce:	ea 81       	ldd	r30, Y+2	; 0x02
    61d0:	fb 81       	ldd	r31, Y+3	; 0x03
    61d2:	21 81       	ldd	r18, Z+1	; 0x01
    61d4:	32 81       	ldd	r19, Z+2	; 0x02
    61d6:	80 91 4b 04 	lds	r24, 0x044B
    61da:	90 91 4c 04 	lds	r25, 0x044C
    61de:	82 17       	cp	r24, r18
    61e0:	93 07       	cpc	r25, r19
    61e2:	18 f0       	brcs	.+6      	; 0x61ea <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	89 83       	std	Y+1, r24	; 0x01
    61e8:	2f c0       	rjmp	.+94     	; 0x6248 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    61ea:	20 91 4b 04 	lds	r18, 0x044B
    61ee:	30 91 4c 04 	lds	r19, 0x044C
    61f2:	ea 81       	ldd	r30, Y+2	; 0x02
    61f4:	fb 81       	ldd	r31, Y+3	; 0x03
    61f6:	81 81       	ldd	r24, Z+1	; 0x01
    61f8:	92 81       	ldd	r25, Z+2	; 0x02
    61fa:	28 1b       	sub	r18, r24
    61fc:	39 0b       	sbc	r19, r25
    61fe:	ec 81       	ldd	r30, Y+4	; 0x04
    6200:	fd 81       	ldd	r31, Y+5	; 0x05
    6202:	80 81       	ld	r24, Z
    6204:	91 81       	ldd	r25, Z+1	; 0x01
    6206:	28 17       	cp	r18, r24
    6208:	39 07       	cpc	r19, r25
    620a:	e0 f4       	brcc	.+56     	; 0x6244 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    620c:	ec 81       	ldd	r30, Y+4	; 0x04
    620e:	fd 81       	ldd	r31, Y+5	; 0x05
    6210:	40 81       	ld	r20, Z
    6212:	51 81       	ldd	r21, Z+1	; 0x01
    6214:	ea 81       	ldd	r30, Y+2	; 0x02
    6216:	fb 81       	ldd	r31, Y+3	; 0x03
    6218:	21 81       	ldd	r18, Z+1	; 0x01
    621a:	32 81       	ldd	r19, Z+2	; 0x02
    621c:	80 91 4b 04 	lds	r24, 0x044B
    6220:	90 91 4c 04 	lds	r25, 0x044C
    6224:	b9 01       	movw	r22, r18
    6226:	68 1b       	sub	r22, r24
    6228:	79 0b       	sbc	r23, r25
    622a:	cb 01       	movw	r24, r22
    622c:	84 0f       	add	r24, r20
    622e:	95 1f       	adc	r25, r21
    6230:	ec 81       	ldd	r30, Y+4	; 0x04
    6232:	fd 81       	ldd	r31, Y+5	; 0x05
    6234:	91 83       	std	Z+1, r25	; 0x01
    6236:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    6238:	8a 81       	ldd	r24, Y+2	; 0x02
    623a:	9b 81       	ldd	r25, Y+3	; 0x03
    623c:	0e 94 b9 30 	call	0x6172	; 0x6172 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    6240:	19 82       	std	Y+1, r1	; 0x01
    6242:	02 c0       	rjmp	.+4      	; 0x6248 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    6248:	0f 90       	pop	r0
    624a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    624c:	89 81       	ldd	r24, Y+1	; 0x01
}
    624e:	0f 90       	pop	r0
    6250:	0f 90       	pop	r0
    6252:	0f 90       	pop	r0
    6254:	0f 90       	pop	r0
    6256:	0f 90       	pop	r0
    6258:	cf 91       	pop	r28
    625a:	df 91       	pop	r29
    625c:	08 95       	ret

0000625e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    625e:	df 93       	push	r29
    6260:	cf 93       	push	r28
    6262:	cd b7       	in	r28, 0x3d	; 61
    6264:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    6266:	81 e0       	ldi	r24, 0x01	; 1
    6268:	80 93 52 04 	sts	0x0452, r24
}
    626c:	cf 91       	pop	r28
    626e:	df 91       	pop	r29
    6270:	08 95       	ret

00006272 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    6272:	df 93       	push	r29
    6274:	cf 93       	push	r28
    6276:	00 d0       	rcall	.+0      	; 0x6278 <prvIdleTask+0x6>
    6278:	cd b7       	in	r28, 0x3d	; 61
    627a:	de b7       	in	r29, 0x3e	; 62
    627c:	9a 83       	std	Y+2, r25	; 0x02
    627e:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    6280:	0e 94 d7 31 	call	0x63ae	; 0x63ae <prvCheckTasksWaitingTermination>
    6284:	fd cf       	rjmp	.-6      	; 0x6280 <prvIdleTask+0xe>

00006286 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    6286:	0f 93       	push	r16
    6288:	1f 93       	push	r17
    628a:	df 93       	push	r29
    628c:	cf 93       	push	r28
    628e:	cd b7       	in	r28, 0x3d	; 61
    6290:	de b7       	in	r29, 0x3e	; 62
    6292:	29 97       	sbiw	r28, 0x09	; 9
    6294:	0f b6       	in	r0, 0x3f	; 63
    6296:	f8 94       	cli
    6298:	de bf       	out	0x3e, r29	; 62
    629a:	0f be       	out	0x3f, r0	; 63
    629c:	cd bf       	out	0x3d, r28	; 61
    629e:	9a 83       	std	Y+2, r25	; 0x02
    62a0:	89 83       	std	Y+1, r24	; 0x01
    62a2:	7c 83       	std	Y+4, r23	; 0x04
    62a4:	6b 83       	std	Y+3, r22	; 0x03
    62a6:	4d 83       	std	Y+5, r20	; 0x05
    62a8:	3f 83       	std	Y+7, r19	; 0x07
    62aa:	2e 83       	std	Y+6, r18	; 0x06
    62ac:	19 87       	std	Y+9, r17	; 0x09
    62ae:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    62b0:	89 81       	ldd	r24, Y+1	; 0x01
    62b2:	9a 81       	ldd	r25, Y+2	; 0x02
    62b4:	49 96       	adiw	r24, 0x19	; 25
    62b6:	2b 81       	ldd	r18, Y+3	; 0x03
    62b8:	3c 81       	ldd	r19, Y+4	; 0x04
    62ba:	b9 01       	movw	r22, r18
    62bc:	48 e0       	ldi	r20, 0x08	; 8
    62be:	50 e0       	ldi	r21, 0x00	; 0
    62c0:	0e 94 99 38 	call	0x7132	; 0x7132 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    62c4:	e9 81       	ldd	r30, Y+1	; 0x01
    62c6:	fa 81       	ldd	r31, Y+2	; 0x02
    62c8:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    62ca:	8d 81       	ldd	r24, Y+5	; 0x05
    62cc:	85 30       	cpi	r24, 0x05	; 5
    62ce:	10 f0       	brcs	.+4      	; 0x62d4 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    62d0:	84 e0       	ldi	r24, 0x04	; 4
    62d2:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    62d4:	e9 81       	ldd	r30, Y+1	; 0x01
    62d6:	fa 81       	ldd	r31, Y+2	; 0x02
    62d8:	8d 81       	ldd	r24, Y+5	; 0x05
    62da:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    62dc:	89 81       	ldd	r24, Y+1	; 0x01
    62de:	9a 81       	ldd	r25, Y+2	; 0x02
    62e0:	02 96       	adiw	r24, 0x02	; 2
    62e2:	0e 94 75 23 	call	0x46ea	; 0x46ea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    62e6:	89 81       	ldd	r24, Y+1	; 0x01
    62e8:	9a 81       	ldd	r25, Y+2	; 0x02
    62ea:	0c 96       	adiw	r24, 0x0c	; 12
    62ec:	0e 94 75 23 	call	0x46ea	; 0x46ea <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    62f0:	e9 81       	ldd	r30, Y+1	; 0x01
    62f2:	fa 81       	ldd	r31, Y+2	; 0x02
    62f4:	89 81       	ldd	r24, Y+1	; 0x01
    62f6:	9a 81       	ldd	r25, Y+2	; 0x02
    62f8:	91 87       	std	Z+9, r25	; 0x09
    62fa:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    62fc:	8d 81       	ldd	r24, Y+5	; 0x05
    62fe:	28 2f       	mov	r18, r24
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	85 e0       	ldi	r24, 0x05	; 5
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	82 1b       	sub	r24, r18
    6308:	93 0b       	sbc	r25, r19
    630a:	e9 81       	ldd	r30, Y+1	; 0x01
    630c:	fa 81       	ldd	r31, Y+2	; 0x02
    630e:	95 87       	std	Z+13, r25	; 0x0d
    6310:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    6312:	e9 81       	ldd	r30, Y+1	; 0x01
    6314:	fa 81       	ldd	r31, Y+2	; 0x02
    6316:	89 81       	ldd	r24, Y+1	; 0x01
    6318:	9a 81       	ldd	r25, Y+2	; 0x02
    631a:	93 8b       	std	Z+19, r25	; 0x13
    631c:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    631e:	29 96       	adiw	r28, 0x09	; 9
    6320:	0f b6       	in	r0, 0x3f	; 63
    6322:	f8 94       	cli
    6324:	de bf       	out	0x3e, r29	; 62
    6326:	0f be       	out	0x3f, r0	; 63
    6328:	cd bf       	out	0x3d, r28	; 61
    632a:	cf 91       	pop	r28
    632c:	df 91       	pop	r29
    632e:	1f 91       	pop	r17
    6330:	0f 91       	pop	r16
    6332:	08 95       	ret

00006334 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    6334:	df 93       	push	r29
    6336:	cf 93       	push	r28
    6338:	0f 92       	push	r0
    633a:	cd b7       	in	r28, 0x3d	; 61
    633c:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    633e:	19 82       	std	Y+1, r1	; 0x01
    6340:	13 c0       	rjmp	.+38     	; 0x6368 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    6342:	89 81       	ldd	r24, Y+1	; 0x01
    6344:	28 2f       	mov	r18, r24
    6346:	30 e0       	ldi	r19, 0x00	; 0
    6348:	c9 01       	movw	r24, r18
    634a:	88 0f       	add	r24, r24
    634c:	99 1f       	adc	r25, r25
    634e:	88 0f       	add	r24, r24
    6350:	99 1f       	adc	r25, r25
    6352:	88 0f       	add	r24, r24
    6354:	99 1f       	adc	r25, r25
    6356:	82 0f       	add	r24, r18
    6358:	93 1f       	adc	r25, r19
    635a:	8b 5a       	subi	r24, 0xAB	; 171
    635c:	9b 4f       	sbci	r25, 0xFB	; 251
    635e:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    6362:	89 81       	ldd	r24, Y+1	; 0x01
    6364:	8f 5f       	subi	r24, 0xFF	; 255
    6366:	89 83       	std	Y+1, r24	; 0x01
    6368:	89 81       	ldd	r24, Y+1	; 0x01
    636a:	85 30       	cpi	r24, 0x05	; 5
    636c:	50 f3       	brcs	.-44     	; 0x6342 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    636e:	82 e8       	ldi	r24, 0x82	; 130
    6370:	94 e0       	ldi	r25, 0x04	; 4
    6372:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    6376:	8b e8       	ldi	r24, 0x8B	; 139
    6378:	94 e0       	ldi	r25, 0x04	; 4
    637a:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    637e:	88 e9       	ldi	r24, 0x98	; 152
    6380:	94 e0       	ldi	r25, 0x04	; 4
    6382:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    6386:	81 ea       	ldi	r24, 0xA1	; 161
    6388:	94 e0       	ldi	r25, 0x04	; 4
    638a:	0e 94 4b 23 	call	0x4696	; 0x4696 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    638e:	82 e8       	ldi	r24, 0x82	; 130
    6390:	94 e0       	ldi	r25, 0x04	; 4
    6392:	90 93 95 04 	sts	0x0495, r25
    6396:	80 93 94 04 	sts	0x0494, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    639a:	8b e8       	ldi	r24, 0x8B	; 139
    639c:	94 e0       	ldi	r25, 0x04	; 4
    639e:	90 93 97 04 	sts	0x0497, r25
    63a2:	80 93 96 04 	sts	0x0496, r24
}
    63a6:	0f 90       	pop	r0
    63a8:	cf 91       	pop	r28
    63aa:	df 91       	pop	r29
    63ac:	08 95       	ret

000063ae <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    63ae:	df 93       	push	r29
    63b0:	cf 93       	push	r28
    63b2:	00 d0       	rcall	.+0      	; 0x63b4 <prvCheckTasksWaitingTermination+0x6>
    63b4:	0f 92       	push	r0
    63b6:	cd b7       	in	r28, 0x3d	; 61
    63b8:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    63ba:	80 91 49 04 	lds	r24, 0x0449
    63be:	88 23       	and	r24, r24
    63c0:	71 f1       	breq	.+92     	; 0x641e <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    63c2:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    63c6:	80 91 a1 04 	lds	r24, 0x04A1
    63ca:	1b 82       	std	Y+3, r1	; 0x03
    63cc:	88 23       	and	r24, r24
    63ce:	11 f4       	brne	.+4      	; 0x63d4 <prvCheckTasksWaitingTermination+0x26>
    63d0:	81 e0       	ldi	r24, 0x01	; 1
    63d2:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    63d4:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    63d8:	8b 81       	ldd	r24, Y+3	; 0x03
    63da:	88 23       	and	r24, r24
    63dc:	01 f5       	brne	.+64     	; 0x641e <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    63de:	0f b6       	in	r0, 0x3f	; 63
    63e0:	f8 94       	cli
    63e2:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    63e4:	e0 91 a6 04 	lds	r30, 0x04A6
    63e8:	f0 91 a7 04 	lds	r31, 0x04A7
    63ec:	86 81       	ldd	r24, Z+6	; 0x06
    63ee:	97 81       	ldd	r25, Z+7	; 0x07
    63f0:	9a 83       	std	Y+2, r25	; 0x02
    63f2:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    63f4:	89 81       	ldd	r24, Y+1	; 0x01
    63f6:	9a 81       	ldd	r25, Y+2	; 0x02
    63f8:	02 96       	adiw	r24, 0x02	; 2
    63fa:	0e 94 3d 24 	call	0x487a	; 0x487a <vListRemove>
					--uxCurrentNumberOfTasks;
    63fe:	80 91 4a 04 	lds	r24, 0x044A
    6402:	81 50       	subi	r24, 0x01	; 1
    6404:	80 93 4a 04 	sts	0x044A, r24
					--uxTasksDeleted;
    6408:	80 91 49 04 	lds	r24, 0x0449
    640c:	81 50       	subi	r24, 0x01	; 1
    640e:	80 93 49 04 	sts	0x0449, r24
				}
				taskEXIT_CRITICAL();
    6412:	0f 90       	pop	r0
    6414:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    6416:	89 81       	ldd	r24, Y+1	; 0x01
    6418:	9a 81       	ldd	r25, Y+2	; 0x02
    641a:	0e 94 ae 32 	call	0x655c	; 0x655c <prvDeleteTCB>
			}
		}
	}
	#endif
}
    641e:	0f 90       	pop	r0
    6420:	0f 90       	pop	r0
    6422:	0f 90       	pop	r0
    6424:	cf 91       	pop	r28
    6426:	df 91       	pop	r29
    6428:	08 95       	ret

0000642a <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    642a:	df 93       	push	r29
    642c:	cf 93       	push	r28
    642e:	00 d0       	rcall	.+0      	; 0x6430 <prvAddCurrentTaskToDelayedList+0x6>
    6430:	cd b7       	in	r28, 0x3d	; 61
    6432:	de b7       	in	r29, 0x3e	; 62
    6434:	9a 83       	std	Y+2, r25	; 0x02
    6436:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    6438:	e0 91 47 04 	lds	r30, 0x0447
    643c:	f0 91 48 04 	lds	r31, 0x0448
    6440:	89 81       	ldd	r24, Y+1	; 0x01
    6442:	9a 81       	ldd	r25, Y+2	; 0x02
    6444:	93 83       	std	Z+3, r25	; 0x03
    6446:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    6448:	20 91 4b 04 	lds	r18, 0x044B
    644c:	30 91 4c 04 	lds	r19, 0x044C
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	9a 81       	ldd	r25, Y+2	; 0x02
    6454:	82 17       	cp	r24, r18
    6456:	93 07       	cpc	r25, r19
    6458:	70 f4       	brcc	.+28     	; 0x6476 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    645a:	80 91 96 04 	lds	r24, 0x0496
    645e:	90 91 97 04 	lds	r25, 0x0497
    6462:	20 91 47 04 	lds	r18, 0x0447
    6466:	30 91 48 04 	lds	r19, 0x0448
    646a:	2e 5f       	subi	r18, 0xFE	; 254
    646c:	3f 4f       	sbci	r19, 0xFF	; 255
    646e:	b9 01       	movw	r22, r18
    6470:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>
    6474:	1e c0       	rjmp	.+60     	; 0x64b2 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6476:	40 91 94 04 	lds	r20, 0x0494
    647a:	50 91 95 04 	lds	r21, 0x0495
    647e:	80 91 47 04 	lds	r24, 0x0447
    6482:	90 91 48 04 	lds	r25, 0x0448
    6486:	9c 01       	movw	r18, r24
    6488:	2e 5f       	subi	r18, 0xFE	; 254
    648a:	3f 4f       	sbci	r19, 0xFF	; 255
    648c:	ca 01       	movw	r24, r20
    648e:	b9 01       	movw	r22, r18
    6490:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    6494:	20 91 6e 01 	lds	r18, 0x016E
    6498:	30 91 6f 01 	lds	r19, 0x016F
    649c:	89 81       	ldd	r24, Y+1	; 0x01
    649e:	9a 81       	ldd	r25, Y+2	; 0x02
    64a0:	82 17       	cp	r24, r18
    64a2:	93 07       	cpc	r25, r19
    64a4:	30 f4       	brcc	.+12     	; 0x64b2 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    64a6:	89 81       	ldd	r24, Y+1	; 0x01
    64a8:	9a 81       	ldd	r25, Y+2	; 0x02
    64aa:	90 93 6f 01 	sts	0x016F, r25
    64ae:	80 93 6e 01 	sts	0x016E, r24
		}
	}
}
    64b2:	0f 90       	pop	r0
    64b4:	0f 90       	pop	r0
    64b6:	cf 91       	pop	r28
    64b8:	df 91       	pop	r29
    64ba:	08 95       	ret

000064bc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    64bc:	df 93       	push	r29
    64be:	cf 93       	push	r28
    64c0:	cd b7       	in	r28, 0x3d	; 61
    64c2:	de b7       	in	r29, 0x3e	; 62
    64c4:	28 97       	sbiw	r28, 0x08	; 8
    64c6:	0f b6       	in	r0, 0x3f	; 63
    64c8:	f8 94       	cli
    64ca:	de bf       	out	0x3e, r29	; 62
    64cc:	0f be       	out	0x3f, r0	; 63
    64ce:	cd bf       	out	0x3d, r28	; 61
    64d0:	9c 83       	std	Y+4, r25	; 0x04
    64d2:	8b 83       	std	Y+3, r24	; 0x03
    64d4:	7e 83       	std	Y+6, r23	; 0x06
    64d6:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    64d8:	81 e2       	ldi	r24, 0x21	; 33
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	0e 94 df 22 	call	0x45be	; 0x45be <pvPortMalloc>
    64e0:	9a 83       	std	Y+2, r25	; 0x02
    64e2:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    64e4:	89 81       	ldd	r24, Y+1	; 0x01
    64e6:	9a 81       	ldd	r25, Y+2	; 0x02
    64e8:	00 97       	sbiw	r24, 0x00	; 0
    64ea:	69 f1       	breq	.+90     	; 0x6546 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    64ec:	8d 81       	ldd	r24, Y+5	; 0x05
    64ee:	9e 81       	ldd	r25, Y+6	; 0x06
    64f0:	00 97       	sbiw	r24, 0x00	; 0
    64f2:	39 f4       	brne	.+14     	; 0x6502 <prvAllocateTCBAndStack+0x46>
    64f4:	8b 81       	ldd	r24, Y+3	; 0x03
    64f6:	9c 81       	ldd	r25, Y+4	; 0x04
    64f8:	0e 94 df 22 	call	0x45be	; 0x45be <pvPortMalloc>
    64fc:	98 87       	std	Y+8, r25	; 0x08
    64fe:	8f 83       	std	Y+7, r24	; 0x07
    6500:	04 c0       	rjmp	.+8      	; 0x650a <prvAllocateTCBAndStack+0x4e>
    6502:	8d 81       	ldd	r24, Y+5	; 0x05
    6504:	9e 81       	ldd	r25, Y+6	; 0x06
    6506:	98 87       	std	Y+8, r25	; 0x08
    6508:	8f 83       	std	Y+7, r24	; 0x07
    650a:	e9 81       	ldd	r30, Y+1	; 0x01
    650c:	fa 81       	ldd	r31, Y+2	; 0x02
    650e:	8f 81       	ldd	r24, Y+7	; 0x07
    6510:	98 85       	ldd	r25, Y+8	; 0x08
    6512:	90 8f       	std	Z+24, r25	; 0x18
    6514:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    6516:	e9 81       	ldd	r30, Y+1	; 0x01
    6518:	fa 81       	ldd	r31, Y+2	; 0x02
    651a:	87 89       	ldd	r24, Z+23	; 0x17
    651c:	90 8d       	ldd	r25, Z+24	; 0x18
    651e:	00 97       	sbiw	r24, 0x00	; 0
    6520:	39 f4       	brne	.+14     	; 0x6530 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    6522:	89 81       	ldd	r24, Y+1	; 0x01
    6524:	9a 81       	ldd	r25, Y+2	; 0x02
    6526:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
			pxNewTCB = NULL;
    652a:	1a 82       	std	Y+2, r1	; 0x02
    652c:	19 82       	std	Y+1, r1	; 0x01
    652e:	0b c0       	rjmp	.+22     	; 0x6546 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    6530:	e9 81       	ldd	r30, Y+1	; 0x01
    6532:	fa 81       	ldd	r31, Y+2	; 0x02
    6534:	87 89       	ldd	r24, Z+23	; 0x17
    6536:	90 8d       	ldd	r25, Z+24	; 0x18
    6538:	2b 81       	ldd	r18, Y+3	; 0x03
    653a:	3c 81       	ldd	r19, Y+4	; 0x04
    653c:	65 ea       	ldi	r22, 0xA5	; 165
    653e:	70 e0       	ldi	r23, 0x00	; 0
    6540:	a9 01       	movw	r20, r18
    6542:	0e 94 92 38 	call	0x7124	; 0x7124 <memset>
		}
	}

	return pxNewTCB;
    6546:	89 81       	ldd	r24, Y+1	; 0x01
    6548:	9a 81       	ldd	r25, Y+2	; 0x02
}
    654a:	28 96       	adiw	r28, 0x08	; 8
    654c:	0f b6       	in	r0, 0x3f	; 63
    654e:	f8 94       	cli
    6550:	de bf       	out	0x3e, r29	; 62
    6552:	0f be       	out	0x3f, r0	; 63
    6554:	cd bf       	out	0x3d, r28	; 61
    6556:	cf 91       	pop	r28
    6558:	df 91       	pop	r29
    655a:	08 95       	ret

0000655c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    655c:	df 93       	push	r29
    655e:	cf 93       	push	r28
    6560:	00 d0       	rcall	.+0      	; 0x6562 <prvDeleteTCB+0x6>
    6562:	cd b7       	in	r28, 0x3d	; 61
    6564:	de b7       	in	r29, 0x3e	; 62
    6566:	9a 83       	std	Y+2, r25	; 0x02
    6568:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    656a:	e9 81       	ldd	r30, Y+1	; 0x01
    656c:	fa 81       	ldd	r31, Y+2	; 0x02
    656e:	87 89       	ldd	r24, Z+23	; 0x17
    6570:	90 8d       	ldd	r25, Z+24	; 0x18
    6572:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
		vPortFree( pxTCB );
    6576:	89 81       	ldd	r24, Y+1	; 0x01
    6578:	9a 81       	ldd	r25, Y+2	; 0x02
    657a:	0e 94 25 23 	call	0x464a	; 0x464a <vPortFree>
	}
    657e:	0f 90       	pop	r0
    6580:	0f 90       	pop	r0
    6582:	cf 91       	pop	r28
    6584:	df 91       	pop	r29
    6586:	08 95       	ret

00006588 <main>:




int main()
{
    6588:	0f 93       	push	r16
    658a:	1f 93       	push	r17
    658c:	df 93       	push	r29
    658e:	cf 93       	push	r28
    6590:	cd b7       	in	r28, 0x3d	; 61
    6592:	de b7       	in	r29, 0x3e	; 62
    6594:	c2 57       	subi	r28, 0x72	; 114
    6596:	d0 40       	sbci	r29, 0x00	; 0
    6598:	0f b6       	in	r0, 0x3f	; 63
    659a:	f8 94       	cli
    659c:	de bf       	out	0x3e, r29	; 62
    659e:	0f be       	out	0x3f, r0	; 63
    65a0:	cd bf       	out	0x3d, r28	; 61

	DIO_u8SetPinDir(DIO_GroupD,DIO_PIN6,Input);
    65a2:	84 e0       	ldi	r24, 0x04	; 4
    65a4:	66 e0       	ldi	r22, 0x06	; 6
    65a6:	40 e0       	ldi	r20, 0x00	; 0
    65a8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>
	DIO_u8SetPinDir(DIO_GroupC,DIO_PIN7,Output);
    65ac:	83 e0       	ldi	r24, 0x03	; 3
    65ae:	67 e0       	ldi	r22, 0x07	; 7
    65b0:	41 e0       	ldi	r20, 0x01	; 1
    65b2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <DIO_u8SetPinDir>

	DIO_u8SetPortValue(DIO_GroupC,0x00);
    65b6:	83 e0       	ldi	r24, 0x03	; 3
    65b8:	60 e0       	ldi	r22, 0x00	; 0
    65ba:	0e 94 24 11 	call	0x2248	; 0x2248 <DIO_u8SetPortValue>

	DIO_u8SetPortDir(DIO_GroupA,0xff);
    65be:	81 e0       	ldi	r24, 0x01	; 1
    65c0:	6f ef       	ldi	r22, 0xFF	; 255
    65c2:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
	DIO_u8SetPortDir(DIO_GroupB,0xff);
    65c6:	82 e0       	ldi	r24, 0x02	; 2
    65c8:	6f ef       	ldi	r22, 0xFF	; 255
    65ca:	0e 94 d5 10 	call	0x21aa	; 0x21aa <DIO_u8SetPortDir>
	//DIO_u8SetPinValue(DIO_GroupB,DIO_PIN7,High);

	//DIO_u8SetPortValue(DIO_GroupA,0xff);
	//DIO_u8SetPortValue(DIO_GroupB,0xff);

	s16 i=0;
    65ce:	fe 01       	movw	r30, r28
    65d0:	ef 58       	subi	r30, 0x8F	; 143
    65d2:	ff 4f       	sbci	r31, 0xFF	; 255
    65d4:	11 82       	std	Z+1, r1	; 0x01
    65d6:	10 82       	st	Z, r1

	while(1)

	{
		for(i=7; i>=0; i-- )
    65d8:	fe 01       	movw	r30, r28
    65da:	ef 58       	subi	r30, 0x8F	; 143
    65dc:	ff 4f       	sbci	r31, 0xFF	; 255
    65de:	87 e0       	ldi	r24, 0x07	; 7
    65e0:	90 e0       	ldi	r25, 0x00	; 0
    65e2:	91 83       	std	Z+1, r25	; 0x01
    65e4:	80 83       	st	Z, r24
    65e6:	84 c1       	rjmp	.+776    	; 0x68f0 <main+0x368>
		{
			DIO_u8SetPinValue(DIO_GroupB,i,High);
    65e8:	fe 01       	movw	r30, r28
    65ea:	ef 58       	subi	r30, 0x8F	; 143
    65ec:	ff 4f       	sbci	r31, 0xFF	; 255
    65ee:	90 81       	ld	r25, Z
    65f0:	82 e0       	ldi	r24, 0x02	; 2
    65f2:	69 2f       	mov	r22, r25
    65f4:	41 e0       	ldi	r20, 0x01	; 1
    65f6:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    65fa:	fe 01       	movw	r30, r28
    65fc:	e3 59       	subi	r30, 0x93	; 147
    65fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6600:	80 e0       	ldi	r24, 0x00	; 0
    6602:	90 e0       	ldi	r25, 0x00	; 0
    6604:	a0 e2       	ldi	r26, 0x20	; 32
    6606:	b1 e4       	ldi	r27, 0x41	; 65
    6608:	80 83       	st	Z, r24
    660a:	91 83       	std	Z+1, r25	; 0x01
    660c:	a2 83       	std	Z+2, r26	; 0x02
    660e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6610:	8e 01       	movw	r16, r28
    6612:	07 59       	subi	r16, 0x97	; 151
    6614:	1f 4f       	sbci	r17, 0xFF	; 255
    6616:	fe 01       	movw	r30, r28
    6618:	e3 59       	subi	r30, 0x93	; 147
    661a:	ff 4f       	sbci	r31, 0xFF	; 255
    661c:	60 81       	ld	r22, Z
    661e:	71 81       	ldd	r23, Z+1	; 0x01
    6620:	82 81       	ldd	r24, Z+2	; 0x02
    6622:	93 81       	ldd	r25, Z+3	; 0x03
    6624:	20 e0       	ldi	r18, 0x00	; 0
    6626:	30 e0       	ldi	r19, 0x00	; 0
    6628:	4a ef       	ldi	r20, 0xFA	; 250
    662a:	54 e4       	ldi	r21, 0x44	; 68
    662c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6630:	dc 01       	movw	r26, r24
    6632:	cb 01       	movw	r24, r22
    6634:	f8 01       	movw	r30, r16
    6636:	80 83       	st	Z, r24
    6638:	91 83       	std	Z+1, r25	; 0x01
    663a:	a2 83       	std	Z+2, r26	; 0x02
    663c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    663e:	fe 01       	movw	r30, r28
    6640:	e7 59       	subi	r30, 0x97	; 151
    6642:	ff 4f       	sbci	r31, 0xFF	; 255
    6644:	60 81       	ld	r22, Z
    6646:	71 81       	ldd	r23, Z+1	; 0x01
    6648:	82 81       	ldd	r24, Z+2	; 0x02
    664a:	93 81       	ldd	r25, Z+3	; 0x03
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	30 e0       	ldi	r19, 0x00	; 0
    6650:	40 e8       	ldi	r20, 0x80	; 128
    6652:	5f e3       	ldi	r21, 0x3F	; 63
    6654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6658:	88 23       	and	r24, r24
    665a:	44 f4       	brge	.+16     	; 0x666c <main+0xe4>
		__ticks = 1;
    665c:	fe 01       	movw	r30, r28
    665e:	e9 59       	subi	r30, 0x99	; 153
    6660:	ff 4f       	sbci	r31, 0xFF	; 255
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	91 83       	std	Z+1, r25	; 0x01
    6668:	80 83       	st	Z, r24
    666a:	64 c0       	rjmp	.+200    	; 0x6734 <main+0x1ac>
	else if (__tmp > 65535)
    666c:	fe 01       	movw	r30, r28
    666e:	e7 59       	subi	r30, 0x97	; 151
    6670:	ff 4f       	sbci	r31, 0xFF	; 255
    6672:	60 81       	ld	r22, Z
    6674:	71 81       	ldd	r23, Z+1	; 0x01
    6676:	82 81       	ldd	r24, Z+2	; 0x02
    6678:	93 81       	ldd	r25, Z+3	; 0x03
    667a:	20 e0       	ldi	r18, 0x00	; 0
    667c:	3f ef       	ldi	r19, 0xFF	; 255
    667e:	4f e7       	ldi	r20, 0x7F	; 127
    6680:	57 e4       	ldi	r21, 0x47	; 71
    6682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6686:	18 16       	cp	r1, r24
    6688:	0c f0       	brlt	.+2      	; 0x668c <main+0x104>
    668a:	43 c0       	rjmp	.+134    	; 0x6712 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    668c:	fe 01       	movw	r30, r28
    668e:	e3 59       	subi	r30, 0x93	; 147
    6690:	ff 4f       	sbci	r31, 0xFF	; 255
    6692:	60 81       	ld	r22, Z
    6694:	71 81       	ldd	r23, Z+1	; 0x01
    6696:	82 81       	ldd	r24, Z+2	; 0x02
    6698:	93 81       	ldd	r25, Z+3	; 0x03
    669a:	20 e0       	ldi	r18, 0x00	; 0
    669c:	30 e0       	ldi	r19, 0x00	; 0
    669e:	40 e2       	ldi	r20, 0x20	; 32
    66a0:	51 e4       	ldi	r21, 0x41	; 65
    66a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66a6:	dc 01       	movw	r26, r24
    66a8:	cb 01       	movw	r24, r22
    66aa:	8e 01       	movw	r16, r28
    66ac:	09 59       	subi	r16, 0x99	; 153
    66ae:	1f 4f       	sbci	r17, 0xFF	; 255
    66b0:	bc 01       	movw	r22, r24
    66b2:	cd 01       	movw	r24, r26
    66b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66b8:	dc 01       	movw	r26, r24
    66ba:	cb 01       	movw	r24, r22
    66bc:	f8 01       	movw	r30, r16
    66be:	91 83       	std	Z+1, r25	; 0x01
    66c0:	80 83       	st	Z, r24
    66c2:	1f c0       	rjmp	.+62     	; 0x6702 <main+0x17a>
    66c4:	fe 01       	movw	r30, r28
    66c6:	eb 59       	subi	r30, 0x9B	; 155
    66c8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ca:	88 ec       	ldi	r24, 0xC8	; 200
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	91 83       	std	Z+1, r25	; 0x01
    66d0:	80 83       	st	Z, r24
    66d2:	fe 01       	movw	r30, r28
    66d4:	eb 59       	subi	r30, 0x9B	; 155
    66d6:	ff 4f       	sbci	r31, 0xFF	; 255
    66d8:	80 81       	ld	r24, Z
    66da:	91 81       	ldd	r25, Z+1	; 0x01
    66dc:	01 97       	sbiw	r24, 0x01	; 1
    66de:	f1 f7       	brne	.-4      	; 0x66dc <main+0x154>
    66e0:	fe 01       	movw	r30, r28
    66e2:	eb 59       	subi	r30, 0x9B	; 155
    66e4:	ff 4f       	sbci	r31, 0xFF	; 255
    66e6:	91 83       	std	Z+1, r25	; 0x01
    66e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66ea:	de 01       	movw	r26, r28
    66ec:	a9 59       	subi	r26, 0x99	; 153
    66ee:	bf 4f       	sbci	r27, 0xFF	; 255
    66f0:	fe 01       	movw	r30, r28
    66f2:	e9 59       	subi	r30, 0x99	; 153
    66f4:	ff 4f       	sbci	r31, 0xFF	; 255
    66f6:	80 81       	ld	r24, Z
    66f8:	91 81       	ldd	r25, Z+1	; 0x01
    66fa:	01 97       	sbiw	r24, 0x01	; 1
    66fc:	11 96       	adiw	r26, 0x01	; 1
    66fe:	9c 93       	st	X, r25
    6700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6702:	fe 01       	movw	r30, r28
    6704:	e9 59       	subi	r30, 0x99	; 153
    6706:	ff 4f       	sbci	r31, 0xFF	; 255
    6708:	80 81       	ld	r24, Z
    670a:	91 81       	ldd	r25, Z+1	; 0x01
    670c:	00 97       	sbiw	r24, 0x00	; 0
    670e:	d1 f6       	brne	.-76     	; 0x66c4 <main+0x13c>
    6710:	27 c0       	rjmp	.+78     	; 0x6760 <main+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6712:	8e 01       	movw	r16, r28
    6714:	09 59       	subi	r16, 0x99	; 153
    6716:	1f 4f       	sbci	r17, 0xFF	; 255
    6718:	fe 01       	movw	r30, r28
    671a:	e7 59       	subi	r30, 0x97	; 151
    671c:	ff 4f       	sbci	r31, 0xFF	; 255
    671e:	60 81       	ld	r22, Z
    6720:	71 81       	ldd	r23, Z+1	; 0x01
    6722:	82 81       	ldd	r24, Z+2	; 0x02
    6724:	93 81       	ldd	r25, Z+3	; 0x03
    6726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    672a:	dc 01       	movw	r26, r24
    672c:	cb 01       	movw	r24, r22
    672e:	f8 01       	movw	r30, r16
    6730:	91 83       	std	Z+1, r25	; 0x01
    6732:	80 83       	st	Z, r24
    6734:	de 01       	movw	r26, r28
    6736:	ad 59       	subi	r26, 0x9D	; 157
    6738:	bf 4f       	sbci	r27, 0xFF	; 255
    673a:	fe 01       	movw	r30, r28
    673c:	e9 59       	subi	r30, 0x99	; 153
    673e:	ff 4f       	sbci	r31, 0xFF	; 255
    6740:	80 81       	ld	r24, Z
    6742:	91 81       	ldd	r25, Z+1	; 0x01
    6744:	8d 93       	st	X+, r24
    6746:	9c 93       	st	X, r25
    6748:	fe 01       	movw	r30, r28
    674a:	ed 59       	subi	r30, 0x9D	; 157
    674c:	ff 4f       	sbci	r31, 0xFF	; 255
    674e:	80 81       	ld	r24, Z
    6750:	91 81       	ldd	r25, Z+1	; 0x01
    6752:	01 97       	sbiw	r24, 0x01	; 1
    6754:	f1 f7       	brne	.-4      	; 0x6752 <main+0x1ca>
    6756:	fe 01       	movw	r30, r28
    6758:	ed 59       	subi	r30, 0x9D	; 157
    675a:	ff 4f       	sbci	r31, 0xFF	; 255
    675c:	91 83       	std	Z+1, r25	; 0x01
    675e:	80 83       	st	Z, r24
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupB,i,Low);
    6760:	fe 01       	movw	r30, r28
    6762:	ef 58       	subi	r30, 0x8F	; 143
    6764:	ff 4f       	sbci	r31, 0xFF	; 255
    6766:	90 81       	ld	r25, Z
    6768:	82 e0       	ldi	r24, 0x02	; 2
    676a:	69 2f       	mov	r22, r25
    676c:	40 e0       	ldi	r20, 0x00	; 0
    676e:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6772:	fe 01       	movw	r30, r28
    6774:	e1 5a       	subi	r30, 0xA1	; 161
    6776:	ff 4f       	sbci	r31, 0xFF	; 255
    6778:	80 e0       	ldi	r24, 0x00	; 0
    677a:	90 e0       	ldi	r25, 0x00	; 0
    677c:	a0 e2       	ldi	r26, 0x20	; 32
    677e:	b1 e4       	ldi	r27, 0x41	; 65
    6780:	80 83       	st	Z, r24
    6782:	91 83       	std	Z+1, r25	; 0x01
    6784:	a2 83       	std	Z+2, r26	; 0x02
    6786:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6788:	8e 01       	movw	r16, r28
    678a:	05 5a       	subi	r16, 0xA5	; 165
    678c:	1f 4f       	sbci	r17, 0xFF	; 255
    678e:	fe 01       	movw	r30, r28
    6790:	e1 5a       	subi	r30, 0xA1	; 161
    6792:	ff 4f       	sbci	r31, 0xFF	; 255
    6794:	60 81       	ld	r22, Z
    6796:	71 81       	ldd	r23, Z+1	; 0x01
    6798:	82 81       	ldd	r24, Z+2	; 0x02
    679a:	93 81       	ldd	r25, Z+3	; 0x03
    679c:	20 e0       	ldi	r18, 0x00	; 0
    679e:	30 e0       	ldi	r19, 0x00	; 0
    67a0:	4a ef       	ldi	r20, 0xFA	; 250
    67a2:	54 e4       	ldi	r21, 0x44	; 68
    67a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67a8:	dc 01       	movw	r26, r24
    67aa:	cb 01       	movw	r24, r22
    67ac:	f8 01       	movw	r30, r16
    67ae:	80 83       	st	Z, r24
    67b0:	91 83       	std	Z+1, r25	; 0x01
    67b2:	a2 83       	std	Z+2, r26	; 0x02
    67b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67b6:	fe 01       	movw	r30, r28
    67b8:	e5 5a       	subi	r30, 0xA5	; 165
    67ba:	ff 4f       	sbci	r31, 0xFF	; 255
    67bc:	60 81       	ld	r22, Z
    67be:	71 81       	ldd	r23, Z+1	; 0x01
    67c0:	82 81       	ldd	r24, Z+2	; 0x02
    67c2:	93 81       	ldd	r25, Z+3	; 0x03
    67c4:	20 e0       	ldi	r18, 0x00	; 0
    67c6:	30 e0       	ldi	r19, 0x00	; 0
    67c8:	40 e8       	ldi	r20, 0x80	; 128
    67ca:	5f e3       	ldi	r21, 0x3F	; 63
    67cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67d0:	88 23       	and	r24, r24
    67d2:	44 f4       	brge	.+16     	; 0x67e4 <main+0x25c>
		__ticks = 1;
    67d4:	fe 01       	movw	r30, r28
    67d6:	e7 5a       	subi	r30, 0xA7	; 167
    67d8:	ff 4f       	sbci	r31, 0xFF	; 255
    67da:	81 e0       	ldi	r24, 0x01	; 1
    67dc:	90 e0       	ldi	r25, 0x00	; 0
    67de:	91 83       	std	Z+1, r25	; 0x01
    67e0:	80 83       	st	Z, r24
    67e2:	64 c0       	rjmp	.+200    	; 0x68ac <main+0x324>
	else if (__tmp > 65535)
    67e4:	fe 01       	movw	r30, r28
    67e6:	e5 5a       	subi	r30, 0xA5	; 165
    67e8:	ff 4f       	sbci	r31, 0xFF	; 255
    67ea:	60 81       	ld	r22, Z
    67ec:	71 81       	ldd	r23, Z+1	; 0x01
    67ee:	82 81       	ldd	r24, Z+2	; 0x02
    67f0:	93 81       	ldd	r25, Z+3	; 0x03
    67f2:	20 e0       	ldi	r18, 0x00	; 0
    67f4:	3f ef       	ldi	r19, 0xFF	; 255
    67f6:	4f e7       	ldi	r20, 0x7F	; 127
    67f8:	57 e4       	ldi	r21, 0x47	; 71
    67fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    67fe:	18 16       	cp	r1, r24
    6800:	0c f0       	brlt	.+2      	; 0x6804 <main+0x27c>
    6802:	43 c0       	rjmp	.+134    	; 0x688a <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6804:	fe 01       	movw	r30, r28
    6806:	e1 5a       	subi	r30, 0xA1	; 161
    6808:	ff 4f       	sbci	r31, 0xFF	; 255
    680a:	60 81       	ld	r22, Z
    680c:	71 81       	ldd	r23, Z+1	; 0x01
    680e:	82 81       	ldd	r24, Z+2	; 0x02
    6810:	93 81       	ldd	r25, Z+3	; 0x03
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	40 e2       	ldi	r20, 0x20	; 32
    6818:	51 e4       	ldi	r21, 0x41	; 65
    681a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    681e:	dc 01       	movw	r26, r24
    6820:	cb 01       	movw	r24, r22
    6822:	8e 01       	movw	r16, r28
    6824:	07 5a       	subi	r16, 0xA7	; 167
    6826:	1f 4f       	sbci	r17, 0xFF	; 255
    6828:	bc 01       	movw	r22, r24
    682a:	cd 01       	movw	r24, r26
    682c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6830:	dc 01       	movw	r26, r24
    6832:	cb 01       	movw	r24, r22
    6834:	f8 01       	movw	r30, r16
    6836:	91 83       	std	Z+1, r25	; 0x01
    6838:	80 83       	st	Z, r24
    683a:	1f c0       	rjmp	.+62     	; 0x687a <main+0x2f2>
    683c:	fe 01       	movw	r30, r28
    683e:	e9 5a       	subi	r30, 0xA9	; 169
    6840:	ff 4f       	sbci	r31, 0xFF	; 255
    6842:	88 ec       	ldi	r24, 0xC8	; 200
    6844:	90 e0       	ldi	r25, 0x00	; 0
    6846:	91 83       	std	Z+1, r25	; 0x01
    6848:	80 83       	st	Z, r24
    684a:	fe 01       	movw	r30, r28
    684c:	e9 5a       	subi	r30, 0xA9	; 169
    684e:	ff 4f       	sbci	r31, 0xFF	; 255
    6850:	80 81       	ld	r24, Z
    6852:	91 81       	ldd	r25, Z+1	; 0x01
    6854:	01 97       	sbiw	r24, 0x01	; 1
    6856:	f1 f7       	brne	.-4      	; 0x6854 <main+0x2cc>
    6858:	fe 01       	movw	r30, r28
    685a:	e9 5a       	subi	r30, 0xA9	; 169
    685c:	ff 4f       	sbci	r31, 0xFF	; 255
    685e:	91 83       	std	Z+1, r25	; 0x01
    6860:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6862:	de 01       	movw	r26, r28
    6864:	a7 5a       	subi	r26, 0xA7	; 167
    6866:	bf 4f       	sbci	r27, 0xFF	; 255
    6868:	fe 01       	movw	r30, r28
    686a:	e7 5a       	subi	r30, 0xA7	; 167
    686c:	ff 4f       	sbci	r31, 0xFF	; 255
    686e:	80 81       	ld	r24, Z
    6870:	91 81       	ldd	r25, Z+1	; 0x01
    6872:	01 97       	sbiw	r24, 0x01	; 1
    6874:	11 96       	adiw	r26, 0x01	; 1
    6876:	9c 93       	st	X, r25
    6878:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    687a:	fe 01       	movw	r30, r28
    687c:	e7 5a       	subi	r30, 0xA7	; 167
    687e:	ff 4f       	sbci	r31, 0xFF	; 255
    6880:	80 81       	ld	r24, Z
    6882:	91 81       	ldd	r25, Z+1	; 0x01
    6884:	00 97       	sbiw	r24, 0x00	; 0
    6886:	d1 f6       	brne	.-76     	; 0x683c <main+0x2b4>
    6888:	27 c0       	rjmp	.+78     	; 0x68d8 <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    688a:	8e 01       	movw	r16, r28
    688c:	07 5a       	subi	r16, 0xA7	; 167
    688e:	1f 4f       	sbci	r17, 0xFF	; 255
    6890:	fe 01       	movw	r30, r28
    6892:	e5 5a       	subi	r30, 0xA5	; 165
    6894:	ff 4f       	sbci	r31, 0xFF	; 255
    6896:	60 81       	ld	r22, Z
    6898:	71 81       	ldd	r23, Z+1	; 0x01
    689a:	82 81       	ldd	r24, Z+2	; 0x02
    689c:	93 81       	ldd	r25, Z+3	; 0x03
    689e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68a2:	dc 01       	movw	r26, r24
    68a4:	cb 01       	movw	r24, r22
    68a6:	f8 01       	movw	r30, r16
    68a8:	91 83       	std	Z+1, r25	; 0x01
    68aa:	80 83       	st	Z, r24
    68ac:	de 01       	movw	r26, r28
    68ae:	ab 5a       	subi	r26, 0xAB	; 171
    68b0:	bf 4f       	sbci	r27, 0xFF	; 255
    68b2:	fe 01       	movw	r30, r28
    68b4:	e7 5a       	subi	r30, 0xA7	; 167
    68b6:	ff 4f       	sbci	r31, 0xFF	; 255
    68b8:	80 81       	ld	r24, Z
    68ba:	91 81       	ldd	r25, Z+1	; 0x01
    68bc:	8d 93       	st	X+, r24
    68be:	9c 93       	st	X, r25
    68c0:	fe 01       	movw	r30, r28
    68c2:	eb 5a       	subi	r30, 0xAB	; 171
    68c4:	ff 4f       	sbci	r31, 0xFF	; 255
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	01 97       	sbiw	r24, 0x01	; 1
    68cc:	f1 f7       	brne	.-4      	; 0x68ca <main+0x342>
    68ce:	fe 01       	movw	r30, r28
    68d0:	eb 5a       	subi	r30, 0xAB	; 171
    68d2:	ff 4f       	sbci	r31, 0xFF	; 255
    68d4:	91 83       	std	Z+1, r25	; 0x01
    68d6:	80 83       	st	Z, r24
	s16 i=0;

	while(1)

	{
		for(i=7; i>=0; i-- )
    68d8:	de 01       	movw	r26, r28
    68da:	af 58       	subi	r26, 0x8F	; 143
    68dc:	bf 4f       	sbci	r27, 0xFF	; 255
    68de:	fe 01       	movw	r30, r28
    68e0:	ef 58       	subi	r30, 0x8F	; 143
    68e2:	ff 4f       	sbci	r31, 0xFF	; 255
    68e4:	80 81       	ld	r24, Z
    68e6:	91 81       	ldd	r25, Z+1	; 0x01
    68e8:	01 97       	sbiw	r24, 0x01	; 1
    68ea:	11 96       	adiw	r26, 0x01	; 1
    68ec:	9c 93       	st	X, r25
    68ee:	8e 93       	st	-X, r24
    68f0:	fe 01       	movw	r30, r28
    68f2:	ef 58       	subi	r30, 0x8F	; 143
    68f4:	ff 4f       	sbci	r31, 0xFF	; 255
    68f6:	80 81       	ld	r24, Z
    68f8:	91 81       	ldd	r25, Z+1	; 0x01
    68fa:	99 23       	and	r25, r25
    68fc:	0c f0       	brlt	.+2      	; 0x6900 <main+0x378>
    68fe:	74 ce       	rjmp	.-792    	; 0x65e8 <main+0x60>
			DIO_u8SetPinValue(DIO_GroupB,i,Low);
			_delay_ms(10);

		}

		for(i=0; i<8; i++)
    6900:	fe 01       	movw	r30, r28
    6902:	ef 58       	subi	r30, 0x8F	; 143
    6904:	ff 4f       	sbci	r31, 0xFF	; 255
    6906:	11 82       	std	Z+1, r1	; 0x01
    6908:	10 82       	st	Z, r1
    690a:	56 c1       	rjmp	.+684    	; 0x6bb8 <main+0x630>
		{
			DIO_u8SetPinValue(DIO_GroupA,i,High);
    690c:	fe 01       	movw	r30, r28
    690e:	ef 58       	subi	r30, 0x8F	; 143
    6910:	ff 4f       	sbci	r31, 0xFF	; 255
    6912:	90 81       	ld	r25, Z
    6914:	81 e0       	ldi	r24, 0x01	; 1
    6916:	69 2f       	mov	r22, r25
    6918:	41 e0       	ldi	r20, 0x01	; 1
    691a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    691e:	fe 01       	movw	r30, r28
    6920:	ef 5a       	subi	r30, 0xAF	; 175
    6922:	ff 4f       	sbci	r31, 0xFF	; 255
    6924:	80 e0       	ldi	r24, 0x00	; 0
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	a0 e2       	ldi	r26, 0x20	; 32
    692a:	b1 e4       	ldi	r27, 0x41	; 65
    692c:	80 83       	st	Z, r24
    692e:	91 83       	std	Z+1, r25	; 0x01
    6930:	a2 83       	std	Z+2, r26	; 0x02
    6932:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6934:	8e 01       	movw	r16, r28
    6936:	03 5b       	subi	r16, 0xB3	; 179
    6938:	1f 4f       	sbci	r17, 0xFF	; 255
    693a:	fe 01       	movw	r30, r28
    693c:	ef 5a       	subi	r30, 0xAF	; 175
    693e:	ff 4f       	sbci	r31, 0xFF	; 255
    6940:	60 81       	ld	r22, Z
    6942:	71 81       	ldd	r23, Z+1	; 0x01
    6944:	82 81       	ldd	r24, Z+2	; 0x02
    6946:	93 81       	ldd	r25, Z+3	; 0x03
    6948:	20 e0       	ldi	r18, 0x00	; 0
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	4a ef       	ldi	r20, 0xFA	; 250
    694e:	54 e4       	ldi	r21, 0x44	; 68
    6950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6954:	dc 01       	movw	r26, r24
    6956:	cb 01       	movw	r24, r22
    6958:	f8 01       	movw	r30, r16
    695a:	80 83       	st	Z, r24
    695c:	91 83       	std	Z+1, r25	; 0x01
    695e:	a2 83       	std	Z+2, r26	; 0x02
    6960:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6962:	fe 01       	movw	r30, r28
    6964:	e3 5b       	subi	r30, 0xB3	; 179
    6966:	ff 4f       	sbci	r31, 0xFF	; 255
    6968:	60 81       	ld	r22, Z
    696a:	71 81       	ldd	r23, Z+1	; 0x01
    696c:	82 81       	ldd	r24, Z+2	; 0x02
    696e:	93 81       	ldd	r25, Z+3	; 0x03
    6970:	20 e0       	ldi	r18, 0x00	; 0
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	40 e8       	ldi	r20, 0x80	; 128
    6976:	5f e3       	ldi	r21, 0x3F	; 63
    6978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    697c:	88 23       	and	r24, r24
    697e:	44 f4       	brge	.+16     	; 0x6990 <main+0x408>
		__ticks = 1;
    6980:	fe 01       	movw	r30, r28
    6982:	e5 5b       	subi	r30, 0xB5	; 181
    6984:	ff 4f       	sbci	r31, 0xFF	; 255
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	91 83       	std	Z+1, r25	; 0x01
    698c:	80 83       	st	Z, r24
    698e:	64 c0       	rjmp	.+200    	; 0x6a58 <main+0x4d0>
	else if (__tmp > 65535)
    6990:	fe 01       	movw	r30, r28
    6992:	e3 5b       	subi	r30, 0xB3	; 179
    6994:	ff 4f       	sbci	r31, 0xFF	; 255
    6996:	60 81       	ld	r22, Z
    6998:	71 81       	ldd	r23, Z+1	; 0x01
    699a:	82 81       	ldd	r24, Z+2	; 0x02
    699c:	93 81       	ldd	r25, Z+3	; 0x03
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	3f ef       	ldi	r19, 0xFF	; 255
    69a2:	4f e7       	ldi	r20, 0x7F	; 127
    69a4:	57 e4       	ldi	r21, 0x47	; 71
    69a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    69aa:	18 16       	cp	r1, r24
    69ac:	0c f0       	brlt	.+2      	; 0x69b0 <main+0x428>
    69ae:	43 c0       	rjmp	.+134    	; 0x6a36 <main+0x4ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69b0:	fe 01       	movw	r30, r28
    69b2:	ef 5a       	subi	r30, 0xAF	; 175
    69b4:	ff 4f       	sbci	r31, 0xFF	; 255
    69b6:	60 81       	ld	r22, Z
    69b8:	71 81       	ldd	r23, Z+1	; 0x01
    69ba:	82 81       	ldd	r24, Z+2	; 0x02
    69bc:	93 81       	ldd	r25, Z+3	; 0x03
    69be:	20 e0       	ldi	r18, 0x00	; 0
    69c0:	30 e0       	ldi	r19, 0x00	; 0
    69c2:	40 e2       	ldi	r20, 0x20	; 32
    69c4:	51 e4       	ldi	r21, 0x41	; 65
    69c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69ca:	dc 01       	movw	r26, r24
    69cc:	cb 01       	movw	r24, r22
    69ce:	8e 01       	movw	r16, r28
    69d0:	05 5b       	subi	r16, 0xB5	; 181
    69d2:	1f 4f       	sbci	r17, 0xFF	; 255
    69d4:	bc 01       	movw	r22, r24
    69d6:	cd 01       	movw	r24, r26
    69d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69dc:	dc 01       	movw	r26, r24
    69de:	cb 01       	movw	r24, r22
    69e0:	f8 01       	movw	r30, r16
    69e2:	91 83       	std	Z+1, r25	; 0x01
    69e4:	80 83       	st	Z, r24
    69e6:	1f c0       	rjmp	.+62     	; 0x6a26 <main+0x49e>
    69e8:	fe 01       	movw	r30, r28
    69ea:	e7 5b       	subi	r30, 0xB7	; 183
    69ec:	ff 4f       	sbci	r31, 0xFF	; 255
    69ee:	88 ec       	ldi	r24, 0xC8	; 200
    69f0:	90 e0       	ldi	r25, 0x00	; 0
    69f2:	91 83       	std	Z+1, r25	; 0x01
    69f4:	80 83       	st	Z, r24
    69f6:	fe 01       	movw	r30, r28
    69f8:	e7 5b       	subi	r30, 0xB7	; 183
    69fa:	ff 4f       	sbci	r31, 0xFF	; 255
    69fc:	80 81       	ld	r24, Z
    69fe:	91 81       	ldd	r25, Z+1	; 0x01
    6a00:	01 97       	sbiw	r24, 0x01	; 1
    6a02:	f1 f7       	brne	.-4      	; 0x6a00 <main+0x478>
    6a04:	fe 01       	movw	r30, r28
    6a06:	e7 5b       	subi	r30, 0xB7	; 183
    6a08:	ff 4f       	sbci	r31, 0xFF	; 255
    6a0a:	91 83       	std	Z+1, r25	; 0x01
    6a0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a0e:	de 01       	movw	r26, r28
    6a10:	a5 5b       	subi	r26, 0xB5	; 181
    6a12:	bf 4f       	sbci	r27, 0xFF	; 255
    6a14:	fe 01       	movw	r30, r28
    6a16:	e5 5b       	subi	r30, 0xB5	; 181
    6a18:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1a:	80 81       	ld	r24, Z
    6a1c:	91 81       	ldd	r25, Z+1	; 0x01
    6a1e:	01 97       	sbiw	r24, 0x01	; 1
    6a20:	11 96       	adiw	r26, 0x01	; 1
    6a22:	9c 93       	st	X, r25
    6a24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a26:	fe 01       	movw	r30, r28
    6a28:	e5 5b       	subi	r30, 0xB5	; 181
    6a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a2c:	80 81       	ld	r24, Z
    6a2e:	91 81       	ldd	r25, Z+1	; 0x01
    6a30:	00 97       	sbiw	r24, 0x00	; 0
    6a32:	d1 f6       	brne	.-76     	; 0x69e8 <main+0x460>
    6a34:	27 c0       	rjmp	.+78     	; 0x6a84 <main+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a36:	8e 01       	movw	r16, r28
    6a38:	05 5b       	subi	r16, 0xB5	; 181
    6a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    6a3c:	fe 01       	movw	r30, r28
    6a3e:	e3 5b       	subi	r30, 0xB3	; 179
    6a40:	ff 4f       	sbci	r31, 0xFF	; 255
    6a42:	60 81       	ld	r22, Z
    6a44:	71 81       	ldd	r23, Z+1	; 0x01
    6a46:	82 81       	ldd	r24, Z+2	; 0x02
    6a48:	93 81       	ldd	r25, Z+3	; 0x03
    6a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a4e:	dc 01       	movw	r26, r24
    6a50:	cb 01       	movw	r24, r22
    6a52:	f8 01       	movw	r30, r16
    6a54:	91 83       	std	Z+1, r25	; 0x01
    6a56:	80 83       	st	Z, r24
    6a58:	de 01       	movw	r26, r28
    6a5a:	a9 5b       	subi	r26, 0xB9	; 185
    6a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    6a5e:	fe 01       	movw	r30, r28
    6a60:	e5 5b       	subi	r30, 0xB5	; 181
    6a62:	ff 4f       	sbci	r31, 0xFF	; 255
    6a64:	80 81       	ld	r24, Z
    6a66:	91 81       	ldd	r25, Z+1	; 0x01
    6a68:	8d 93       	st	X+, r24
    6a6a:	9c 93       	st	X, r25
    6a6c:	fe 01       	movw	r30, r28
    6a6e:	e9 5b       	subi	r30, 0xB9	; 185
    6a70:	ff 4f       	sbci	r31, 0xFF	; 255
    6a72:	80 81       	ld	r24, Z
    6a74:	91 81       	ldd	r25, Z+1	; 0x01
    6a76:	01 97       	sbiw	r24, 0x01	; 1
    6a78:	f1 f7       	brne	.-4      	; 0x6a76 <main+0x4ee>
    6a7a:	fe 01       	movw	r30, r28
    6a7c:	e9 5b       	subi	r30, 0xB9	; 185
    6a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    6a80:	91 83       	std	Z+1, r25	; 0x01
    6a82:	80 83       	st	Z, r24
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
    6a84:	fe 01       	movw	r30, r28
    6a86:	ef 58       	subi	r30, 0x8F	; 143
    6a88:	ff 4f       	sbci	r31, 0xFF	; 255
    6a8a:	90 81       	ld	r25, Z
    6a8c:	81 e0       	ldi	r24, 0x01	; 1
    6a8e:	69 2f       	mov	r22, r25
    6a90:	40 e0       	ldi	r20, 0x00	; 0
    6a92:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6a96:	fe 01       	movw	r30, r28
    6a98:	ed 5b       	subi	r30, 0xBD	; 189
    6a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    6a9c:	80 e0       	ldi	r24, 0x00	; 0
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	a0 e2       	ldi	r26, 0x20	; 32
    6aa2:	b1 e4       	ldi	r27, 0x41	; 65
    6aa4:	80 83       	st	Z, r24
    6aa6:	91 83       	std	Z+1, r25	; 0x01
    6aa8:	a2 83       	std	Z+2, r26	; 0x02
    6aaa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aac:	8e 01       	movw	r16, r28
    6aae:	01 5c       	subi	r16, 0xC1	; 193
    6ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ab2:	fe 01       	movw	r30, r28
    6ab4:	ed 5b       	subi	r30, 0xBD	; 189
    6ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    6ab8:	60 81       	ld	r22, Z
    6aba:	71 81       	ldd	r23, Z+1	; 0x01
    6abc:	82 81       	ldd	r24, Z+2	; 0x02
    6abe:	93 81       	ldd	r25, Z+3	; 0x03
    6ac0:	20 e0       	ldi	r18, 0x00	; 0
    6ac2:	30 e0       	ldi	r19, 0x00	; 0
    6ac4:	4a ef       	ldi	r20, 0xFA	; 250
    6ac6:	54 e4       	ldi	r21, 0x44	; 68
    6ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6acc:	dc 01       	movw	r26, r24
    6ace:	cb 01       	movw	r24, r22
    6ad0:	f8 01       	movw	r30, r16
    6ad2:	80 83       	st	Z, r24
    6ad4:	91 83       	std	Z+1, r25	; 0x01
    6ad6:	a2 83       	std	Z+2, r26	; 0x02
    6ad8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6ada:	fe 01       	movw	r30, r28
    6adc:	ff 96       	adiw	r30, 0x3f	; 63
    6ade:	60 81       	ld	r22, Z
    6ae0:	71 81       	ldd	r23, Z+1	; 0x01
    6ae2:	82 81       	ldd	r24, Z+2	; 0x02
    6ae4:	93 81       	ldd	r25, Z+3	; 0x03
    6ae6:	20 e0       	ldi	r18, 0x00	; 0
    6ae8:	30 e0       	ldi	r19, 0x00	; 0
    6aea:	40 e8       	ldi	r20, 0x80	; 128
    6aec:	5f e3       	ldi	r21, 0x3F	; 63
    6aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6af2:	88 23       	and	r24, r24
    6af4:	2c f4       	brge	.+10     	; 0x6b00 <main+0x578>
		__ticks = 1;
    6af6:	81 e0       	ldi	r24, 0x01	; 1
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	9e af       	std	Y+62, r25	; 0x3e
    6afc:	8d af       	std	Y+61, r24	; 0x3d
    6afe:	46 c0       	rjmp	.+140    	; 0x6b8c <main+0x604>
	else if (__tmp > 65535)
    6b00:	fe 01       	movw	r30, r28
    6b02:	ff 96       	adiw	r30, 0x3f	; 63
    6b04:	60 81       	ld	r22, Z
    6b06:	71 81       	ldd	r23, Z+1	; 0x01
    6b08:	82 81       	ldd	r24, Z+2	; 0x02
    6b0a:	93 81       	ldd	r25, Z+3	; 0x03
    6b0c:	20 e0       	ldi	r18, 0x00	; 0
    6b0e:	3f ef       	ldi	r19, 0xFF	; 255
    6b10:	4f e7       	ldi	r20, 0x7F	; 127
    6b12:	57 e4       	ldi	r21, 0x47	; 71
    6b14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b18:	18 16       	cp	r1, r24
    6b1a:	64 f5       	brge	.+88     	; 0x6b74 <main+0x5ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b1c:	fe 01       	movw	r30, r28
    6b1e:	ed 5b       	subi	r30, 0xBD	; 189
    6b20:	ff 4f       	sbci	r31, 0xFF	; 255
    6b22:	60 81       	ld	r22, Z
    6b24:	71 81       	ldd	r23, Z+1	; 0x01
    6b26:	82 81       	ldd	r24, Z+2	; 0x02
    6b28:	93 81       	ldd	r25, Z+3	; 0x03
    6b2a:	20 e0       	ldi	r18, 0x00	; 0
    6b2c:	30 e0       	ldi	r19, 0x00	; 0
    6b2e:	40 e2       	ldi	r20, 0x20	; 32
    6b30:	51 e4       	ldi	r21, 0x41	; 65
    6b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b36:	dc 01       	movw	r26, r24
    6b38:	cb 01       	movw	r24, r22
    6b3a:	bc 01       	movw	r22, r24
    6b3c:	cd 01       	movw	r24, r26
    6b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b42:	dc 01       	movw	r26, r24
    6b44:	cb 01       	movw	r24, r22
    6b46:	9e af       	std	Y+62, r25	; 0x3e
    6b48:	8d af       	std	Y+61, r24	; 0x3d
    6b4a:	0f c0       	rjmp	.+30     	; 0x6b6a <main+0x5e2>
    6b4c:	88 ec       	ldi	r24, 0xC8	; 200
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	9c af       	std	Y+60, r25	; 0x3c
    6b52:	8b af       	std	Y+59, r24	; 0x3b
    6b54:	8b ad       	ldd	r24, Y+59	; 0x3b
    6b56:	9c ad       	ldd	r25, Y+60	; 0x3c
    6b58:	01 97       	sbiw	r24, 0x01	; 1
    6b5a:	f1 f7       	brne	.-4      	; 0x6b58 <main+0x5d0>
    6b5c:	9c af       	std	Y+60, r25	; 0x3c
    6b5e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b60:	8d ad       	ldd	r24, Y+61	; 0x3d
    6b62:	9e ad       	ldd	r25, Y+62	; 0x3e
    6b64:	01 97       	sbiw	r24, 0x01	; 1
    6b66:	9e af       	std	Y+62, r25	; 0x3e
    6b68:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    6b6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    6b6e:	00 97       	sbiw	r24, 0x00	; 0
    6b70:	69 f7       	brne	.-38     	; 0x6b4c <main+0x5c4>
    6b72:	16 c0       	rjmp	.+44     	; 0x6ba0 <main+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b74:	fe 01       	movw	r30, r28
    6b76:	ff 96       	adiw	r30, 0x3f	; 63
    6b78:	60 81       	ld	r22, Z
    6b7a:	71 81       	ldd	r23, Z+1	; 0x01
    6b7c:	82 81       	ldd	r24, Z+2	; 0x02
    6b7e:	93 81       	ldd	r25, Z+3	; 0x03
    6b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b84:	dc 01       	movw	r26, r24
    6b86:	cb 01       	movw	r24, r22
    6b88:	9e af       	std	Y+62, r25	; 0x3e
    6b8a:	8d af       	std	Y+61, r24	; 0x3d
    6b8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    6b8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6b90:	9a af       	std	Y+58, r25	; 0x3a
    6b92:	89 af       	std	Y+57, r24	; 0x39
    6b94:	89 ad       	ldd	r24, Y+57	; 0x39
    6b96:	9a ad       	ldd	r25, Y+58	; 0x3a
    6b98:	01 97       	sbiw	r24, 0x01	; 1
    6b9a:	f1 f7       	brne	.-4      	; 0x6b98 <main+0x610>
    6b9c:	9a af       	std	Y+58, r25	; 0x3a
    6b9e:	89 af       	std	Y+57, r24	; 0x39
			DIO_u8SetPinValue(DIO_GroupB,i,Low);
			_delay_ms(10);

		}

		for(i=0; i<8; i++)
    6ba0:	de 01       	movw	r26, r28
    6ba2:	af 58       	subi	r26, 0x8F	; 143
    6ba4:	bf 4f       	sbci	r27, 0xFF	; 255
    6ba6:	fe 01       	movw	r30, r28
    6ba8:	ef 58       	subi	r30, 0x8F	; 143
    6baa:	ff 4f       	sbci	r31, 0xFF	; 255
    6bac:	80 81       	ld	r24, Z
    6bae:	91 81       	ldd	r25, Z+1	; 0x01
    6bb0:	01 96       	adiw	r24, 0x01	; 1
    6bb2:	11 96       	adiw	r26, 0x01	; 1
    6bb4:	9c 93       	st	X, r25
    6bb6:	8e 93       	st	-X, r24
    6bb8:	fe 01       	movw	r30, r28
    6bba:	ef 58       	subi	r30, 0x8F	; 143
    6bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    6bbe:	80 81       	ld	r24, Z
    6bc0:	91 81       	ldd	r25, Z+1	; 0x01
    6bc2:	88 30       	cpi	r24, 0x08	; 8
    6bc4:	91 05       	cpc	r25, r1
    6bc6:	0c f4       	brge	.+2      	; 0x6bca <main+0x642>
    6bc8:	a1 ce       	rjmp	.-702    	; 0x690c <main+0x384>
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
			_delay_ms(10);
		}

		for(i=6; i>=0; i--)
    6bca:	fe 01       	movw	r30, r28
    6bcc:	ef 58       	subi	r30, 0x8F	; 143
    6bce:	ff 4f       	sbci	r31, 0xFF	; 255
    6bd0:	86 e0       	ldi	r24, 0x06	; 6
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	91 83       	std	Z+1, r25	; 0x01
    6bd6:	80 83       	st	Z, r24
    6bd8:	02 c1       	rjmp	.+516    	; 0x6dde <main+0x856>
		{
			DIO_u8SetPinValue(DIO_GroupA,i,High);
    6bda:	fe 01       	movw	r30, r28
    6bdc:	ef 58       	subi	r30, 0x8F	; 143
    6bde:	ff 4f       	sbci	r31, 0xFF	; 255
    6be0:	90 81       	ld	r25, Z
    6be2:	81 e0       	ldi	r24, 0x01	; 1
    6be4:	69 2f       	mov	r22, r25
    6be6:	41 e0       	ldi	r20, 0x01	; 1
    6be8:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6bec:	80 e0       	ldi	r24, 0x00	; 0
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	a0 e2       	ldi	r26, 0x20	; 32
    6bf2:	b1 e4       	ldi	r27, 0x41	; 65
    6bf4:	8d ab       	std	Y+53, r24	; 0x35
    6bf6:	9e ab       	std	Y+54, r25	; 0x36
    6bf8:	af ab       	std	Y+55, r26	; 0x37
    6bfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bfc:	6d a9       	ldd	r22, Y+53	; 0x35
    6bfe:	7e a9       	ldd	r23, Y+54	; 0x36
    6c00:	8f a9       	ldd	r24, Y+55	; 0x37
    6c02:	98 ad       	ldd	r25, Y+56	; 0x38
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	4a ef       	ldi	r20, 0xFA	; 250
    6c0a:	54 e4       	ldi	r21, 0x44	; 68
    6c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c10:	dc 01       	movw	r26, r24
    6c12:	cb 01       	movw	r24, r22
    6c14:	89 ab       	std	Y+49, r24	; 0x31
    6c16:	9a ab       	std	Y+50, r25	; 0x32
    6c18:	ab ab       	std	Y+51, r26	; 0x33
    6c1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6c1c:	69 a9       	ldd	r22, Y+49	; 0x31
    6c1e:	7a a9       	ldd	r23, Y+50	; 0x32
    6c20:	8b a9       	ldd	r24, Y+51	; 0x33
    6c22:	9c a9       	ldd	r25, Y+52	; 0x34
    6c24:	20 e0       	ldi	r18, 0x00	; 0
    6c26:	30 e0       	ldi	r19, 0x00	; 0
    6c28:	40 e8       	ldi	r20, 0x80	; 128
    6c2a:	5f e3       	ldi	r21, 0x3F	; 63
    6c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6c30:	88 23       	and	r24, r24
    6c32:	2c f4       	brge	.+10     	; 0x6c3e <main+0x6b6>
		__ticks = 1;
    6c34:	81 e0       	ldi	r24, 0x01	; 1
    6c36:	90 e0       	ldi	r25, 0x00	; 0
    6c38:	98 ab       	std	Y+48, r25	; 0x30
    6c3a:	8f a7       	std	Y+47, r24	; 0x2f
    6c3c:	3f c0       	rjmp	.+126    	; 0x6cbc <main+0x734>
	else if (__tmp > 65535)
    6c3e:	69 a9       	ldd	r22, Y+49	; 0x31
    6c40:	7a a9       	ldd	r23, Y+50	; 0x32
    6c42:	8b a9       	ldd	r24, Y+51	; 0x33
    6c44:	9c a9       	ldd	r25, Y+52	; 0x34
    6c46:	20 e0       	ldi	r18, 0x00	; 0
    6c48:	3f ef       	ldi	r19, 0xFF	; 255
    6c4a:	4f e7       	ldi	r20, 0x7F	; 127
    6c4c:	57 e4       	ldi	r21, 0x47	; 71
    6c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c52:	18 16       	cp	r1, r24
    6c54:	4c f5       	brge	.+82     	; 0x6ca8 <main+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c56:	6d a9       	ldd	r22, Y+53	; 0x35
    6c58:	7e a9       	ldd	r23, Y+54	; 0x36
    6c5a:	8f a9       	ldd	r24, Y+55	; 0x37
    6c5c:	98 ad       	ldd	r25, Y+56	; 0x38
    6c5e:	20 e0       	ldi	r18, 0x00	; 0
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	40 e2       	ldi	r20, 0x20	; 32
    6c64:	51 e4       	ldi	r21, 0x41	; 65
    6c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c6a:	dc 01       	movw	r26, r24
    6c6c:	cb 01       	movw	r24, r22
    6c6e:	bc 01       	movw	r22, r24
    6c70:	cd 01       	movw	r24, r26
    6c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c76:	dc 01       	movw	r26, r24
    6c78:	cb 01       	movw	r24, r22
    6c7a:	98 ab       	std	Y+48, r25	; 0x30
    6c7c:	8f a7       	std	Y+47, r24	; 0x2f
    6c7e:	0f c0       	rjmp	.+30     	; 0x6c9e <main+0x716>
    6c80:	88 ec       	ldi	r24, 0xC8	; 200
    6c82:	90 e0       	ldi	r25, 0x00	; 0
    6c84:	9e a7       	std	Y+46, r25	; 0x2e
    6c86:	8d a7       	std	Y+45, r24	; 0x2d
    6c88:	8d a5       	ldd	r24, Y+45	; 0x2d
    6c8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    6c8c:	01 97       	sbiw	r24, 0x01	; 1
    6c8e:	f1 f7       	brne	.-4      	; 0x6c8c <main+0x704>
    6c90:	9e a7       	std	Y+46, r25	; 0x2e
    6c92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c94:	8f a5       	ldd	r24, Y+47	; 0x2f
    6c96:	98 a9       	ldd	r25, Y+48	; 0x30
    6c98:	01 97       	sbiw	r24, 0x01	; 1
    6c9a:	98 ab       	std	Y+48, r25	; 0x30
    6c9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6ca0:	98 a9       	ldd	r25, Y+48	; 0x30
    6ca2:	00 97       	sbiw	r24, 0x00	; 0
    6ca4:	69 f7       	brne	.-38     	; 0x6c80 <main+0x6f8>
    6ca6:	14 c0       	rjmp	.+40     	; 0x6cd0 <main+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    6caa:	7a a9       	ldd	r23, Y+50	; 0x32
    6cac:	8b a9       	ldd	r24, Y+51	; 0x33
    6cae:	9c a9       	ldd	r25, Y+52	; 0x34
    6cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6cb4:	dc 01       	movw	r26, r24
    6cb6:	cb 01       	movw	r24, r22
    6cb8:	98 ab       	std	Y+48, r25	; 0x30
    6cba:	8f a7       	std	Y+47, r24	; 0x2f
    6cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    6cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    6cc0:	9c a7       	std	Y+44, r25	; 0x2c
    6cc2:	8b a7       	std	Y+43, r24	; 0x2b
    6cc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    6cc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    6cc8:	01 97       	sbiw	r24, 0x01	; 1
    6cca:	f1 f7       	brne	.-4      	; 0x6cc8 <main+0x740>
    6ccc:	9c a7       	std	Y+44, r25	; 0x2c
    6cce:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
    6cd0:	fe 01       	movw	r30, r28
    6cd2:	ef 58       	subi	r30, 0x8F	; 143
    6cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    6cd6:	90 81       	ld	r25, Z
    6cd8:	81 e0       	ldi	r24, 0x01	; 1
    6cda:	69 2f       	mov	r22, r25
    6cdc:	40 e0       	ldi	r20, 0x00	; 0
    6cde:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6ce2:	80 e0       	ldi	r24, 0x00	; 0
    6ce4:	90 e0       	ldi	r25, 0x00	; 0
    6ce6:	a0 e2       	ldi	r26, 0x20	; 32
    6ce8:	b1 e4       	ldi	r27, 0x41	; 65
    6cea:	8f a3       	std	Y+39, r24	; 0x27
    6cec:	98 a7       	std	Y+40, r25	; 0x28
    6cee:	a9 a7       	std	Y+41, r26	; 0x29
    6cf0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cf2:	6f a1       	ldd	r22, Y+39	; 0x27
    6cf4:	78 a5       	ldd	r23, Y+40	; 0x28
    6cf6:	89 a5       	ldd	r24, Y+41	; 0x29
    6cf8:	9a a5       	ldd	r25, Y+42	; 0x2a
    6cfa:	20 e0       	ldi	r18, 0x00	; 0
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	4a ef       	ldi	r20, 0xFA	; 250
    6d00:	54 e4       	ldi	r21, 0x44	; 68
    6d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d06:	dc 01       	movw	r26, r24
    6d08:	cb 01       	movw	r24, r22
    6d0a:	8b a3       	std	Y+35, r24	; 0x23
    6d0c:	9c a3       	std	Y+36, r25	; 0x24
    6d0e:	ad a3       	std	Y+37, r26	; 0x25
    6d10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6d12:	6b a1       	ldd	r22, Y+35	; 0x23
    6d14:	7c a1       	ldd	r23, Y+36	; 0x24
    6d16:	8d a1       	ldd	r24, Y+37	; 0x25
    6d18:	9e a1       	ldd	r25, Y+38	; 0x26
    6d1a:	20 e0       	ldi	r18, 0x00	; 0
    6d1c:	30 e0       	ldi	r19, 0x00	; 0
    6d1e:	40 e8       	ldi	r20, 0x80	; 128
    6d20:	5f e3       	ldi	r21, 0x3F	; 63
    6d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6d26:	88 23       	and	r24, r24
    6d28:	2c f4       	brge	.+10     	; 0x6d34 <main+0x7ac>
		__ticks = 1;
    6d2a:	81 e0       	ldi	r24, 0x01	; 1
    6d2c:	90 e0       	ldi	r25, 0x00	; 0
    6d2e:	9a a3       	std	Y+34, r25	; 0x22
    6d30:	89 a3       	std	Y+33, r24	; 0x21
    6d32:	3f c0       	rjmp	.+126    	; 0x6db2 <main+0x82a>
	else if (__tmp > 65535)
    6d34:	6b a1       	ldd	r22, Y+35	; 0x23
    6d36:	7c a1       	ldd	r23, Y+36	; 0x24
    6d38:	8d a1       	ldd	r24, Y+37	; 0x25
    6d3a:	9e a1       	ldd	r25, Y+38	; 0x26
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	3f ef       	ldi	r19, 0xFF	; 255
    6d40:	4f e7       	ldi	r20, 0x7F	; 127
    6d42:	57 e4       	ldi	r21, 0x47	; 71
    6d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d48:	18 16       	cp	r1, r24
    6d4a:	4c f5       	brge	.+82     	; 0x6d9e <main+0x816>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    6d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    6d50:	89 a5       	ldd	r24, Y+41	; 0x29
    6d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    6d54:	20 e0       	ldi	r18, 0x00	; 0
    6d56:	30 e0       	ldi	r19, 0x00	; 0
    6d58:	40 e2       	ldi	r20, 0x20	; 32
    6d5a:	51 e4       	ldi	r21, 0x41	; 65
    6d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d60:	dc 01       	movw	r26, r24
    6d62:	cb 01       	movw	r24, r22
    6d64:	bc 01       	movw	r22, r24
    6d66:	cd 01       	movw	r24, r26
    6d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d6c:	dc 01       	movw	r26, r24
    6d6e:	cb 01       	movw	r24, r22
    6d70:	9a a3       	std	Y+34, r25	; 0x22
    6d72:	89 a3       	std	Y+33, r24	; 0x21
    6d74:	0f c0       	rjmp	.+30     	; 0x6d94 <main+0x80c>
    6d76:	88 ec       	ldi	r24, 0xC8	; 200
    6d78:	90 e0       	ldi	r25, 0x00	; 0
    6d7a:	98 a3       	std	Y+32, r25	; 0x20
    6d7c:	8f 8f       	std	Y+31, r24	; 0x1f
    6d7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6d80:	98 a1       	ldd	r25, Y+32	; 0x20
    6d82:	01 97       	sbiw	r24, 0x01	; 1
    6d84:	f1 f7       	brne	.-4      	; 0x6d82 <main+0x7fa>
    6d86:	98 a3       	std	Y+32, r25	; 0x20
    6d88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    6d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    6d8e:	01 97       	sbiw	r24, 0x01	; 1
    6d90:	9a a3       	std	Y+34, r25	; 0x22
    6d92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d94:	89 a1       	ldd	r24, Y+33	; 0x21
    6d96:	9a a1       	ldd	r25, Y+34	; 0x22
    6d98:	00 97       	sbiw	r24, 0x00	; 0
    6d9a:	69 f7       	brne	.-38     	; 0x6d76 <main+0x7ee>
    6d9c:	14 c0       	rjmp	.+40     	; 0x6dc6 <main+0x83e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    6da0:	7c a1       	ldd	r23, Y+36	; 0x24
    6da2:	8d a1       	ldd	r24, Y+37	; 0x25
    6da4:	9e a1       	ldd	r25, Y+38	; 0x26
    6da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6daa:	dc 01       	movw	r26, r24
    6dac:	cb 01       	movw	r24, r22
    6dae:	9a a3       	std	Y+34, r25	; 0x22
    6db0:	89 a3       	std	Y+33, r24	; 0x21
    6db2:	89 a1       	ldd	r24, Y+33	; 0x21
    6db4:	9a a1       	ldd	r25, Y+34	; 0x22
    6db6:	9e 8f       	std	Y+30, r25	; 0x1e
    6db8:	8d 8f       	std	Y+29, r24	; 0x1d
    6dba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6dbc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6dbe:	01 97       	sbiw	r24, 0x01	; 1
    6dc0:	f1 f7       	brne	.-4      	; 0x6dbe <main+0x836>
    6dc2:	9e 8f       	std	Y+30, r25	; 0x1e
    6dc4:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
			_delay_ms(10);
		}

		for(i=6; i>=0; i--)
    6dc6:	de 01       	movw	r26, r28
    6dc8:	af 58       	subi	r26, 0x8F	; 143
    6dca:	bf 4f       	sbci	r27, 0xFF	; 255
    6dcc:	fe 01       	movw	r30, r28
    6dce:	ef 58       	subi	r30, 0x8F	; 143
    6dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd2:	80 81       	ld	r24, Z
    6dd4:	91 81       	ldd	r25, Z+1	; 0x01
    6dd6:	01 97       	sbiw	r24, 0x01	; 1
    6dd8:	11 96       	adiw	r26, 0x01	; 1
    6dda:	9c 93       	st	X, r25
    6ddc:	8e 93       	st	-X, r24
    6dde:	fe 01       	movw	r30, r28
    6de0:	ef 58       	subi	r30, 0x8F	; 143
    6de2:	ff 4f       	sbci	r31, 0xFF	; 255
    6de4:	80 81       	ld	r24, Z
    6de6:	91 81       	ldd	r25, Z+1	; 0x01
    6de8:	99 23       	and	r25, r25
    6dea:	0c f0       	brlt	.+2      	; 0x6dee <main+0x866>
    6dec:	f6 ce       	rjmp	.-532    	; 0x6bda <main+0x652>
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
			_delay_ms(10);
		}

		for(i=0; i<8; i++ )
    6dee:	fe 01       	movw	r30, r28
    6df0:	ef 58       	subi	r30, 0x8F	; 143
    6df2:	ff 4f       	sbci	r31, 0xFF	; 255
    6df4:	11 82       	std	Z+1, r1	; 0x01
    6df6:	10 82       	st	Z, r1
    6df8:	02 c1       	rjmp	.+516    	; 0x6ffe <main+0xa76>
		{
			DIO_u8SetPinValue(DIO_GroupB,i,High);
    6dfa:	fe 01       	movw	r30, r28
    6dfc:	ef 58       	subi	r30, 0x8F	; 143
    6dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    6e00:	90 81       	ld	r25, Z
    6e02:	82 e0       	ldi	r24, 0x02	; 2
    6e04:	69 2f       	mov	r22, r25
    6e06:	41 e0       	ldi	r20, 0x01	; 1
    6e08:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6e0c:	80 e0       	ldi	r24, 0x00	; 0
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	a0 e2       	ldi	r26, 0x20	; 32
    6e12:	b1 e4       	ldi	r27, 0x41	; 65
    6e14:	89 8f       	std	Y+25, r24	; 0x19
    6e16:	9a 8f       	std	Y+26, r25	; 0x1a
    6e18:	ab 8f       	std	Y+27, r26	; 0x1b
    6e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    6e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e24:	20 e0       	ldi	r18, 0x00	; 0
    6e26:	30 e0       	ldi	r19, 0x00	; 0
    6e28:	4a ef       	ldi	r20, 0xFA	; 250
    6e2a:	54 e4       	ldi	r21, 0x44	; 68
    6e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e30:	dc 01       	movw	r26, r24
    6e32:	cb 01       	movw	r24, r22
    6e34:	8d 8b       	std	Y+21, r24	; 0x15
    6e36:	9e 8b       	std	Y+22, r25	; 0x16
    6e38:	af 8b       	std	Y+23, r26	; 0x17
    6e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    6e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    6e40:	8f 89       	ldd	r24, Y+23	; 0x17
    6e42:	98 8d       	ldd	r25, Y+24	; 0x18
    6e44:	20 e0       	ldi	r18, 0x00	; 0
    6e46:	30 e0       	ldi	r19, 0x00	; 0
    6e48:	40 e8       	ldi	r20, 0x80	; 128
    6e4a:	5f e3       	ldi	r21, 0x3F	; 63
    6e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e50:	88 23       	and	r24, r24
    6e52:	2c f4       	brge	.+10     	; 0x6e5e <main+0x8d6>
		__ticks = 1;
    6e54:	81 e0       	ldi	r24, 0x01	; 1
    6e56:	90 e0       	ldi	r25, 0x00	; 0
    6e58:	9c 8b       	std	Y+20, r25	; 0x14
    6e5a:	8b 8b       	std	Y+19, r24	; 0x13
    6e5c:	3f c0       	rjmp	.+126    	; 0x6edc <main+0x954>
	else if (__tmp > 65535)
    6e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    6e60:	7e 89       	ldd	r23, Y+22	; 0x16
    6e62:	8f 89       	ldd	r24, Y+23	; 0x17
    6e64:	98 8d       	ldd	r25, Y+24	; 0x18
    6e66:	20 e0       	ldi	r18, 0x00	; 0
    6e68:	3f ef       	ldi	r19, 0xFF	; 255
    6e6a:	4f e7       	ldi	r20, 0x7F	; 127
    6e6c:	57 e4       	ldi	r21, 0x47	; 71
    6e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e72:	18 16       	cp	r1, r24
    6e74:	4c f5       	brge	.+82     	; 0x6ec8 <main+0x940>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e76:	69 8d       	ldd	r22, Y+25	; 0x19
    6e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6e7e:	20 e0       	ldi	r18, 0x00	; 0
    6e80:	30 e0       	ldi	r19, 0x00	; 0
    6e82:	40 e2       	ldi	r20, 0x20	; 32
    6e84:	51 e4       	ldi	r21, 0x41	; 65
    6e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e8a:	dc 01       	movw	r26, r24
    6e8c:	cb 01       	movw	r24, r22
    6e8e:	bc 01       	movw	r22, r24
    6e90:	cd 01       	movw	r24, r26
    6e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e96:	dc 01       	movw	r26, r24
    6e98:	cb 01       	movw	r24, r22
    6e9a:	9c 8b       	std	Y+20, r25	; 0x14
    6e9c:	8b 8b       	std	Y+19, r24	; 0x13
    6e9e:	0f c0       	rjmp	.+30     	; 0x6ebe <main+0x936>
    6ea0:	88 ec       	ldi	r24, 0xC8	; 200
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
    6ea4:	9a 8b       	std	Y+18, r25	; 0x12
    6ea6:	89 8b       	std	Y+17, r24	; 0x11
    6ea8:	89 89       	ldd	r24, Y+17	; 0x11
    6eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    6eac:	01 97       	sbiw	r24, 0x01	; 1
    6eae:	f1 f7       	brne	.-4      	; 0x6eac <main+0x924>
    6eb0:	9a 8b       	std	Y+18, r25	; 0x12
    6eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    6eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    6eb8:	01 97       	sbiw	r24, 0x01	; 1
    6eba:	9c 8b       	std	Y+20, r25	; 0x14
    6ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    6ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    6ec2:	00 97       	sbiw	r24, 0x00	; 0
    6ec4:	69 f7       	brne	.-38     	; 0x6ea0 <main+0x918>
    6ec6:	14 c0       	rjmp	.+40     	; 0x6ef0 <main+0x968>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    6eca:	7e 89       	ldd	r23, Y+22	; 0x16
    6ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    6ece:	98 8d       	ldd	r25, Y+24	; 0x18
    6ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ed4:	dc 01       	movw	r26, r24
    6ed6:	cb 01       	movw	r24, r22
    6ed8:	9c 8b       	std	Y+20, r25	; 0x14
    6eda:	8b 8b       	std	Y+19, r24	; 0x13
    6edc:	8b 89       	ldd	r24, Y+19	; 0x13
    6ede:	9c 89       	ldd	r25, Y+20	; 0x14
    6ee0:	98 8b       	std	Y+16, r25	; 0x10
    6ee2:	8f 87       	std	Y+15, r24	; 0x0f
    6ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    6ee6:	98 89       	ldd	r25, Y+16	; 0x10
    6ee8:	01 97       	sbiw	r24, 0x01	; 1
    6eea:	f1 f7       	brne	.-4      	; 0x6ee8 <main+0x960>
    6eec:	98 8b       	std	Y+16, r25	; 0x10
    6eee:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupB,i,Low);
    6ef0:	fe 01       	movw	r30, r28
    6ef2:	ef 58       	subi	r30, 0x8F	; 143
    6ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ef6:	90 81       	ld	r25, Z
    6ef8:	82 e0       	ldi	r24, 0x02	; 2
    6efa:	69 2f       	mov	r22, r25
    6efc:	40 e0       	ldi	r20, 0x00	; 0
    6efe:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <DIO_u8SetPinValue>
    6f02:	80 e0       	ldi	r24, 0x00	; 0
    6f04:	90 e0       	ldi	r25, 0x00	; 0
    6f06:	a0 e2       	ldi	r26, 0x20	; 32
    6f08:	b1 e4       	ldi	r27, 0x41	; 65
    6f0a:	8b 87       	std	Y+11, r24	; 0x0b
    6f0c:	9c 87       	std	Y+12, r25	; 0x0c
    6f0e:	ad 87       	std	Y+13, r26	; 0x0d
    6f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	4a ef       	ldi	r20, 0xFA	; 250
    6f20:	54 e4       	ldi	r21, 0x44	; 68
    6f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f26:	dc 01       	movw	r26, r24
    6f28:	cb 01       	movw	r24, r22
    6f2a:	8f 83       	std	Y+7, r24	; 0x07
    6f2c:	98 87       	std	Y+8, r25	; 0x08
    6f2e:	a9 87       	std	Y+9, r26	; 0x09
    6f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6f32:	6f 81       	ldd	r22, Y+7	; 0x07
    6f34:	78 85       	ldd	r23, Y+8	; 0x08
    6f36:	89 85       	ldd	r24, Y+9	; 0x09
    6f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f3a:	20 e0       	ldi	r18, 0x00	; 0
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	40 e8       	ldi	r20, 0x80	; 128
    6f40:	5f e3       	ldi	r21, 0x3F	; 63
    6f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6f46:	88 23       	and	r24, r24
    6f48:	2c f4       	brge	.+10     	; 0x6f54 <main+0x9cc>
		__ticks = 1;
    6f4a:	81 e0       	ldi	r24, 0x01	; 1
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
    6f4e:	9e 83       	std	Y+6, r25	; 0x06
    6f50:	8d 83       	std	Y+5, r24	; 0x05
    6f52:	3f c0       	rjmp	.+126    	; 0x6fd2 <main+0xa4a>
	else if (__tmp > 65535)
    6f54:	6f 81       	ldd	r22, Y+7	; 0x07
    6f56:	78 85       	ldd	r23, Y+8	; 0x08
    6f58:	89 85       	ldd	r24, Y+9	; 0x09
    6f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f5c:	20 e0       	ldi	r18, 0x00	; 0
    6f5e:	3f ef       	ldi	r19, 0xFF	; 255
    6f60:	4f e7       	ldi	r20, 0x7F	; 127
    6f62:	57 e4       	ldi	r21, 0x47	; 71
    6f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f68:	18 16       	cp	r1, r24
    6f6a:	4c f5       	brge	.+82     	; 0x6fbe <main+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f74:	20 e0       	ldi	r18, 0x00	; 0
    6f76:	30 e0       	ldi	r19, 0x00	; 0
    6f78:	40 e2       	ldi	r20, 0x20	; 32
    6f7a:	51 e4       	ldi	r21, 0x41	; 65
    6f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f80:	dc 01       	movw	r26, r24
    6f82:	cb 01       	movw	r24, r22
    6f84:	bc 01       	movw	r22, r24
    6f86:	cd 01       	movw	r24, r26
    6f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6f8c:	dc 01       	movw	r26, r24
    6f8e:	cb 01       	movw	r24, r22
    6f90:	9e 83       	std	Y+6, r25	; 0x06
    6f92:	8d 83       	std	Y+5, r24	; 0x05
    6f94:	0f c0       	rjmp	.+30     	; 0x6fb4 <main+0xa2c>
    6f96:	88 ec       	ldi	r24, 0xC8	; 200
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	9c 83       	std	Y+4, r25	; 0x04
    6f9c:	8b 83       	std	Y+3, r24	; 0x03
    6f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    6fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    6fa2:	01 97       	sbiw	r24, 0x01	; 1
    6fa4:	f1 f7       	brne	.-4      	; 0x6fa2 <main+0xa1a>
    6fa6:	9c 83       	std	Y+4, r25	; 0x04
    6fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6faa:	8d 81       	ldd	r24, Y+5	; 0x05
    6fac:	9e 81       	ldd	r25, Y+6	; 0x06
    6fae:	01 97       	sbiw	r24, 0x01	; 1
    6fb0:	9e 83       	std	Y+6, r25	; 0x06
    6fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    6fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6fb8:	00 97       	sbiw	r24, 0x00	; 0
    6fba:	69 f7       	brne	.-38     	; 0x6f96 <main+0xa0e>
    6fbc:	14 c0       	rjmp	.+40     	; 0x6fe6 <main+0xa5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    6fc0:	78 85       	ldd	r23, Y+8	; 0x08
    6fc2:	89 85       	ldd	r24, Y+9	; 0x09
    6fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fca:	dc 01       	movw	r26, r24
    6fcc:	cb 01       	movw	r24, r22
    6fce:	9e 83       	std	Y+6, r25	; 0x06
    6fd0:	8d 83       	std	Y+5, r24	; 0x05
    6fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    6fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    6fd6:	9a 83       	std	Y+2, r25	; 0x02
    6fd8:	89 83       	std	Y+1, r24	; 0x01
    6fda:	89 81       	ldd	r24, Y+1	; 0x01
    6fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    6fde:	01 97       	sbiw	r24, 0x01	; 1
    6fe0:	f1 f7       	brne	.-4      	; 0x6fde <main+0xa56>
    6fe2:	9a 83       	std	Y+2, r25	; 0x02
    6fe4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			DIO_u8SetPinValue(DIO_GroupA,i,Low);
			_delay_ms(10);
		}

		for(i=0; i<8; i++ )
    6fe6:	de 01       	movw	r26, r28
    6fe8:	af 58       	subi	r26, 0x8F	; 143
    6fea:	bf 4f       	sbci	r27, 0xFF	; 255
    6fec:	fe 01       	movw	r30, r28
    6fee:	ef 58       	subi	r30, 0x8F	; 143
    6ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    6ff2:	80 81       	ld	r24, Z
    6ff4:	91 81       	ldd	r25, Z+1	; 0x01
    6ff6:	01 96       	adiw	r24, 0x01	; 1
    6ff8:	11 96       	adiw	r26, 0x01	; 1
    6ffa:	9c 93       	st	X, r25
    6ffc:	8e 93       	st	-X, r24
    6ffe:	fe 01       	movw	r30, r28
    7000:	ef 58       	subi	r30, 0x8F	; 143
    7002:	ff 4f       	sbci	r31, 0xFF	; 255
    7004:	80 81       	ld	r24, Z
    7006:	91 81       	ldd	r25, Z+1	; 0x01
    7008:	88 30       	cpi	r24, 0x08	; 8
    700a:	91 05       	cpc	r25, r1
    700c:	0c f4       	brge	.+2      	; 0x7010 <main+0xa88>
    700e:	f5 ce       	rjmp	.-534    	; 0x6dfa <main+0x872>
    7010:	e3 ca       	rjmp	.-2618   	; 0x65d8 <main+0x50>

00007012 <__divmodhi4>:
    7012:	97 fb       	bst	r25, 7
    7014:	09 2e       	mov	r0, r25
    7016:	07 26       	eor	r0, r23
    7018:	0a d0       	rcall	.+20     	; 0x702e <__divmodhi4_neg1>
    701a:	77 fd       	sbrc	r23, 7
    701c:	04 d0       	rcall	.+8      	; 0x7026 <__divmodhi4_neg2>
    701e:	2e d0       	rcall	.+92     	; 0x707c <__udivmodhi4>
    7020:	06 d0       	rcall	.+12     	; 0x702e <__divmodhi4_neg1>
    7022:	00 20       	and	r0, r0
    7024:	1a f4       	brpl	.+6      	; 0x702c <__divmodhi4_exit>

00007026 <__divmodhi4_neg2>:
    7026:	70 95       	com	r23
    7028:	61 95       	neg	r22
    702a:	7f 4f       	sbci	r23, 0xFF	; 255

0000702c <__divmodhi4_exit>:
    702c:	08 95       	ret

0000702e <__divmodhi4_neg1>:
    702e:	f6 f7       	brtc	.-4      	; 0x702c <__divmodhi4_exit>
    7030:	90 95       	com	r25
    7032:	81 95       	neg	r24
    7034:	9f 4f       	sbci	r25, 0xFF	; 255
    7036:	08 95       	ret

00007038 <__udivmodsi4>:
    7038:	a1 e2       	ldi	r26, 0x21	; 33
    703a:	1a 2e       	mov	r1, r26
    703c:	aa 1b       	sub	r26, r26
    703e:	bb 1b       	sub	r27, r27
    7040:	fd 01       	movw	r30, r26
    7042:	0d c0       	rjmp	.+26     	; 0x705e <__udivmodsi4_ep>

00007044 <__udivmodsi4_loop>:
    7044:	aa 1f       	adc	r26, r26
    7046:	bb 1f       	adc	r27, r27
    7048:	ee 1f       	adc	r30, r30
    704a:	ff 1f       	adc	r31, r31
    704c:	a2 17       	cp	r26, r18
    704e:	b3 07       	cpc	r27, r19
    7050:	e4 07       	cpc	r30, r20
    7052:	f5 07       	cpc	r31, r21
    7054:	20 f0       	brcs	.+8      	; 0x705e <__udivmodsi4_ep>
    7056:	a2 1b       	sub	r26, r18
    7058:	b3 0b       	sbc	r27, r19
    705a:	e4 0b       	sbc	r30, r20
    705c:	f5 0b       	sbc	r31, r21

0000705e <__udivmodsi4_ep>:
    705e:	66 1f       	adc	r22, r22
    7060:	77 1f       	adc	r23, r23
    7062:	88 1f       	adc	r24, r24
    7064:	99 1f       	adc	r25, r25
    7066:	1a 94       	dec	r1
    7068:	69 f7       	brne	.-38     	; 0x7044 <__udivmodsi4_loop>
    706a:	60 95       	com	r22
    706c:	70 95       	com	r23
    706e:	80 95       	com	r24
    7070:	90 95       	com	r25
    7072:	9b 01       	movw	r18, r22
    7074:	ac 01       	movw	r20, r24
    7076:	bd 01       	movw	r22, r26
    7078:	cf 01       	movw	r24, r30
    707a:	08 95       	ret

0000707c <__udivmodhi4>:
    707c:	aa 1b       	sub	r26, r26
    707e:	bb 1b       	sub	r27, r27
    7080:	51 e1       	ldi	r21, 0x11	; 17
    7082:	07 c0       	rjmp	.+14     	; 0x7092 <__udivmodhi4_ep>

00007084 <__udivmodhi4_loop>:
    7084:	aa 1f       	adc	r26, r26
    7086:	bb 1f       	adc	r27, r27
    7088:	a6 17       	cp	r26, r22
    708a:	b7 07       	cpc	r27, r23
    708c:	10 f0       	brcs	.+4      	; 0x7092 <__udivmodhi4_ep>
    708e:	a6 1b       	sub	r26, r22
    7090:	b7 0b       	sbc	r27, r23

00007092 <__udivmodhi4_ep>:
    7092:	88 1f       	adc	r24, r24
    7094:	99 1f       	adc	r25, r25
    7096:	5a 95       	dec	r21
    7098:	a9 f7       	brne	.-22     	; 0x7084 <__udivmodhi4_loop>
    709a:	80 95       	com	r24
    709c:	90 95       	com	r25
    709e:	bc 01       	movw	r22, r24
    70a0:	cd 01       	movw	r24, r26
    70a2:	08 95       	ret

000070a4 <__prologue_saves__>:
    70a4:	2f 92       	push	r2
    70a6:	3f 92       	push	r3
    70a8:	4f 92       	push	r4
    70aa:	5f 92       	push	r5
    70ac:	6f 92       	push	r6
    70ae:	7f 92       	push	r7
    70b0:	8f 92       	push	r8
    70b2:	9f 92       	push	r9
    70b4:	af 92       	push	r10
    70b6:	bf 92       	push	r11
    70b8:	cf 92       	push	r12
    70ba:	df 92       	push	r13
    70bc:	ef 92       	push	r14
    70be:	ff 92       	push	r15
    70c0:	0f 93       	push	r16
    70c2:	1f 93       	push	r17
    70c4:	cf 93       	push	r28
    70c6:	df 93       	push	r29
    70c8:	cd b7       	in	r28, 0x3d	; 61
    70ca:	de b7       	in	r29, 0x3e	; 62
    70cc:	ca 1b       	sub	r28, r26
    70ce:	db 0b       	sbc	r29, r27
    70d0:	0f b6       	in	r0, 0x3f	; 63
    70d2:	f8 94       	cli
    70d4:	de bf       	out	0x3e, r29	; 62
    70d6:	0f be       	out	0x3f, r0	; 63
    70d8:	cd bf       	out	0x3d, r28	; 61
    70da:	09 94       	ijmp

000070dc <__epilogue_restores__>:
    70dc:	2a 88       	ldd	r2, Y+18	; 0x12
    70de:	39 88       	ldd	r3, Y+17	; 0x11
    70e0:	48 88       	ldd	r4, Y+16	; 0x10
    70e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    70e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    70e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    70e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    70ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    70ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    70ee:	b9 84       	ldd	r11, Y+9	; 0x09
    70f0:	c8 84       	ldd	r12, Y+8	; 0x08
    70f2:	df 80       	ldd	r13, Y+7	; 0x07
    70f4:	ee 80       	ldd	r14, Y+6	; 0x06
    70f6:	fd 80       	ldd	r15, Y+5	; 0x05
    70f8:	0c 81       	ldd	r16, Y+4	; 0x04
    70fa:	1b 81       	ldd	r17, Y+3	; 0x03
    70fc:	aa 81       	ldd	r26, Y+2	; 0x02
    70fe:	b9 81       	ldd	r27, Y+1	; 0x01
    7100:	ce 0f       	add	r28, r30
    7102:	d1 1d       	adc	r29, r1
    7104:	0f b6       	in	r0, 0x3f	; 63
    7106:	f8 94       	cli
    7108:	de bf       	out	0x3e, r29	; 62
    710a:	0f be       	out	0x3f, r0	; 63
    710c:	cd bf       	out	0x3d, r28	; 61
    710e:	ed 01       	movw	r28, r26
    7110:	08 95       	ret

00007112 <memcpy>:
    7112:	fb 01       	movw	r30, r22
    7114:	dc 01       	movw	r26, r24
    7116:	02 c0       	rjmp	.+4      	; 0x711c <memcpy+0xa>
    7118:	01 90       	ld	r0, Z+
    711a:	0d 92       	st	X+, r0
    711c:	41 50       	subi	r20, 0x01	; 1
    711e:	50 40       	sbci	r21, 0x00	; 0
    7120:	d8 f7       	brcc	.-10     	; 0x7118 <memcpy+0x6>
    7122:	08 95       	ret

00007124 <memset>:
    7124:	dc 01       	movw	r26, r24
    7126:	01 c0       	rjmp	.+2      	; 0x712a <memset+0x6>
    7128:	6d 93       	st	X+, r22
    712a:	41 50       	subi	r20, 0x01	; 1
    712c:	50 40       	sbci	r21, 0x00	; 0
    712e:	e0 f7       	brcc	.-8      	; 0x7128 <memset+0x4>
    7130:	08 95       	ret

00007132 <strncpy>:
    7132:	fb 01       	movw	r30, r22
    7134:	dc 01       	movw	r26, r24
    7136:	41 50       	subi	r20, 0x01	; 1
    7138:	50 40       	sbci	r21, 0x00	; 0
    713a:	48 f0       	brcs	.+18     	; 0x714e <strncpy+0x1c>
    713c:	01 90       	ld	r0, Z+
    713e:	0d 92       	st	X+, r0
    7140:	00 20       	and	r0, r0
    7142:	c9 f7       	brne	.-14     	; 0x7136 <strncpy+0x4>
    7144:	01 c0       	rjmp	.+2      	; 0x7148 <strncpy+0x16>
    7146:	1d 92       	st	X+, r1
    7148:	41 50       	subi	r20, 0x01	; 1
    714a:	50 40       	sbci	r21, 0x00	; 0
    714c:	e0 f7       	brcc	.-8      	; 0x7146 <strncpy+0x14>
    714e:	08 95       	ret

00007150 <_exit>:
    7150:	f8 94       	cli

00007152 <__stop_program>:
    7152:	ff cf       	rjmp	.-2      	; 0x7152 <__stop_program>
